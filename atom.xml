<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wgtech.dev</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wgtech.github.io/"/>
  <updated>2019-10-28T13:52:48.684Z</updated>
  <id>https://wgtech.github.io/</id>
  
  <author>
    <name>wgtech</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ubuntu에서 adb no permissions 또는 ????? no permissions 뜨는 현상</title>
    <link href="https://wgtech.github.io/posts/2019/08/11/Android-51-android.rules-no-permissions/"/>
    <id>https://wgtech.github.io/posts/2019/08/11/Android-51-android.rules-no-permissions/</id>
    <published>2019-08-11T02:15:53.000Z</published>
    <updated>2019-10-28T13:52:48.684Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>기존 ADB No Permissions 이슈를 다룬 포스트가 있어, 이 포스트로 통합 작성 및 수정을 완료했습니다.</strong></p></blockquote><br><h1 id="시작"><a href="#시작" class="headerlink" title="시작"></a>시작</h1><p>현재 여러 안드로이드 디바이스들을 활용하여, 앱 테스팅을 작업하고 있습니다.</p><p>진행 환경은 Ubuntu 18.04에서 Android Studio 로 작업하고 있습니다.</p><p>그런데 아무래도 <strong>adb</strong> CLI를 다루는 것에 좀 친숙해야하니까,<br>억지로라도 CLI 입력하여 작업하고 있는데..</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List of devices attached</span><br><span class="line">????????????    no permissions</span><br></pre></td></tr></table></figure><p>화면에 떠 있는 저 두 줄이 저에게 찾아온 것이죠.</p><br><h1 id="해결해봅시다"><a href="#해결해봅시다" class="headerlink" title="해결해봅시다"></a>해결해봅시다</h1><h2 id="USB-Debugging"><a href="#USB-Debugging" class="headerlink" title="USB Debugging"></a>USB Debugging</h2><p>Options &gt; About Phone &gt; Build number (또는 설정 &gt; 단말기 정보 &gt; 빌드 넘버 )를 3번 눌러서<br>Developer Options (개발자 옵션)을 활성화 시킵니다.<br>그리고 USB Debugging (USB 디버깅) 옵션을 체크합니다.</p><p>아마 대부분 이 건 체크를 하셨을테고…</p><br><h2 id="USB-연결-모드-설정"><a href="#USB-연결-모드-설정" class="headerlink" title="USB 연결 모드 설정"></a>USB 연결 모드 설정</h2><p>이 부분은 많이들 까먹는 경우가 많습니다!일부 기기들은 USB 디버깅할 때마다 매번 설정해줘야 하기 때문입니다.<br>대부분 USB Debugging 옵션을 설정하는 거에 마치는 분들이 많은데..<br>간혹 USB 연결시 ‘Charging(충전)’ 모드로 활성화하시는 분들이 계십니다.<br><strong>adb</strong> 연결시 MTP (File Transfer) 프로토콜 연결을 활성화시킬 필요가 있습니다.<br>(PTP; Picture Transfer Protocol 도 지원하는 경우가 있으나, 보통은 MTP 옵션으로 맞추는 것이 일반적입니다.)</p><blockquote><ol><li>설정 (Settings) 이동</li><li>저장소 및 USB (Storage) 이동, 또는 개발자 옵션 (Developer Options) 이동</li><li>USB 설정 선택 (USB Computer Connection) 화면 선택</li><li><strong>PTP (Picture Transfer Protocol)</strong> 라디오 버튼 선택</li></ol></blockquote><br><h2 id="51-android-rules"><a href="#51-android-rules" class="headerlink" title="51-android.rules"></a>51-android.rules</h2><p>Ubuntu(또는 Fedora 등) Linux 환경에서 개발하기 위해선, 각 기기의 USB Configuration 항목이 설정된 <strong>udev</strong> 파일을 추가해줘야합니다. 그리고 이 udev 파일에는 반드시 고유 제조사의 ID 번호가 반드시 기록되어 있어야 합니다.</p><p>이렇게 Android Debugging 용도로 추가해야 하는 파일의 이름은 <strong>51-android.rules</strong> 입니다.<br>이 파일의 경로는 <strong>/etc/udev/rules.d</strong>에 위치하여야 합니다.</p><blockquote><p><strong>/etc/udev/rules.d/51-android.rules</strong></p></blockquote><h3 id="파일-존재-유무-확인"><a href="#파일-존재-유무-확인" class="headerlink" title="파일 존재 유무 확인"></a>파일 존재 유무 확인</h3><p>이 파일이 존재한지 확인합니다. 존재하다면 아래 과정을 진행해주세요</p><p>이 파일을 기록하는 포맷은 다음과 같습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;2a48&quot;, MODE=&quot;0600&quot;, OWNER=&quot;wgtech.dev&quot;</span><br></pre></td></tr></table></figure><p>여기서 가장 중요한 부분은 <strong>ATTR{idVendor}</strong> 입니다.</p><p>Windows는 각 제조사의 USB Driver를 이용하여 각각 설치해야하고,<br>Mac은 크게 설치해야하는 부분이 없다는 것과는 다르게, Linux 환경에서는 각각의 고유 제조사 번호를 알아야합니다.</p><p>아무튼 설명으로 돌아오자면</p><ol><li>SUBSYSTEM</li></ol><ul><li>이는 USB로 연결할 것이라고 선언하는 문구입니다.</li></ul><ol start="2"><li><strong>ATTR{idVendor}</strong></li></ol><ul><li><a href="http://www.linux-usb.org/usb.ids" rel="external nofollow noopener noreferrer" target="_blank">여기</a>를 참고하여 adb 연결할 기기의 제조사 ID를 입력해야합니다.</li></ul><ol start="3"><li>MODE</li></ol><ul><li>권한을 설정합니다. (여기서 600 = u+rw = 사용자에게 읽기(r;read)와 쓰기(w;write) 권한을 부여합니다.)</li></ul><ol start="4"><li>OWNER</li></ol><ul><li>시스템 프레임워크 개발시 Build 작성자의 이름을 정할 수 있습니다.</li><li>여러 기기를 사용할 경우, 모든 줄(설정)의 OWNER 부분은 반드시 동일해야합니다. (그래야 헷갈리지 않으니까요!)</li></ul><br> <h3 id="여기서-질문"><a href="#여기서-질문" class="headerlink" title="여기서 질문!"></a>여기서 질문!</h3><p>Q. 제조사 번호 (idVendor) 값을 모르겠어요..</p><p>A. <strong>lsusb</strong> 명령어를 이용하면 됩니다.</p><blockquote><p>USB 연결 전 lsusb</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> lsusb</span><br><span class="line"></span><br><span class="line">Bus 006 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class="line">Bus 005 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br><span class="line">Bus 004 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class="line">Bus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br><span class="line">Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class="line">Bus 001 Device 020: ID 046d:c31d Logitech, Inc. Media Keyboard K200</span><br><span class="line">Bus 001 Device 022: ID 2516:0051  </span><br><span class="line">Bus 001 Device 021: ID 046d:c077 Logitech, Inc. M105 Optical Mouse</span><br><span class="line">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br></pre></td></tr></table></figure><blockquote><p>USB 연결 후 lsusb</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Bus 006 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class="line">Bus 005 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br><span class="line">Bus 004 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class="line">Bus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br><span class="line">Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class="line">Bus 001 Device 020: ID 046d:c31d Logitech, Inc. Media Keyboard K200</span><br><span class="line">Bus 001 Device 028: ID 2a48:5103</span><br><span class="line">Bus 001 Device 022: ID 2516:0051  </span><br><span class="line">Bus 001 Device 021: ID 046d:c077 Logitech, Inc. M105 Optical Mouse</span><br><span class="line">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br></pre></td></tr></table></figure><p>차이를 확인하셨나요?</p><p><font color="gray"><i>이 마치 수수께끼 같은 느낌..</i></font></p><p>정답은..</p><blockquote><p>Bus 001 Device 028: ID <strong>2a48</strong>:5103</p></blockquote><p>여기서 2a48이 제조사 번호입니다. (여기서 2a48은 ‘일반 USB 기기’를 의미하는 제조사 번호입니다.)</p><p>제조사 번호와 기기ID를 파악했으니 51-android.rules 파일을 생성하여 다음과 같이 작성하면 됩니다.</p><figure class="highlight plain"><figcaption><span>/etc/udev/rules.d/51-android.rules </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;2a48&quot;, MODE=&quot;0600&quot;, OWNER=&quot;woody&quot;</span><br></pre></td></tr></table></figure><p>그리고 …!</p><br><h3 id="AndroidManifest-xml-파일-수정"><a href="#AndroidManifest-xml-파일-수정" class="headerlink" title="AndroidManifest.xml 파일 수정"></a>AndroidManifest.xml 파일 수정</h3><p>Android Studio, IntelliJ 또는 Eclipse 등의 IDE/Tools 프로그램에서<br>AndroidManifest.xml 파일을 아래와 같이 작성이 되어 있는지 확인해주세요.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">    (..중략)</span><br><span class="line">    android:debuggable="true"&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure><br><h2 id="adb-재실행"><a href="#adb-재실행" class="headerlink" title="adb 재실행"></a>adb 재실행</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> adb가 켜져 있다면 종료 먼저 하기!</span><br><span class="line"><span class="meta">$</span> sudo adb kill-server</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 아래 중 여러분의 리눅스 환경에 따라 1가지를 골라 udev 서비스를 재시작해주세요.</span><br><span class="line"><span class="meta">$</span> sudo /etc/init.d/udev restart</span><br><span class="line"><span class="meta">$</span> sudo udevadm control --reload-rules</span><br><span class="line"><span class="meta">$</span> sudo udevadm trigger </span><br><span class="line"><span class="meta">$</span> sudo reload udev</span><br><span class="line"><span class="meta">$</span> sudo service udev restart</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 그리고 다시 adb를 실행시켜주세요.</span><br><span class="line"><span class="meta">$</span> sudo adb start-server</span><br></pre></td></tr></table></figure><p>이로써, no permissions 나 ??????? 가 뜨는 현상은 해결될 수 있을 것입니다.</p><hr><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ul><li><a href="https://kldp.org/node/154396" rel="external nofollow noopener noreferrer" target="_blank">Writing udev rules, udev 규칙 작성법에 관하여</a></li><li><a href="http://www.linux-usb.org/usb.ids" rel="external nofollow noopener noreferrer" target="_blank">usb.ids</a></li><li><a href="https://developer.android.com/studio/run/device?hl=ko" rel="external nofollow noopener noreferrer" target="_blank">하드웨어 기기에서 앱 실행</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;기존 ADB No Permissions 이슈를 다룬 포스트가 있어, 이 포스트로 통합 작성 및 수정을 완료했습니다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;h1 id=&quot;시작&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="Programming" scheme="https://wgtech.github.io/categories/Programming/"/>
    
      <category term="Framework" scheme="https://wgtech.github.io/categories/Programming/Framework/"/>
    
      <category term="Android" scheme="https://wgtech.github.io/categories/Programming/Framework/Android/"/>
    
    
      <category term="Programming" scheme="https://wgtech.github.io/tags/Programming/"/>
    
      <category term="Framework" scheme="https://wgtech.github.io/tags/Framework/"/>
    
      <category term="Android" scheme="https://wgtech.github.io/tags/Android/"/>
    
      <category term="Platform" scheme="https://wgtech.github.io/tags/Platform/"/>
    
      <category term="Linux" scheme="https://wgtech.github.io/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="https://wgtech.github.io/tags/Ubuntu/"/>
    
      <category term="Fedora" scheme="https://wgtech.github.io/tags/Fedora/"/>
    
  </entry>
  
  <entry>
    <title>PNG파일이 아닌 XML파일로 Drawables 파일 지정시 발생되는 에러 (Can&#39;t process attribute ... references to other resources are not supported by build-time PNG generation.)</title>
    <link href="https://wgtech.github.io/posts/2019/08/05/Android-drawables-references-to-other-resources-are-not-supported-by-build-time-png-generation/"/>
    <id>https://wgtech.github.io/posts/2019/08/05/Android-drawables-references-to-other-resources-are-not-supported-by-build-time-png-generation/</id>
    <published>2019-08-05T14:26:15.000Z</published>
    <updated>2019-10-28T13:52:48.686Z</updated>
    
    <content type="html"><![CDATA[<h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><p>간단한 WebView Application을 개발하고, <a href="https://material.io/resources/icons/" rel="external nofollow noopener noreferrer" target="_blank">Material Design</a> 사이트에서 아이콘을 내려받아 이를 적용하는 작업을 진행하고 있었습니다.</p><p>해당 사이트에서는 PNG 파일과 XML 파일을 내려받을 수 있는데, PNG 이미지 파일의 사이즈는 고정적이기 때문에 되도록 XML 파일을 통해 추가하려고 시도했습니다.</p><p>(요즘 PNG raw 파일보단 XML을 통해 해상도 파편화 이슈로부터 자유로워지려는 트렌드도 한몫했구요.)</p><p>그러던 중, 아래와 같은 오류를 경험하게 된 것이죠.</p><hr><h1 id="오류-발생"><a href="#오류-발생" class="headerlink" title="오류 발생"></a>오류 발생</h1><font color="red">java.lang.RuntimeException:<br>    Error while processing /media/.../baseline_search_24.xml :    Can't process attribute android:fillColor="@android:color/white": references to other resources are not supported by build-time PNG generation.<br>File was preprocessed as vector drawable support was added in Android 5.0 (API level 21)<br>See http://developer.android.com/tools/help/vector-asset-studio.html for details.<br></font><hr><h1 id="어떻게-해결해야할까요"><a href="#어떻게-해결해야할까요" class="headerlink" title="어떻게 해결해야할까요?"></a>어떻게 해결해야할까요?</h1><p>사용중인 Gradle 버전에 따라 각기 다르게 적용하면 됩니다.</p><figure class="highlight gradle"><figcaption><span>build.gradle (Gradle 1.5 이하)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        <span class="comment">// Stops the Gradle plugin’s automatic rasterization of vectors</span></span><br><span class="line">        generatedDensities = []</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Flag notifies aapt to keep the attribute IDs around</span></span><br><span class="line">    aaptOptions &#123;</span><br><span class="line">        additionalParameters <span class="string">"--no-version-vectors"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>또는,</p><figure class="highlight gradle"><figcaption><span>build.gradle (Gradle 2.0 이상)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig&#123;</span><br><span class="line">        vectorDrawables.useSupportLibrary = <span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>모양으로 build.gradle 파일을 수정하면 됩니다.</p><br><h1 id="왜-발생할까요"><a href="#왜-발생할까요" class="headerlink" title="왜 발생할까요?"></a>왜 발생할까요?</h1><p>PNG과 같은 비트맵 파일을 사용하면 해상도에 따라 모자이크처럼 보이거나, 또는 상당히 작고 흐릿한 이미지로 출력되는 큰 단점이 있습니다. 그래서 중요한 기능에 대한 버튼 및 레이아웃 구성들은 XML와 같은 Vector 파일을 주로 사용하고 있는 추세입니다.</p><p>그러나 Android 5.0 롤리팝 (API 21) 이하의 버전의 환경들 모두가, 반드시 Vector 방식의 drawables를 불러올 수 있는 것이 아니기 때문에 반드시 위와 같은 코드들을 입력해야합니다.</p><hr><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><ol><li><a href="https://developer.android.com/guide/topics/graphics/vector-drawable-resources.html#vector-drawables-backward-solution" rel="external nofollow noopener noreferrer" target="_blank">Android Developers : Vector drawables backward compatibility solution</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerlink&quot; title=&quot;개요&quot;&gt;&lt;/a&gt;개요&lt;/h1&gt;&lt;p&gt;간단한 WebView Application을 개발하고, &lt;a href=&quot;https://material.io/resources/
      
    
    </summary>
    
      <category term="Programming" scheme="https://wgtech.github.io/categories/Programming/"/>
    
      <category term="Framework" scheme="https://wgtech.github.io/categories/Programming/Framework/"/>
    
      <category term="Android" scheme="https://wgtech.github.io/categories/Programming/Framework/Android/"/>
    
    
      <category term="Programming" scheme="https://wgtech.github.io/tags/Programming/"/>
    
      <category term="Framework" scheme="https://wgtech.github.io/tags/Framework/"/>
    
      <category term="Android" scheme="https://wgtech.github.io/tags/Android/"/>
    
      <category term="Platform" scheme="https://wgtech.github.io/tags/Platform/"/>
    
      <category term="Java" scheme="https://wgtech.github.io/tags/Java/"/>
    
      <category term="Kotlin" scheme="https://wgtech.github.io/tags/Kotlin/"/>
    
      <category term="drawables" scheme="https://wgtech.github.io/tags/drawables/"/>
    
      <category term="PNG" scheme="https://wgtech.github.io/tags/PNG/"/>
    
      <category term="XML" scheme="https://wgtech.github.io/tags/XML/"/>
    
  </entry>
  
  <entry>
    <title>git clone push pull 등 시도시, (fatal:No path specified. See &#39;man git-pull&#39; for valid url syntax 발생)</title>
    <link href="https://wgtech.github.io/posts/2019/07/15/git-fatal-No-path-specified/"/>
    <id>https://wgtech.github.io/posts/2019/07/15/git-fatal-No-path-specified/</id>
    <published>2019-07-15T13:52:26.000Z</published>
    <updated>2019-10-28T13:52:48.700Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal : No path specified. See &apos;man git-pull&apos; for valid url syntax</span><br></pre></td></tr></table></figure><p>아니 분명히 경로가 맞는데..? 왜 안되지.. 했는데</p><p><strong>ssh://</strong> 이 프로토콜만 제거하면 되는 것이었습니다.</p><p>예를 들어, ssh://git@your.git.repository:samplebranch 라는 주소를 전달받았다면<br><strong>git@your.git.repository:samplebranch</strong> 식으로 주소를 고치고 새로 시도해보는 것입니다!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="Programming" scheme="https://wgtech.github.io/categories/Programming/"/>
    
      <category term="Source Code Management" scheme="https://wgtech.github.io/categories/Programming/Source-Code-Management/"/>
    
      <category term="Git" scheme="https://wgtech.github.io/categories/Programming/Source-Code-Management/Git/"/>
    
    
      <category term="Programming" scheme="https://wgtech.github.io/tags/Programming/"/>
    
      <category term="Source Code Management" scheme="https://wgtech.github.io/tags/Source-Code-Management/"/>
    
      <category term="Source Control" scheme="https://wgtech.github.io/tags/Source-Control/"/>
    
      <category term="Version Control" scheme="https://wgtech.github.io/tags/Version-Control/"/>
    
      <category term="Revision Control" scheme="https://wgtech.github.io/tags/Revision-Control/"/>
    
      <category term="Git" scheme="https://wgtech.github.io/tags/Git/"/>
    
      <category term="fatal" scheme="https://wgtech.github.io/tags/fatal/"/>
    
      <category term="git-pull" scheme="https://wgtech.github.io/tags/git-pull/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 16.04 (xenial) apt 안 될 때 (E:Problem executing scripts APT::Update::Post-Invoke-Success &#39;if /usr/bin/test -w /var/cache/app-info -a -e /usr/bin/appstreamcli; ... &#39; 발생)</title>
    <link href="https://wgtech.github.io/posts/2019/07/15/Ubuntu-1604-xenial-Problem-Executing-Scripts-APT/"/>
    <id>https://wgtech.github.io/posts/2019/07/15/Ubuntu-1604-xenial-Problem-Executing-Scripts-APT/</id>
    <published>2019-07-15T13:37:14.000Z</published>
    <updated>2019-10-28T13:52:48.699Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2019/07/15/Ubuntu-1604-xenial-Problem-Executing-Scripts-APT/0.png" alt="오우 이런.."></p><p style="text-align:center;"><i>뭐지... 또 밀고 다시 깔아야하나?</i></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Aborted (core dumped)</span><br><span class="line">Reading package lists... Done</span><br><span class="line">E: Problem executing scripts APT::Update::Post-Invoke-Success 'if /usr/bin/test -w /var/cache/app-info -a -e /usr/bin/appstreamcli; then appstreamcli refresh &gt; /dev/null; fi'</span><br><span class="line">E: Sub-process returned an error code</span><br></pre></td></tr></table></figure><p>위와 같은 오류가 발생시 대처할 수 있는 방법은 아래와 같습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo apt-get remove libappstream3</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/2019/07/15/Ubuntu-1604-xenial-Problem-Executing-Scripts-APT/0.png&quot; alt=&quot;오우 이런..&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;text-align:center;&quot;&gt;&lt;i&gt;
      
    
    </summary>
    
      <category term="Operating System" scheme="https://wgtech.github.io/categories/Operating-System/"/>
    
      <category term="Linux" scheme="https://wgtech.github.io/categories/Operating-System/Linux/"/>
    
    
      <category term="Programming" scheme="https://wgtech.github.io/tags/Programming/"/>
    
      <category term="Linux" scheme="https://wgtech.github.io/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="https://wgtech.github.io/tags/Ubuntu/"/>
    
      <category term="xenial" scheme="https://wgtech.github.io/tags/xenial/"/>
    
      <category term="apt-get" scheme="https://wgtech.github.io/tags/apt-get/"/>
    
      <category term="appstreamcli" scheme="https://wgtech.github.io/tags/appstreamcli/"/>
    
      <category term="libappstream3" scheme="https://wgtech.github.io/tags/libappstream3/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 16.04 (xenial) 환경에서 OpenJDK 7 설치하기</title>
    <link href="https://wgtech.github.io/posts/2019/07/15/Install-OpenJDK-7-on-Ubuntu-1604-xenial/"/>
    <id>https://wgtech.github.io/posts/2019/07/15/Install-OpenJDK-7-on-Ubuntu-1604-xenial/</id>
    <published>2019-07-15T13:18:57.000Z</published>
    <updated>2019-10-28T13:52:48.691Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2019/07/15/Install-OpenJDK-7-on-Ubuntu-1604-xenial/1.png" alt="1.8 검색결과"></p><p style="text-align:center;"><i>1.8은 손쉽게 설치 할 수 있으나,</i></p><p><img src="/images/2019/07/15/Install-OpenJDK-7-on-Ubuntu-1604-xenial/2.png" alt="1.7 검색결과"></p><p style="text-align:center;"><i>1.7 버전은 없어요...ㅠㅠ</i></p><p>따라서 패키지 저장소를 추가함으로, OpenJDK 1.7을 설치해보도록 합시다.</p><br><h1 id="설치-방법"><a href="#설치-방법" class="headerlink" title="설치 방법"></a>설치 방법</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo add-apt-repository ppa:openjdk-r/ppa</span><br><span class="line"><span class="meta">$</span> sudo apt-get update -y</span><br><span class="line"><span class="meta">$</span> sudo apt-get install -y openjdk-7-jdk</span><br></pre></td></tr></table></figure><p>위 작성한 문장 세 줄을 순서대로 입력하여 설치를 완료합니다.</p><br><h1 id="다수의-Java-버전-관리하기"><a href="#다수의-Java-버전-관리하기" class="headerlink" title="다수의 Java 버전 관리하기"></a>다수의 Java 버전 관리하기</h1><p>내용이 상당히 깁니다. 자세한 설명은 <a href="https://wgtech.github.io/posts/2019/07/14/Change-the-JDK-using-update-alternatives/">‘이 포스트’</a>에서 확인하세요!</p><br><h1 id="Java-버전-확인하기"><a href="#Java-버전-확인하기" class="headerlink" title="Java 버전 확인하기"></a>Java 버전 확인하기</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> java -version</span><br><span class="line"></span><br><span class="line">java version "1.7.0_95"</span><br><span class="line">OpenJDK Runtime Environment (IcedTea 2.6.4) (7u95-2.6.4-3)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 24.95-b01, mixed mode)</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> javac -version</span><br><span class="line">javac 1.7.0_95</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/2019/07/15/Install-OpenJDK-7-on-Ubuntu-1604-xenial/1.png&quot; alt=&quot;1.8 검색결과&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;text-align:center;&quot;&gt;&lt;i&gt;1.8은 손쉽게
      
    
    </summary>
    
      <category term="Operating System" scheme="https://wgtech.github.io/categories/Operating-System/"/>
    
      <category term="Linux" scheme="https://wgtech.github.io/categories/Operating-System/Linux/"/>
    
    
      <category term="Programming" scheme="https://wgtech.github.io/tags/Programming/"/>
    
      <category term="Linux" scheme="https://wgtech.github.io/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="https://wgtech.github.io/tags/Ubuntu/"/>
    
      <category term="Java" scheme="https://wgtech.github.io/tags/Java/"/>
    
      <category term="OpenJDK" scheme="https://wgtech.github.io/tags/OpenJDK/"/>
    
      <category term="xenial" scheme="https://wgtech.github.io/tags/xenial/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu/centOS 에서 Java(JDK) 버전을 빠르게 바꾸는 방법 (update-alternatives)</title>
    <link href="https://wgtech.github.io/posts/2019/07/14/Change-the-JDK-using-update-alternatives/"/>
    <id>https://wgtech.github.io/posts/2019/07/14/Change-the-JDK-using-update-alternatives/</id>
    <published>2019-07-14T01:50:48.000Z</published>
    <updated>2019-10-28T13:52:48.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="다수의-JDK를-사용하게-되었습니다"><a href="#다수의-JDK를-사용하게-되었습니다" class="headerlink" title="다수의 JDK를 사용하게 되었습니다."></a>다수의 JDK를 사용하게 되었습니다.</h1><p>Oracle에서 Java SE 유료화 정책을 본격 시행됨에 따라, OpenJDK를 사용하게 되었습니다.<br>그 중에 Java 1.8 버전을 사용하고 있는데, 업무상 1.7 버전도 필요하게 되었습니다.</p><p>그런데 일일히 쓸 때마다 환경변수를 바꾸니 보통 번거로운 일이 아닐 수 없었습니다.</p><p>따라서 이번 글에서는 Ubuntu나 centOS에서 <strong>update-alternatives</strong> 명령어를 활용하여,<br>JDK 버전을 적재적시(!) 바꾸는 팁을 소개하고자 합니다.</p><br><h1 id="현재-상황"><a href="#현재-상황" class="headerlink" title="현재 상황"></a>현재 상황</h1><p>우선 Java가 설치되어있는, 또는 지정되어 있는 위치와 현재 시스템에서 사용되는 JDK 버전을 확인해봅시다.</p><h2 id="Java-설치-경로"><a href="#Java-설치-경로" class="headerlink" title="Java 설치 경로"></a>Java 설치 경로</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> which java</span><br><span class="line"></span><br><span class="line">/usr/bin/java</span><br></pre></td></tr></table></figure><p>특별하게 경로를 지정하면서 설치하지 않는 이상 위와 같은 경로 또는 <strong>/usr/lib/jvm</strong> 디렉토리에 설치가 되는 것을 확인할 수가 있습니다.</p><h2 id="실제-Java-버전은…"><a href="#실제-Java-버전은…" class="headerlink" title="실제 Java 버전은…"></a>실제 Java 버전은…</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> java -version</span><br><span class="line"><span class="meta">$</span> javac -version</span><br></pre></td></tr></table></figure><p>위와 같은 명령어를 입력해보면 OpenJDK 1.7 또는 1.8 환경을 확인할 수 있습니다.</p><p>어… 문제는 이제 발생됩니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openjdk-7-jdk</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 또는</span><br><span class="line"></span><br><span class="line">sudo apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure><p>기존 설치된 JDK에서 새로운 JDK를 설치하고 나서 버전과 경로를 확인하면<br><font color="red">새로운 버전과 그에 대한 경로로로 바뀌거나, 바뀌지 않는 문제가 발생됩니다.</font></p><h2 id="따라서"><a href="#따라서" class="headerlink" title="따라서"></a>따라서</h2><p>필요 JDK 버전을 바꿔 작업하는 상황이 오면 일일히 <strong>remove</strong> 나 <strong>autoremove</strong> 또는 <strong>purge</strong>를 해야할 수도 있을 것입니다.</p><br><h1 id="update-alternatives"><a href="#update-alternatives" class="headerlink" title="update-alternatives"></a>update-alternatives</h1><p>일단 이 명령어를 간략하게 소개하자면 이름에서 보시다시피 alternative 를 update 한다는 것입니다.</p><p><font color="gray"><em>뭔 설명이 그래….</em></font></p><p>그러니까 ‘대안이 될 만한’, 또는 ‘선택이 가능한 요소’로 사용이 가능토록 교체해준다는 것입니다.</p><h2 id="현재-겪고-있는-상황에-빗대자면"><a href="#현재-겪고-있는-상황에-빗대자면" class="headerlink" title="현재 겪고 있는 상황에 빗대자면"></a>현재 겪고 있는 상황에 빗대자면</h2><p>여기서, 선택이 가능한 요소란 OpenJDK 1.7과 1.8 입니다.<br>위 두 버전 중에 한 버전을 작업이 가능토록 설정해야하는 것입니다.</p><p>저를 포함하여 Java 로 무언가를 작업하시는 분들이라면 여기서 바꿔줘야할 부분은<br>$JAVA_HOME, java, javac, javadoc, jar … 아무튼 Java와 관련된 것은 틀림 없을겁니다.</p><h2 id="일단-적용해보자"><a href="#일단-적용해보자" class="headerlink" title="일단 적용해보자"></a>일단 적용해보자</h2><p>java, javac, javadoc, jar … 일일히 바꿔보죠..</p><p>아, 근데 이건 좀 많은데.. 뭐 일단 해봅시다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alternatives --install &lt;link&gt; &lt;name&gt; &lt;path&gt; &lt;priority&gt;</span><br><span class="line">alternatives --remove &lt;name&gt;</span><br><span class="line">alternatives --config &lt;name&gt;</span><br><span class="line">alternatives --display &lt;name&gt;</span><br><span class="line">alternatives --set &lt;name&gt; &lt;path&gt;</span><br></pre></td></tr></table></figure><p>변수 없이 단순히 <strong>update-alternatives</strong> 명령어를 입력하면 위와 같은 도움말이 등장합니다.</p><p>도움말 내용을 보니, 입력이 가능한 변수값에는 <strong>&lt;link&gt;</strong>, <strong>&lt;name&gt;</strong>, <strong>&lt;path&gt;</strong> 가 있습니다.</p><blockquote><p><strong>“아! symbolic link를 활용하는 것이군요!”</strong></p></blockquote><p>네, 그렇습니다.</p><p>보통 <strong>update-alternatives</strong> 에서는 <strong>–config</strong> 옵션과 <strong>name</strong> 변수값을 주로 사용합니다.<br>–config 옵션을 통해 관리되는 <strong>name</strong> 값에 대한 위치 지정할 수 있습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> update-alternatives java</span><br></pre></td></tr></table></figure><p>라는 명령어를 입력하면,</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*+  1   /usr/lib/jvm/java-7-openjdk-amd64/bin/java</span><br><span class="line">    2   /usr/lib/jvm/java-8-openjdk-amd64/bin/java</span><br><span class="line"></span><br><span class="line">Enter to keep the current selection[+], or type selection number:</span><br></pre></td></tr></table></figure><p>라는 화면을 확인할 수 있습니다. 이는, 1번 옵션이 곧 java라는 것을 가리키는 것을 확인할 수 있고,<br>새로운 환경으로 지정할 지 고를 수 있다는 것이죠.</p><p>그러면 우리는 여기서, java를 OpenJDK 1.8로 바꾸려면 2번을 누르면 되는 것이죠!이렇게 javac, jar, javadoc 등을 위와 같은 명령어를 통해 변경하면 됩니다.</p><p>그리고 .bashrc 나 .bash_profile (또는 사용하시는 shell 환경에 따라선 .zshrc 등) 파일에서 <strong>$JAVA_HOME</strong>을 새로 설정해줘야합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure><h2 id="그런데"><a href="#그런데" class="headerlink" title="그런데.."></a>그런데..</h2><p>잘 생각해보면, 일일히 이런 방법을 쓰는건 정말 불편하지 않을까요?</p><blockquote><p>java, jar, javadoc, $JAVA_HOME …</p></blockquote><p>우리가 바꿔야할 항목만 해도 최소한 4건입니다.<br>우리는 <strong>개발자</strong>이기에 일일히 명령어를 입력하는것은 굉장히 비효율적이라는 것을 알 수 있죠</p><p>이렇게 입력하는 동안에, 우리의 소중한 시간 1초는 더 빨리 더 멀리 더 힘차게 가게되고,<br>내 일은 점점 더 못 하고 미루고… <font color="gray"><em>그렇게 야근을 하고…</em></font></p><br><h1 id="더-효율적으로-바꾸기"><a href="#더-효율적으로-바꾸기" class="headerlink" title="더 효율적으로 바꾸기"></a>더 효율적으로 바꾸기</h1><p>따라서 제가 일을 쉽게하는 방법을 제안하고자합니다.</p><p>오래 걸렸죠? 지금부터 방법을 소개하자면…</p><blockquote><p><strong>1. OpenJDK 1.7, 1.8를 전부 설치합니다.</strong><br><strong>2. JDK 설치 위치를 전부 파악합니다. (보통 JDK는 /usr/lib/jvm에 설치)</strong><br><strong>3. 별도의 심볼릭 링크를 생성합니다.</strong><br><strong>4. update-alternatives를 통하여 별도의 심볼릭 링크 디렉토리의 java, javac 등을 등록합니다</strong><br><strong>5. 심볼릭 링크를 JDK1.7, JDK1.8 를 자동으로 변경할 수 있도록 쉘 스크립트나 alias로 자동화합니다.</strong></p></blockquote><p>입니다.</p><br><h2 id="OpenJDK-1-7-1-8를-전부-설치"><a href="#OpenJDK-1-7-1-8를-전부-설치" class="headerlink" title="OpenJDK 1.7, 1.8를 전부 설치"></a>OpenJDK 1.7, 1.8를 전부 설치</h2><p>이미 설치하는 방법은 검색하시면 너무나 잘 나와있습니다.<br>그러나 (2019.07.14 기준) 현재 OpenJDK 1.7을 단순히 명령어로 설치하기 어렵습니다.<br>따라서 launchpad.net 또는 별도의 repository 를 등록하고, 설치하면 됩니다.</p><p>자세한 설명은 <a href="https://wgtech.github.io/posts/2019/07/15/Install-OpenJDK-7-on-Ubuntu-1604-xenial/">‘이 포스트’</a>에서 확인하세요!                                           </p><br><h2 id="JDK-설치-위치를-전부-파악합니다"><a href="#JDK-설치-위치를-전부-파악합니다" class="headerlink" title="JDK 설치 위치를 전부 파악합니다."></a>JDK 설치 위치를 전부 파악합니다.</h2><p><strong>sudo apt-get install</strong> 명령어를 통해 설치하면,<br>보통은 <strong>/usr/lib/jvm</strong> 디렉토리에 설치됩니다.<br>이 디렉토리에 접근하면</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ls -al</span><br><span class="line"></span><br><span class="line">drwxr-xr-x   4 root root 4096  7월 15 09:43 .</span><br><span class="line">drwxr-xr-x 136 root root 4096  7월 12 17:20 ..</span><br><span class="line">-rw-r--r--   1 root root 2439  3월 28  2016 .java-1.7.0-openjdk-amd64.jinfo</span><br><span class="line">-rw-r--r--   1 root root 2714  4월 26 12:20 .java-1.8.0-openjdk-amd64.jinfo</span><br><span class="line">lrwxrwxrwx   1 root root   20  3월 28  2016 java-1.7.0-openjdk-amd64 -&gt; java-7-openjdk-amd64</span><br><span class="line">lrwxrwxrwx   1 root root   20  4월 26 12:20 java-1.8.0-openjdk-amd64 -&gt; java-8-openjdk-amd64</span><br><span class="line">drwxr-xr-x   7 root root 4096  7월 12 17:20 java-7-openjdk-amd64</span><br><span class="line">drwxr-xr-x   7 root root 4096  7월 15 09:43 java-8-openjdk-amd64</span><br></pre></td></tr></table></figure><p>식으로 나타나게 되는데, 심볼릭 링크는 이름대로 각 버전을 가리키는 것을 알 수 있습니다.</p><br><h2 id="별도의-심볼릭-링크를-생성합니다"><a href="#별도의-심볼릭-링크를-생성합니다" class="headerlink" title="별도의 심볼릭 링크를 생성합니다"></a>별도의 심볼릭 링크를 생성합니다</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> mkdir -R /opt/jdk</span><br><span class="line"><span class="meta">$</span> ln -s /usr/lib/jvm/java-7-openjdk /opt/jdk/current</span><br></pre></td></tr></table></figure><p>sudo와 chown 옵션을 활용하여 개발에 지장없게끔 설정하실 필요가 있습니다.</p><br><h2 id="update-alternatives로-등록합니다"><a href="#update-alternatives로-등록합니다" class="headerlink" title="update-alternatives로 등록합니다"></a>update-alternatives로 등록합니다</h2><p>우리는 install 옵션을 통해 별도로 생성한 심볼릭 링크 디렉토리 내 파일을 등록시킵니다.</p><blockquote><p><strong>update-alternatives install 옵션 사용 방식</strong><br>alternatives --install &lt;link&gt; &lt;name&gt; &lt;path&gt; &lt;priority&gt;</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo update-alternatives --install /usr/bin/java java /opt/jdk/current/bin/java 1</span><br><span class="line"><span class="meta">$</span> sudo update-alternatives --config java</span><br></pre></td></tr></table></figure><blockquote><p><strong>명령어 설명</strong></p><ol><li>sudo : 반드시 시스템 root 권한이 필요하기에 입력해야합니다.</li><li>update-alternatives : 앞서 언급했습니다~</li><li>--install : update-alternatives로, 새로운 심볼릭 링크를 등록할 것임을 알리는 옵션입니다.</li><li>/usr/bin/java : 최종적으로 /usr/bin/java 로 심볼릭 링크가 저장될 것입니다. (which java 입력시 나타나는 심볼릭 링크 위치입니다.)</li><li>java : java 라는 명령어를 쳐서 java 기능을 활용할 것이기에 입력해야합니다</li><li>/opt/jdk/current/bin/java : 별도의 심볼릭 링크를 만들었습니다. 버전을 자유롭게 활용하기 위해 새로 만든 심볼릭 링크입니다.</li><li>1 : 숫자가 <strong>낮을수록</strong> 우선순위는 <strong>높습니다</strong>.</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">대체 항목 java에 대해 (/usr/bin/java 제공) 3개 선택이 있습니다.</span><br><span class="line"></span><br><span class="line">  선택       경로                                       우선순� 상태</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">  0            /usr/lib/jvm/java-8-openjdk-amd64/bin/java   1081      자동 모드</span><br><span class="line">* 1            /opt/jdk/current/bin/java                    1         수동 모드</span><br><span class="line">  2            /usr/lib/jvm/java-7-openjdk-amd64/bin/java   1071      수동 모드</span><br><span class="line">  3            /usr/lib/jvm/java-8-openjdk-amd64/bin/java   1081      수동 모드</span><br><span class="line"></span><br><span class="line">Press &lt;enter&gt; to keep the current choice[*], or type selection number: 1</span><br></pre></td></tr></table></figure><p>위와 같은 방법으로 <strong>javac</strong>, <strong>jar</strong>, <strong>javadoc</strong> 등을 등록합니다.</p><p>그리고 <strong>update-alternatives –display</strong> 옵션을 사용하여 정상적으로 등록되어 있는지 확인합니다.</p><br><h2 id="쉘-스크립트나-alias로-자동화합니다"><a href="#쉘-스크립트나-alias로-자동화합니다" class="headerlink" title="쉘 스크립트나 alias로 자동화합니다"></a>쉘 스크립트나 alias로 자동화합니다</h2><p>저는 개인적으로 alias 설정이 가장 무난하고 쉽다고 생각합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME="/opt/jdk/current"</span><br><span class="line">export PATH="$PATH:$JAVA_HOME/bin"</span><br><span class="line"></span><br><span class="line">alias chjdk7="rm /opt/jdk/current &amp;&amp; ln -s /usr/lib/jvm/java-1.7.0-openjdk-amd64"</span><br><span class="line">alias chjdk8="rm /opt/jdk/current &amp;&amp; ln -s /usr/lib/jvm/java-1.8.0-openjdk-amd64"</span><br></pre></td></tr></table></figure><p>그리고 source 명령어를 입력하여 쉘 환경변수를 등록하면 됩니다.<br>저는 chjdk7 과 chjdk8 명령어를 alias로 등록하여 사용합니다!</p><figure class="highlight shell"><figcaption><span>chjdk7 명령어 입력시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> java -version</span><br><span class="line"></span><br><span class="line">java version "1.7.0_95"</span><br><span class="line">OpenJDK Runtime Environment (IcedTea 2.6.4) (7u95-2.6.4-3)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 24.95-b01, mixed mode)</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> javac -version</span><br><span class="line">javac 1.7.0_95</span><br></pre></td></tr></table></figure><figure class="highlight shell"><figcaption><span>chjdk8 명령어 입력시</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> java -version</span><br><span class="line">openjdk version "1.8.0_212"</span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_212-8u212-b03-0ubuntu1.16.04.1-b03)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.212-b03, mixed mode)</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> javac -version</span><br><span class="line">javac 1.8.0_212</span><br></pre></td></tr></table></figure><hr><p>2019년 9월 30일 월요일 오후 11시 35분</p><ul><li>오타 수정</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;다수의-JDK를-사용하게-되었습니다&quot;&gt;&lt;a href=&quot;#다수의-JDK를-사용하게-되었습니다&quot; class=&quot;headerlink&quot; title=&quot;다수의 JDK를 사용하게 되었습니다.&quot;&gt;&lt;/a&gt;다수의 JDK를 사용하게 되었습니다.&lt;/h1&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="Operating System" scheme="https://wgtech.github.io/categories/Operating-System/"/>
    
      <category term="Linux" scheme="https://wgtech.github.io/categories/Operating-System/Linux/"/>
    
    
      <category term="Programming" scheme="https://wgtech.github.io/tags/Programming/"/>
    
      <category term="Linux" scheme="https://wgtech.github.io/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="https://wgtech.github.io/tags/Ubuntu/"/>
    
      <category term="Java" scheme="https://wgtech.github.io/tags/Java/"/>
    
      <category term="centOS" scheme="https://wgtech.github.io/tags/centOS/"/>
    
      <category term="OpenJDK" scheme="https://wgtech.github.io/tags/OpenJDK/"/>
    
      <category term="update-alternatives" scheme="https://wgtech.github.io/tags/update-alternatives/"/>
    
  </entry>
  
  <entry>
    <title>T아카데미 토크ON세미나 54차 &#39;쿠버네티스 살펴보기&#39; : 4강 실습하기 Kubernetes</title>
    <link href="https://wgtech.github.io/posts/2019/07/01/TAcademy-54-Kubernetes-4-Pratice/"/>
    <id>https://wgtech.github.io/posts/2019/07/01/TAcademy-54-Kubernetes-4-Pratice/</id>
    <published>2019-07-01T06:20:00.000Z</published>
    <updated>2019-10-28T13:52:48.696Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>이 포스트는 2019년 6월 29일 토요일, SK플래닛 T아카데미에서 진행됐던 세미나에 가서 청강하고 작성했습니다.<br>현재 세미나 강의와 자료는 추후 <a href="https://tacademy.skplanet.com/live/player/onlineLectureDetail.action?seq=162" rel="external nofollow noopener noreferrer" target="_blank">이 곳</a>에서 확인하실 수 있습니다.<br>노트 필기식으로 작성한 내용이기에, 존댓말을 사용하지 않은 점 참고하시기 바랍니다.<br><strong>시간 관계상 급하게 진행하신 부분이 있었습니다. 노트 내용이 정확하지 않은 점 참고하시기 바랍니다.</strong><br><strong>AWS Lightsail 서비스로 실습 진행되었습니다.</strong></p></blockquote><p>* 발표자 : 김충섭 (퍼플웍스) 님</p><br><h1 id="Kubernetes-실습-시작"><a href="#Kubernetes-실습-시작" class="headerlink" title="Kubernetes 실습 시작"></a>Kubernetes 실습 시작</h1><blockquote><p><strong>TIP</strong><br><strong>alias k=’kubectl’</strong>을 입력하면 편하게 명령어를 입력할 수 있습니다.</p></blockquote><h2 id="kubectl"><a href="#kubectl" class="headerlink" title="kubectl"></a>kubectl</h2><h3 id="명령어"><a href="#명령어" class="headerlink" title="명령어"></a>명령어</h3><ul><li>apply : Apply a configuration to a resource by filename or stdin</li><li>get : Display one or many resources</li><li>describe : Show details of a specific resource or group of resources</li><li>delete : Delete resources by filenames, stdin, resources and names, or by resources and label selector</li><li>logs : Print the logs for a container in a pod</li><li>exec : Execute a command in a container</li><li>기타 모든 명령어는 kubectl 입력하면 상세하게 볼 수 있다.</li></ul><h3 id="명령과-선언"><a href="#명령과-선언" class="headerlink" title="명령과 선언"></a>명령과 선언</h3><figure class="highlight shell"><figcaption><span>명령</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl scale --replicas=3 rs/whoami</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><figcaption><span>선언</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1beta2</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicaSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">whoami</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">    replicas:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><ul><li>위 두 코드는 같은 의미이다. 그러나 실제로는 <strong>선언하는 방식을 많이 사용</strong>한다.</li></ul><br><h2 id="특정-오브젝트-조회"><a href="#특정-오브젝트-조회" class="headerlink" title="특정 오브젝트 조회"></a>특정 오브젝트 조회</h2><ul><li>get</li><li>describe</li><li>api-resources : 단축 명령어도 볼수 있다!</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 서비스 목록 조회</span><br><span class="line">kubectl get service</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> kubernetes 라는 서비스에 대한 자세한 정보 보기</span><br><span class="line">kubectl describe service kubernetes</span><br></pre></td></tr></table></figure><br><h1 id="Pod-생성하기"><a href="#Pod-생성하기" class="headerlink" title="Pod 생성하기"></a>Pod 생성하기</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl run whoami --image subicura/whoami:1</span><br></pre></td></tr></table></figure><p><a href="https://github.com/subicura/workshop-k8s-basic/blob/master/guide/guide-03/task-03.md#기본-예제" rel="external nofollow noopener noreferrer" target="_blank">guide-03/task-03/whoami-rs.yml</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1beta2</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicaSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">whoami-rs</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">app</span></span><br><span class="line"><span class="attr">      service:</span> <span class="string">whoami</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">app</span></span><br><span class="line"><span class="attr">        service:</span> <span class="string">whoami</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">whoami</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">subicura/whoami:1</span></span><br><span class="line"><span class="attr">        livenessProbe:</span></span><br><span class="line"><span class="attr">          httpGet:</span></span><br><span class="line"><span class="attr">            path:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">            port:</span> <span class="number">4567</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>template</strong></p><ul><li>selector에서 기재된 pod가 실제로 존재하지 않으면 template에 적힌 항목대로 수행한다.</li></ul></blockquote><br><h1 id="ReplicaSet를-생성하고-Pod-만들기"><a href="#ReplicaSet를-생성하고-Pod-만들기" class="headerlink" title="ReplicaSet를 생성하고 Pod 만들기"></a>ReplicaSet를 생성하고 Pod 만들기</h1><blockquote><p><strong>replicaset</strong></p><ul><li>Match 되는 pod를 찾는다는 것</li><li>ReplicaSet -&gt; Find pod by labels -&gt; Create pod from template</li></ul></blockquote><p><em>그러나 실제로 많이 쓰지 않는다.</em></p><p><strong>Deployment가 내부적으로 ReplicaSet를 사용하고 있고 Replica는 Pods를 만든다.</strong></p><br><h1 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h1><ul><li>replicaset을 활용해서 <strong>개발용 환경을 구축</strong>하여 개발 전략을 수행할 수 있다.</li></ul><h2 id="구축"><a href="#구축" class="headerlink" title="구축"></a>구축</h2><ol><li>명령어 입력<br><img src="/images/2019/07/01/TAcademy-54-Kubernetes-4-Pratice/development-1.png" alt="명령어 입력"></li><li>확인<br><img src="/images/2019/07/01/TAcademy-54-Kubernetes-4-Pratice/development-2.png" alt="확인"></li></ol><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><ul><li>기존 ReplicaSet에 있는 pods가 종료되고, 그 pods가 속한 ReplicaSet이 종료된다.</li><li>버전업된 새 ReplicaSet의 Pods를 실행하고 마찬가지로 해당 Pods가 속한 ReplicaSet은 생존한다.<br><img src="/images/2019/07/01/TAcademy-54-Kubernetes-4-Pratice/development-3.png" alt="ReplicaSet 교체"><br>즉, 자연스럽게 버전 업이 되는 모습을 확인 할 수 있다.<br><img src="/images/2019/07/01/TAcademy-54-Kubernetes-4-Pratice/development-4.png" alt="ReplicaSet 교체 결과"></li></ul><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><blockquote><p><strong>아래 주석들이 다소 부정확할 수 있습니다.</strong></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 해당 히스토리를 본다.</span><br><span class="line">kubectl rollout history -f whoami-deploy.yml</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 리비전이 2인 히스토리를 본다</span><br><span class="line">kubectl rollout history -f whoami-deploy.yml --revision=2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 상태를 확인한다.</span><br><span class="line">kubectl **rollout** status deploy/whoami-deploy</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 버전업 후 오류 발생시 되돌린다.</span><br><span class="line">kubectl rollout undo deploy/whoami-deploy</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 해당 버전으로 되돌린다.</span><br><span class="line">kubectl rollout undo deploy/whoami-deploy --to-revision=3</span><br></pre></td></tr></table></figure><br><h1 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h1><p><a href="https://medium.com/google-cloud/kubernetes-nodeport-vs-loadbalancer-vs-ingress-when-should-i-use-what-922f010849e0" rel="external nofollow noopener noreferrer" target="_blank">Kubernetes NodePort vs LoadBalancer vs Ingress? When should I use what?</a> 라는 제목의 글을 보면 Service를 구성하는 방법으로 Nodeport, LoadBalancer, Ingress가 소개되고 있다.</p><p>이에 대한 간단한 구현 방법을 알아보자.</p><h2 id="NodePort"><a href="#NodePort" class="headerlink" title="NodePort"></a>NodePort</h2><ul><li>모든 네트워크에서 통신되도록, 각 노드에 포트를 연다</li></ul><ol><li><p>예제</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span>  </span><br><span class="line"><span class="attr">  name:</span> <span class="string">my-nodeport-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span>  <span class="comment"># 이 코드에서 selector가 가장 중요함  </span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">my-app</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">  ports:</span>  </span><br><span class="line"><span class="attr">  - name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    nodePort:</span> <span class="number">30036</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br></pre></td></tr></table></figure></li><li><p>Development 예제</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1beta2</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">    selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">db</span></span><br><span class="line"><span class="attr">        service:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">    template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">        labels:</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">db</span></span><br><span class="line"><span class="attr">        service:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">        containers:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">            protocol:</span> <span class="string">TCP</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">    selector:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">db</span></span><br><span class="line"><span class="attr">    service:</span> <span class="string">redis</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p><strong>주의</strong><br>반드시 하이픈 3개(<strong>---</strong>)를 작성해야 하이픈 위 아래 있는 2개 모두 실행됩니다.</p></blockquote><h3 id="실행-및-결과"><a href="#실행-및-결과" class="headerlink" title="실행 및 결과"></a>실행 및 결과</h3><p><img src="/images/2019/07/01/TAcademy-54-Kubernetes-4-Pratice/service-1.png" alt="실행 및 결과"></p><br><h1 id="Load-Balancer"><a href="#Load-Balancer" class="headerlink" title="Load Balancer"></a>Load Balancer</h1><p>Load Balancer는 AWS, GCP 에서 제공하는 서비스를 사용하는 것이 범용적이다.<br>각 노드에 로드밸런서가 생기고 그 로드밸런서로 접속이 된다.</p><br><h1 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h1><ul><li>nginx-ingress를 먼저 설치함 (K3S는 내장)</li></ul><blockquote><p>ip를 기반으로 도메인을 쉽게 사용할 수 있는 방법 (입력과 동시에 바로 적용)</p><ul><li><a href="https://sslip.io/" rel="external nofollow noopener noreferrer" target="_blank">sslip.io</a></li><li><a href="http://xip.io/" rel="external nofollow noopener noreferrer" target="_blank">xip.io</a></li><li><a href="https://nip.io/" rel="external nofollow noopener noreferrer" target="_blank">nip.io</a><br>ex) xxx.xxx.xxx.xxx:1234 → xxx.xxx.xxx.xxx.sslip.io:1234</li></ul></blockquote><hr><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><p><a href="https://github.com/subicura/workshop-k8s-basic" rel="external nofollow noopener noreferrer" target="_blank">김충섭님 Github</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;이 포스트는 2019년 6월 29일 토요일, SK플래닛 T아카데미에서 진행됐던 세미나에 가서 청강하고 작성했습니다.&lt;br&gt;현재 세미나 강의와 자료는 추후 &lt;a href=&quot;https://tacademy.skplanet.com
      
    
    </summary>
    
      <category term="Seminar" scheme="https://wgtech.github.io/categories/Seminar/"/>
    
      <category term="T Academy" scheme="https://wgtech.github.io/categories/Seminar/T-Academy/"/>
    
      <category term="DevOps" scheme="https://wgtech.github.io/categories/Seminar/T-Academy/DevOps/"/>
    
      <category term="Kubernetes" scheme="https://wgtech.github.io/categories/Seminar/T-Academy/DevOps/Kubernetes/"/>
    
    
      <category term="Seminar" scheme="https://wgtech.github.io/tags/Seminar/"/>
    
      <category term="Cloud" scheme="https://wgtech.github.io/tags/Cloud/"/>
    
      <category term="T Academy" scheme="https://wgtech.github.io/tags/T-Academy/"/>
    
      <category term="Notes" scheme="https://wgtech.github.io/tags/Notes/"/>
    
      <category term="DevOps" scheme="https://wgtech.github.io/tags/DevOps/"/>
    
      <category term="Docker" scheme="https://wgtech.github.io/tags/Docker/"/>
    
      <category term="Kubernetes" scheme="https://wgtech.github.io/tags/Kubernetes/"/>
    
      <category term="Container" scheme="https://wgtech.github.io/tags/Container/"/>
    
      <category term="Container Orchestration" scheme="https://wgtech.github.io/tags/Container-Orchestration/"/>
    
      <category term="Server" scheme="https://wgtech.github.io/tags/Server/"/>
    
      <category term="Desired State" scheme="https://wgtech.github.io/tags/Desired-State/"/>
    
      <category term="ReplicaSet" scheme="https://wgtech.github.io/tags/ReplicaSet/"/>
    
      <category term="Pods" scheme="https://wgtech.github.io/tags/Pods/"/>
    
      <category term="Volume" scheme="https://wgtech.github.io/tags/Volume/"/>
    
      <category term="Services" scheme="https://wgtech.github.io/tags/Services/"/>
    
  </entry>
  
  <entry>
    <title>T아카데미 토크ON세미나 54차 &#39;쿠버네티스 살펴보기&#39; : 3강 실습하기 Docker &amp; Docker Compose</title>
    <link href="https://wgtech.github.io/posts/2019/07/01/TAcademy-54-Kubernetes-3-Docker-Compose-Pratice/"/>
    <id>https://wgtech.github.io/posts/2019/07/01/TAcademy-54-Kubernetes-3-Docker-Compose-Pratice/</id>
    <published>2019-07-01T05:45:00.000Z</published>
    <updated>2019-10-28T13:52:48.695Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>이 포스트는 2019년 6월 29일 토요일, SK플래닛 T아카데미에서 진행됐던 세미나에 가서 청강하고 작성했습니다.<br>현재 세미나 강의와 자료는 추후 <a href="https://tacademy.skplanet.com/live/player/onlineLectureDetail.action?seq=162" rel="external nofollow noopener noreferrer" target="_blank">이 곳</a>에서 확인하실 수 있습니다.<br>노트 필기식으로 작성한 내용이기에, 존댓말을 사용하지 않은 점 참고하시기 바랍니다.<br><strong>AWS Lightsail 서비스로 실습 진행되었습니다.</strong></p></blockquote><p>* 발표자 : 김충섭 (퍼플웍스) 님</p><br><h1 id="개발-환경-설정"><a href="#개발-환경-설정" class="headerlink" title="개발 환경 설정"></a>개발 환경 설정</h1><p><a href="https://github.com/subicura/workshop-init/blob/master/1_jq.md" rel="external nofollow noopener noreferrer" target="_blank">jq</a> - <a href="https://github.com/subicura/workshop-init/blob/master/2_docker.md" rel="external nofollow noopener noreferrer" target="_blank">docker</a> - <a href="https://github.com/subicura/workshop-init/blob/master/3_0_k3s.md" rel="external nofollow noopener noreferrer" target="_blank">k3s</a> - <a href="https://github.com/subicura/workshop-init/blob/master/3_1_local_path_provisioner.md" rel="external nofollow noopener noreferrer" target="_blank">Local path provisioner</a> - <a href="https://github.com/subicura/workshop-init/blob/master/99_code_server.md" rel="external nofollow noopener noreferrer" target="_blank">code server</a> 설치</p><br><h1 id="Docker-실습-시작"><a href="#Docker-실습-시작" class="headerlink" title="Docker 실습 시작"></a>Docker 실습 시작</h1><blockquote><p><strong>‘19차 T아카데미 세미나 : 컨테이너 기반 가상화 플랫폼 도커(Docker)의 이해’ 블로그 포스트 참고</strong></p><ul><li><a href="/posts/2019/06/28/TAcademy-19-Docker-Introduce/">1강 도커 개요 및 소개</a></li><li><a href="/posts/2019/06/28/TAcademy-19-Docker-How-To-Make-Container/">2강 도커 컨테이너 만들기</a></li><li><a href="/posts/2019/06/28/TAcademy-19-Docker-Develop-and-Distribute-the-Image/">3강 이미지 만들고 배포하기</a></li><li><a href="/posts/2019/06/28/TAcademy-19-Docker-Image-Developing-Environment/">4강 도커 이미지 빌드 환경 만들기</a></li></ul></blockquote><p><a href="https://github.com/subicura/workshop-k8s-basic" rel="external nofollow noopener noreferrer" target="_blank">페이지</a>를 참조하며 실습을 합니다.</p><h2 id="컨테이너-실행"><a href="#컨테이너-실행" class="headerlink" title="컨테이너 실행"></a>컨테이너 실행</h2><p><img src="/images/2019/07/01/TAcademy-54-Kubernetes-3-Docker-Compose-Practice/docker-run-container.png" alt="실행중인 컨테이너 화면"></p><h2 id="컨테이너-목록"><a href="#컨테이너-목록" class="headerlink" title="컨테이너 목록"></a>컨테이너 목록</h2><ul><li>컨테이너 목록 확인 명령어</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p><img src="/images/2019/07/01/TAcademy-54-Kubernetes-3-Docker-Compose-Practice/docker-ps-a.png" alt="컨테이너 목록 확인"></p><h2 id="컨테이너-로그"><a href="#컨테이너-로그" class="headerlink" title="컨테이너 로그"></a>컨테이너 로그</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs xxx</span><br></pre></td></tr></table></figure><h2 id="컨테이너-종료"><a href="#컨테이너-종료" class="headerlink" title="컨테이너 종료"></a>컨테이너 종료</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop xxx</span><br></pre></td></tr></table></figure><h2 id="컨테이너-삭제"><a href="#컨테이너-삭제" class="headerlink" title="컨테이너 삭제"></a>컨테이너 삭제</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm xxx</span><br></pre></td></tr></table></figure><h2 id="이미지-목록"><a href="#이미지-목록" class="headerlink" title="이미지 목록"></a>이미지 목록</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h2 id="네트워크-생성"><a href="#네트워크-생성" class="headerlink" title="네트워크 생성"></a>네트워크 생성</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create app-network</span><br></pre></td></tr></table></figure><h2 id="네트워크에-연결된-컨테이너-생성"><a href="#네트워크에-연결된-컨테이너-생성" class="headerlink" title="네트워크에 연결된 컨테이너 생성"></a>네트워크에 연결된 컨테이너 생성</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> mysql 컨테이너 실행</span><br><span class="line">docker run -d \</span><br><span class="line">  -e MYSQL_ALLOW_EMPTY_PASSWORD=true \</span><br><span class="line">  --name mysql \</span><br><span class="line">  --network=app-network \</span><br><span class="line">  mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> mysql 컨테이너에 접속하여 mysql 실행</span><br><span class="line">docker exec -it mysql mysql</span><br></pre></td></tr></table></figure><ul><li>이후 동작해야하는 항목 (WordPress 연동 DB 구축)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> wp <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> wp.* <span class="keyword">to</span> wp@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'wp'</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br><span class="line">quit</span><br></pre></td></tr></table></figure><ul><li>mysql 컨테이너 종료 이후</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8000:80 \</span><br><span class="line">  --network=app-network \</span><br><span class="line">  -e WORDPRESS_DB_HOST=mysql \</span><br><span class="line">  -e WORDPRESS_DB_NAME=wp \</span><br><span class="line">  -e WORDPRESS_DB_USER=wp \</span><br><span class="line">  -e WORDPRESS_DB_PASSWORD=wp \</span><br><span class="line">  wordpress</span><br></pre></td></tr></table></figure><h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><blockquote><p><a href="https://github.com/subicura/workshop-k8s-basic/blob/master/guide/guide-01.md#exam-1-방명록-만들기" rel="external nofollow noopener noreferrer" target="_blank">문제</a>에 대한 제가 작성한 답입니다. 답이 아닐 수 있으니 참고해주세요.</p></blockquote><h3 id="풀이"><a href="#풀이" class="headerlink" title="풀이"></a>풀이</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 27017:27017 \</span><br><span class="line">  --network=app-network \</span><br><span class="line">  --name mongodb mongo:4</span><br><span class="line"></span><br><span class="line">docker run -d -p 8887:8887 \</span><br><span class="line">  -e PORT=8887 \</span><br><span class="line">  -e GUESTBOOK_DB_ADDR=mongodb:27017 \</span><br><span class="line">  --network=app-network \</span><br><span class="line">  --name apiserver \</span><br><span class="line">  subicura/guestbook-backend:latest</span><br><span class="line"></span><br><span class="line">docker run -d -p 8888:8888 \</span><br><span class="line">  -e PORT=8888 \</span><br><span class="line">  -e GUESTBOOK_API_ADDR=apiserver:8887 \</span><br><span class="line">  --network=app-network \</span><br><span class="line">  --name guestbook \</span><br><span class="line">  subicura/guestbook-frontend:latest</span><br></pre></td></tr></table></figure><ul><li>이름은 소문자로 지정해주세요 (대문자로 지정하면, 네트워크 결합이 안됩니다)</li></ul><h3 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker stop xxx</span><br><span class="line">docker rm xxx</span><br><span class="line">docker system prune -a</span><br></pre></td></tr></table></figure><blockquote><p>참고 : <strong>prune 시도 화면</strong></p><ol><li>이전<br><img src="/images/2019/07/01/TAcademy-54-Kubernetes-3-Docker-Compose-Practice/before-docker-prune.png" alt="docker prune 이전"></li><li>이후<br><img src="/images/2019/07/01/TAcademy-54-Kubernetes-3-Docker-Compose-Practice/after-docker-prune.png" alt="docker prune 이후"></li></ol></blockquote><br><h1 id="Docker-compose-실습"><a href="#Docker-compose-실습" class="headerlink" title="Docker-compose 실습"></a>Docker-compose 실습</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  mongodb:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">mongo:4</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"27017:27017"</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  backend:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">subicura/guestbook-backend:latest</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"8887:8887"</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      PORT:</span> <span class="string">"8887"</span></span><br><span class="line"><span class="attr">      GUESTBOOK_DB_ADDR:</span> <span class="string">"mongodb:27017"</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  frontend:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">subicura/guestbook-frontend:latest</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"8888:8888"</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      PORT:</span> <span class="string">"8888"</span></span><br><span class="line"><span class="attr">      GUESTBOOK_API_ADDR:</span> <span class="string">"backend:8887"</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><h2 id="restart-always"><a href="#restart-always" class="headerlink" title="restart:always"></a>restart:always</h2><ul><li>이 옵션을 줘야 순서에 상관없이 실행이 되더라도 오류없이 모두 실행이 된다. docker-compose up 을 하면 기재된 순서에 상관없이 1-3-2 2-3-1 3-2-1 1-2-3 등의 랜덤 순서로 실행되기 때문에 반드시 restart:always 옵션을 기재해야한다.</li></ul><h2 id="depends-on"><a href="#depends-on" class="headerlink" title="depends_on"></a>depends_on</h2><ul><li>이 옵션은 docker-compose 구형 버전 작성시 의존성을 명시해 순서대로 실행시킬 수 있다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;이 포스트는 2019년 6월 29일 토요일, SK플래닛 T아카데미에서 진행됐던 세미나에 가서 청강하고 작성했습니다.&lt;br&gt;현재 세미나 강의와 자료는 추후 &lt;a href=&quot;https://tacademy.skplanet.com
      
    
    </summary>
    
      <category term="Seminar" scheme="https://wgtech.github.io/categories/Seminar/"/>
    
      <category term="T Academy" scheme="https://wgtech.github.io/categories/Seminar/T-Academy/"/>
    
      <category term="DevOps" scheme="https://wgtech.github.io/categories/Seminar/T-Academy/DevOps/"/>
    
      <category term="Kubernetes" scheme="https://wgtech.github.io/categories/Seminar/T-Academy/DevOps/Kubernetes/"/>
    
    
      <category term="Seminar" scheme="https://wgtech.github.io/tags/Seminar/"/>
    
      <category term="Cloud" scheme="https://wgtech.github.io/tags/Cloud/"/>
    
      <category term="T Academy" scheme="https://wgtech.github.io/tags/T-Academy/"/>
    
      <category term="Notes" scheme="https://wgtech.github.io/tags/Notes/"/>
    
      <category term="DevOps" scheme="https://wgtech.github.io/tags/DevOps/"/>
    
      <category term="Docker" scheme="https://wgtech.github.io/tags/Docker/"/>
    
      <category term="Kubernetes" scheme="https://wgtech.github.io/tags/Kubernetes/"/>
    
      <category term="Container" scheme="https://wgtech.github.io/tags/Container/"/>
    
      <category term="Container Orchestration" scheme="https://wgtech.github.io/tags/Container-Orchestration/"/>
    
      <category term="Server" scheme="https://wgtech.github.io/tags/Server/"/>
    
      <category term="docker-compose" scheme="https://wgtech.github.io/tags/docker-compose/"/>
    
  </entry>
  
  <entry>
    <title>T아카데미 토크ON세미나 54차 &#39;쿠버네티스 살펴보기&#39; : 2강 쿠버네티스 살펴보기</title>
    <link href="https://wgtech.github.io/posts/2019/07/01/TAcademy-54-Kubernetes-2-What-is-Kubernetes/"/>
    <id>https://wgtech.github.io/posts/2019/07/01/TAcademy-54-Kubernetes-2-What-is-Kubernetes/</id>
    <published>2019-07-01T05:30:00.000Z</published>
    <updated>2019-10-28T13:52:48.694Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>이 포스트는 2019년 6월 29일 토요일, SK플래닛 T아카데미에서 진행됐던 세미나에 가서 청강하고 작성했습니다.<br>현재 세미나 강의와 자료는 추후 <a href="https://tacademy.skplanet.com/live/player/onlineLectureDetail.action?seq=162" rel="external nofollow noopener noreferrer" target="_blank">이 곳</a>에서 확인하실 수 있습니다.<br>노트 필기식으로 작성한 내용이기에, 존댓말을 사용하지 않은 점 참고하시기 바랍니다.</p></blockquote><p>* 발표자 : 김충섭 (퍼플웍스) 님</p><br><h1 id="What-is-Kubernetes"><a href="#What-is-Kubernetes" class="headerlink" title="What is Kubernetes?"></a>What is Kubernetes?</h1><h2 id="쿠버네티스-인기"><a href="#쿠버네티스-인기" class="headerlink" title="쿠버네티스 인기"></a>쿠버네티스 인기</h2><ul><li>Docker는 <strong>배포에 대해 큰 특징점이 없다</strong>.</li><li>서버 2, 3대 정돈? 일일히 코드 입력 가능하지만, 이게 200대 300대 서버라면.. 일일히 서버 구성 코드를 입력하기 어렵다.</li><li>이를 위해, Nomad, Docker Swarm 등.. 이에 대한 컨테이너 관리 도구 춘추전국시대가 도래되었다.</li><li><strong>오늘날은 Google이 만든 borg를 기반으로 만든 Kubernetes가 표준화!</strong></li><li>이에 따라 패키지 매니저도 등장!<blockquote><p>helm = Kubernetes Package Manager</p></blockquote></li></ul><h3 id="Cloud-Support"><a href="#Cloud-Support" class="headerlink" title="Cloud Support"></a>Cloud Support</h3><ul><li>AWS EKS, GKE, Azure Container Service 등</li></ul><h3 id="Container-Platform"><a href="#Container-Platform" class="headerlink" title="Container Platform"></a>Container Platform</h3><ul><li>Knative Serverless, Istio Service Mesh, kubeflow Machine Learning 등</li></ul><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><ul><li>컨테이너 응용 프로그램의 배포, 확장 및 관리를 자동하는 오픈 소스 시스템</li><li>그리스어로 조타수, 조종사라는 뜻</li><li>K8s 라고 줄여서 부른다. (ubernete = 8)</li><li>Google이 만들었지만 CNCF 재단에 기부되어 오픈소스화</li></ul><br><h1 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h1><h2 id="기본-기능"><a href="#기본-기능" class="headerlink" title="기본 기능"></a>기본 기능</h2><ol><li><strong>상태관리</strong> : 상태에 맞춰 자동으로 복구</li><li><strong>스케줄링</strong> : 조건에 맞는 노드에 컨테이너 배치</li><li><strong>클러스터링</strong> : 가상 네트워크를 통해 하나의 서버에 있는 것처럼 통신</li><li><strong>서비스 디스커버리</strong> : 서로 다른 서비스 쉽게 통신</li><li><strong>리소스 모니터링</strong></li><li><strong>스케일링</strong></li><li><strong>Roll-Out, Rollback</strong></li></ol><h2 id="빠른-업데이트"><a href="#빠른-업데이트" class="headerlink" title="빠른 업데이트"></a>빠른 업데이트</h2><ul><li>1.10 이후(2018/3/27) 많은 부분이 안정화됨</li><li>굉장히 빠르고 업데이트, 윈도우용 업데이트 위주로 작동됨 (현재 19.6.29 기준)</li></ul><h2 id="다양한-배포-방식"><a href="#다양한-배포-방식" class="headerlink" title="다양한 배포 방식"></a>다양한 배포 방식</h2><ul><li><strong>Replica Set</strong></li><li>Stateful Sets : 클러스터링을 세밀하게 조절하고 싶을 때 사용, 순차적으로 진행하기에 안정적.</li><li>Job : CronJob 과의 연계</li><li>Replication Controller : (현재 Deprecated)</li></ul><h2 id="Ingress-설정"><a href="#Ingress-설정" class="headerlink" title="Ingress 설정"></a>Ingress 설정</h2><ul><li>nginx 설정과 유사</li></ul><h2 id="Namespace-amp-Labeling"><a href="#Namespace-amp-Labeling" class="headerlink" title="Namespace &amp; Labeling"></a>Namespace &amp; Labeling</h2><ul><li>Namespace : 동일한 물리적 클러스터 기반의 <strong>복수의 가상 클러스터</strong></li><li>Labeling : 각기 다른 컨테이너를 <strong>Label</strong>로 구별하는 것</li></ul><h2 id="RBAC-role-based-access-control"><a href="#RBAC-role-based-access-control" class="headerlink" title="RBAC (role-based access control)"></a>RBAC (role-based access control)</h2><ul><li>누가 어떤 기능을 가지고 있는지 쉽게 제어가 가능하다</li></ul><ol><li>누가 : Subjects</li><li>어떻게 : Pod 권한을 조정</li><li>무엇을 : Operations(행동) 조정</li></ol><br><h1 id="기본개념"><a href="#기본개념" class="headerlink" title="기본개념"></a>기본개념</h1><blockquote><p><strong><em>Desired State</em></strong></p></blockquote><ul><li>개발자나 관리자가 <strong>궁극적으로 원하는 서버의 상태</strong></li><li>현재 상태(Current State)를 서버 관리자가 원하는 상태(Desired State)로 변경해야한다.</li><li>서버 관리자가 원하는 서버의 갯수를 지정하면, Kubernetes가 이에 판단하여 자동으로 작동함.</li></ul><blockquote><p>Kubernetes Object (<a href="https://youtu.be/4ht22ReBjno" rel="external nofollow noopener noreferrer" target="_blank">The Illustrated Children’s Guide to Kubernetes</a> 참고)</p><ul><li>Nametags : Label과 같은 의미</li><li>Pods : 컨테이너들의 집합</li><li>ReplicaSet : 여러 동일한 Pods을 여러 개로 확장</li><li>k8s service</li><li>Volumes</li><li>Namespace</li></ul></blockquote><h2 id="YAML-파일로-정의"><a href="#YAML-파일로-정의" class="headerlink" title="YAML 파일로 정의"></a>YAML 파일로 정의</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">containers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line"><span class="attr">image:</span> <span class="attr">busybox:1.25</span></span><br><span class="line"></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><h2 id="결론-1"><a href="#결론-1" class="headerlink" title="결론"></a>결론</h2><ul><li>원하는 상태(<strong>Desired State</strong>)를 다양한 오브젝트(<strong>Object</strong>) 에 라벨(<strong>Label</strong>)을 붙여 정의(<strong>YAML</strong>)하고, API 서버에 <strong>전달</strong>한다.</li></ul><br><h1 id="아키텍쳐"><a href="#아키텍쳐" class="headerlink" title="아키텍쳐"></a>아키텍쳐</h1><p><img src="/images/2019/07/01/TAcademy-54-Kubernetes-2-What-is-Kubernetes/server-agent.png" alt="Server-Agent 아키텍쳐"></p><h2 id="전체적인-흐름"><a href="#전체적인-흐름" class="headerlink" title="전체적인 흐름"></a>전체적인 흐름</h2><ol><li>kubectl - master - Many Nodes</li><li>(In master) Api Server - One Node</li><li>(In Node) kubelet - pod - master</li></ol><h2 id="kubectl"><a href="#kubectl" class="headerlink" title="kubectl"></a>kubectl</h2><ul><li>명령어로 작동</li></ul><br><h2 id="Master-Node"><a href="#Master-Node" class="headerlink" title="Master - Node"></a>Master - Node</h2><p><img src="/images/2019/07/01/TAcademy-54-Kubernetes-2-What-is-Kubernetes/master-node.png" alt="Master - Node"></p><h3 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h3><p><img src="/images/2019/07/01/TAcademy-54-Kubernetes-2-What-is-Kubernetes/kubernetes-master.png" alt="Master"></p><ul><li>다양한 모듈이 확장성 고려</li><li>보통 3대를 구성하여 안정성 높임</li><li>Scheudler, Kube-Controller, Cloud-Controller가 각각 존재</li><li>API Server</li><li>Controller Manager : 다양한 컨트롤러를 관리하고 API Server와 통신하여 작업 수행</li><li>Scheduler : 서비스를 리소스 상황에 맞게 적절 노드에 배치</li><li>etcd : 가볍고 빠른 분산형 key-value 저장소 / 설정 및 상태를 저장</li></ul><br><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p><img src="/images/2019/07/01/TAcademy-54-2-Kubernetes-What-is-Kubernetes/kubernetes-node.png" alt="Node"></p><ul><li>마스터 서버와 통신하면서 필요한 Pod을 생성하고 네트워크와 볼륨을 설정</li><li>kubelet</li><li>Proxy</li><li>Docker(containerd 또는 rkt 또는 Hyper)</li></ul><br><h1 id="결론-2"><a href="#결론-2" class="headerlink" title="결론"></a>결론</h1><p><img src="/images/2019/07/01/TAcademy-54-Kubernetes-2-What-is-Kubernetes/create-replicaset.png" alt="Replicaset 만들기까지의 과정"></p><br><h1 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h1><ul><li>복잡한 개념 : 확장성까지 고려하게 된다면 굉장히 많은 개념 습득을 필요하다.</li><li>복잡한 설치 : 설치 방식만해도 20가지가 넘을 정도로 복잡한데, 이를 통일하여 설치하는 방법을 따로 익혀야한다.</li><li>무거운 환경 : 리소스 사용이 많다.</li><li>복잡한 설정 파일 : Docker Swarm과는 달리 Config 코드가 2배, 3배 넘게 길다</li></ul><hr><h1 id="질문"><a href="#질문" class="headerlink" title="질문"></a>질문</h1><blockquote><p><strong>IP 주소를 일일히 입력하여 서비스과 서비스 사이 통신을 진행해야하나요?</strong></p></blockquote><ul><li>IP 주소를 직접 입력하지 않고, 서비스의 이름으로 직접 접근하는 것이 일반화.</li></ul><blockquote><p><strong>실습시 minikube 쓰지 않는 이유는?</strong></p></blockquote><ul><li>실습할때 서로 다른 환경때문에 생기는 이슈가 많다.<br>보안 네트워크 프로그램이라도 설치되어 있을시 해결 자체가 매우 어렵다.</li></ul><hr><h1 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h1><p>김충섭님 블로그 (<a href="https://subicura.com/2019/05/19/kubernetes-basic-1.html" rel="external nofollow noopener noreferrer" target="_blank">subicura blog</a>)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;이 포스트는 2019년 6월 29일 토요일, SK플래닛 T아카데미에서 진행됐던 세미나에 가서 청강하고 작성했습니다.&lt;br&gt;현재 세미나 강의와 자료는 추후 &lt;a href=&quot;https://tacademy.skplanet.com
      
    
    </summary>
    
      <category term="Seminar" scheme="https://wgtech.github.io/categories/Seminar/"/>
    
      <category term="T Academy" scheme="https://wgtech.github.io/categories/Seminar/T-Academy/"/>
    
      <category term="DevOps" scheme="https://wgtech.github.io/categories/Seminar/T-Academy/DevOps/"/>
    
      <category term="Kubernetes" scheme="https://wgtech.github.io/categories/Seminar/T-Academy/DevOps/Kubernetes/"/>
    
    
      <category term="Seminar" scheme="https://wgtech.github.io/tags/Seminar/"/>
    
      <category term="Cloud" scheme="https://wgtech.github.io/tags/Cloud/"/>
    
      <category term="T Academy" scheme="https://wgtech.github.io/tags/T-Academy/"/>
    
      <category term="Notes" scheme="https://wgtech.github.io/tags/Notes/"/>
    
      <category term="DevOps" scheme="https://wgtech.github.io/tags/DevOps/"/>
    
      <category term="Docker" scheme="https://wgtech.github.io/tags/Docker/"/>
    
      <category term="Kubernetes" scheme="https://wgtech.github.io/tags/Kubernetes/"/>
    
      <category term="Container" scheme="https://wgtech.github.io/tags/Container/"/>
    
      <category term="Container Orchestration" scheme="https://wgtech.github.io/tags/Container-Orchestration/"/>
    
      <category term="Server" scheme="https://wgtech.github.io/tags/Server/"/>
    
      <category term="Desired State" scheme="https://wgtech.github.io/tags/Desired-State/"/>
    
      <category term="ReplicaSet" scheme="https://wgtech.github.io/tags/ReplicaSet/"/>
    
      <category term="Pods" scheme="https://wgtech.github.io/tags/Pods/"/>
    
      <category term="Volume" scheme="https://wgtech.github.io/tags/Volume/"/>
    
      <category term="Services" scheme="https://wgtech.github.io/tags/Services/"/>
    
  </entry>
  
  <entry>
    <title>T아카데미 토크ON세미나 54차 &#39;쿠버네티스 살펴보기&#39; : 1강 컨테이너</title>
    <link href="https://wgtech.github.io/posts/2019/07/01/TAcademy-54-Kubernetes-1-Container/"/>
    <id>https://wgtech.github.io/posts/2019/07/01/TAcademy-54-Kubernetes-1-Container/</id>
    <published>2019-07-01T05:00:00.000Z</published>
    <updated>2019-10-28T13:52:48.694Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2019/07/01/TAcademy-54-Kubernetes-1-Container/0.png" alt="인증샷"></p><blockquote><p>이 포스트는 2019년 6월 29일 토요일, SK플래닛 T아카데미에서 진행됐던 세미나에 가서 청강하고 작성했습니다.<br>현재 세미나 강의와 자료는 추후 <a href="https://tacademy.skplanet.com/live/player/onlineLectureDetail.action?seq=162" rel="external nofollow noopener noreferrer" target="_blank">이 곳</a>에서 확인하실 수 있습니다.<br>노트 필기식으로 작성한 내용이기에, 존댓말을 사용하지 않은 점 참고하시기 바랍니다.</p></blockquote><p>* 발표자 : 김충섭 (퍼플웍스) 님</p><br><h1 id="도커가-등장하기-전-서버-운영"><a href="#도커가-등장하기-전-서버-운영" class="headerlink" title="도커가 등장하기 전 서버 운영"></a>도커가 등장하기 전 서버 운영</h1><blockquote><p><strong>자체 운영 → 설정 관리 도구 → 가상 머신 → 클라우드 → PaaS → 도커 → 쿠버네티스 → 서비스메시</strong></p></blockquote><ul><li>서버의 상태를 관리하기 위한 노력이 이렇게 많다.</li></ul><br><h2 id="자체-서버-운영"><a href="#자체-서버-운영" class="headerlink" title="자체 서버 운영"></a>자체 서버 운영</h2><ul><li>서버를 설정하기 위한 많은 노력과 시간이 필요하다.</li><li>성능이 좋은 걸 미리 구매하고 효율적인 사용을 위해 여러 애플리케이션을 설치하게 되었다.</li></ul><h3 id="과거-어려운-서버-상태-관리"><a href="#과거-어려운-서버-상태-관리" class="headerlink" title="과거, 어려운 서버 상태 관리"></a>과거, 어려운 서버 상태 관리</h3><p>소프트웨어 버전 업그레이드를 수행했다?<br>그 이후 <strong>어떻게 동작될지, 어떤 결과를 초래할지에 대해 정확히 알고 있어야한다.</strong><br>(와르르 무너지거나, 운이 상당히 좋으면 아무렇지 않게 동작이 잘 되거나!)</p><p>서버가 잘 돈 것처럼 보이지만, 카드로 탑 쌓듯이 언제 어떻게 무너질 지 모르는 상태로 진행되는 것이다.</p><p>서버 이슈가 어떤 것이든, 어떠한 문제이든, 무조건 서버 관리자가 있어야하며,<br>서버 관리자의 피로는 물론이거니와 심각한 상태이기에 메이저 버전을 업그레이드 해야함에도 불구하고,<br>그에 따른 후속 조치와 결과에 벌벌 떨어야 하기 때문에 혁신 자체가 어려운 상태가 됐다.</p><p>이로 인해…</p><br><h2 id="설정-관리-도구의-등장"><a href="#설정-관리-도구의-등장" class="headerlink" title="설정 관리 도구의 등장"></a>설정 관리 도구의 등장</h2><ul><li>명령어를 통해 서버 관리를 지양하지 않음</li></ul><h3 id="선언적-서버-상태-정의"><a href="#선언적-서버-상태-정의" class="headerlink" title="선언적 서버 상태 정의"></a>선언적 서버 상태 정의</h3><ul><li>불완전하지만, 서버의 상태가 재현 가능하다.</li><li>소스 관리나 코드 리뷰를 통해 서버 운영의 협업이 가능하다.</li></ul><blockquote><p><strong><a href="https://youtu.be/ZAdJ7CdN7DY?t=48" rel="external nofollow noopener noreferrer" target="_blank">Ansible Demo 영상 참고</a></strong></p><ul><li>영상에서 확인 할 수 있듯이 이처럼 다양한 환경 변수가 존재.</li><li>좀 쉬워졌지만 결국엔 <strong>원하는 도구에 대한 개념과 설정 값들을 정확하게 이해</strong>해야한다.</li></ul></blockquote><br><h2 id="가상머신-등장"><a href="#가상머신-등장" class="headerlink" title="가상머신 등장"></a>가상머신 등장</h2><ul><li>한 서버에 여러 가상 서버 설치 가능</li><li>다양한 Java, 데이터 베이스 쉽게 사용</li><li>서버 상태 자체를 이미지로 저장 가능</li><li>새 서버를 만들고, 기존 서버 내용 복사 가능</li></ul><h3 id="Mutable-변할-수-있는-vs-Immutable-변하지-않는"><a href="#Mutable-변할-수-있는-vs-Immutable-변하지-않는" class="headerlink" title="Mutable(변할 수 있는) vs. Immutable (변하지 않는)"></a>Mutable(변할 수 있는) vs. Immutable (변하지 않는)</h3><blockquote><p><strong>mutable</strong><br>새 애플리케이션을 업데이트</p></blockquote><blockquote><p><strong>immutable</strong><br>새 버전이 설치된 서버 상태를 이미지로 만들고 교체. 대부분 완벽한 상태로의 전환이 가능하다.</p></blockquote><ul><li>시스템의 mutable한 부분을 immutable하게 바꾸기 위해선, 복제 등에 대해 상당한 시간과 노력이 필요하다. 그리고, 이에 따라 시스템 자원에 대해 상당히 의존적이다.</li></ul><br><h2 id="클라우드-등장"><a href="#클라우드-등장" class="headerlink" title="클라우드 등장"></a>클라우드 등장</h2><ul><li>AWS, GCP, Azure 등</li><li>하드웨어 파편화 문제 해결, 가상 환경으로 아키텍처 구성 가능</li><li>이미지 기반의 다수 서버 관리 가능</li></ul><h3 id="그러나"><a href="#그러나" class="headerlink" title="그러나"></a>그러나</h3><p><strong><em>모든 개발자가 하나의 애플리케이션 시스템을</em></strong></p><ul><li>어떻게 만들었는지 정확히 모른다</li><li>처음부터 다시 만들기 어렵다</li><li>편의성 측면에서 관리가 어렵다</li></ul><br><h2 id="PaaS-등장"><a href="#PaaS-등장" class="headerlink" title="PaaS 등장"></a>PaaS 등장</h2><ul><li>Heroku, Netlify, AWS Elastic Beanstalk, GCP App Engine 등</li><li>서버 운영하는 것은 복잡하고 어려우므로, 개발자 소스 코드만으로 배포 가능함.</li><li>일반화된 프로비저닝 방법 제공 (정확한 방식을 잘 따르면 쉽게 배포가 가능)</li></ul><blockquote><p><strong><a href="https://youtu.be/mN9oI98As_4" rel="external nofollow noopener noreferrer" target="_blank">Netlify Tutorial 비디오</a></strong></p><ul><li>Github 프로젝트를 참고하여 Basic build settings 작성하고, 웹 상으로 시스템을 배포하기</li><li>기존 클라우드보다 손쉽고 빠른 서비스 런칭이 가능하다.</li></ul></blockquote><h3 id="그러나…"><a href="#그러나…" class="headerlink" title="그러나…"></a>그러나…</h3><ul><li>PaaS 방식에 맞게 애플리케이션 작성 (버전 의존성이 상당히 높음)</li><li>서버 원격 접속 시스템을 제공하지 않음</li><li>파일 시스템을 직접 사용할 수 없음</li><li>패키지 설치 관리자에 대해 제한적</li><li>로그 수집 자체를 제한적인 방식을 이용해야 한다</li><li>배포에 대한 새로운 패러다임 자체를 이해해야 한다.</li><li>크론잡, 데이터 분석, 로그 분석, 앱 성능 모니터링, A/B 배포, Canary 배포, 네트워크 및 스토리지 설정에 제한적</li></ul><p>즉, <strong>조금 더 심층적으로 다룰 수 있는 환경을 제공하지 않아 다양한 이슈들을 세밀하게 대응하기가 상당히 제한적</strong>이다.</p><br><h2 id="Docker-등장"><a href="#Docker-등장" class="headerlink" title="Docker 등장"></a>Docker 등장</h2><blockquote><p><strong>‘19차 T아카데미 세미나 : 컨테이너 기반 가상화 플랫폼 도커(Docker)의 이해’ 블로그 포스트 참고</strong></p><ul><li><a href="/posts/2019/06/28/TAcademy-19-Docker-Introduce/">1강 도커 개요 및 소개</a></li><li><a href="/posts/2019/06/28/TAcademy-19-Docker-How-To-Make-Container/">2강 도커 컨테이너 만들기</a></li><li><a href="/posts/2019/06/28/TAcademy-19-Docker-Develop-and-Distribute-the-Image/">3강 이미지 만들고 배포하기</a></li><li><a href="/posts/2019/06/28/TAcademy-19-Docker-Image-Developing-Environment/">4강 도커 이미지 빌드 환경 만들기</a></li></ul></blockquote><ul><li>리눅스 커널의 여러 기술 활용</li><li>Host OS 위에 Docker Engine이 직접, 각각의 앱들을 격리시킴</li><li>특정 회사나 서비스에 종속되지 않음</li><li>개발 서버를 쉽게 만들 수 있으며 테스트 서버 생성도 간편함</li><li>서비스들의 배포 방식이 제각각 다른데, 이를 표준화된 명령어를 제공함으로 해결</li><li>Dockerfile 이용하여 이미지 만들고 재현 가능</li><li>이미지 저장소로 저장하고 운영서버에서 이미지를 불러오기 간편함</li><li>환경변수 제어 가능, 외부 스토리지와 링킹 가능</li><li>가상머신 처럼 사용하지만 성능저하가 거의 없음</li><li>이미지 빌드 기록이 남음</li><li>코드와 설정으로 관리 가능</li><li>오픈소스</li></ul><br><h2 id="Blue-Green-배포"><a href="#Blue-Green-배포" class="headerlink" title="Blue - Green 배포"></a>Blue - Green 배포</h2><ul><li>앱 업데이트를 위해 서비스를 종료했어야했지만, 현재는 이를 컨테이너를 교체하는 방식으로 사용 가능</li></ul><h2 id="Service-Discovery"><a href="#Service-Discovery" class="headerlink" title="Service Discovery"></a>Service Discovery</h2><ul><li>복잡한 기술을 사용자가 일일히 했지만, 이는 개선했음.</li><li>Key/Value Store에 해당 서버 주소가 기록이 되어 있기 때문에, 서버 주소를 추가하고 기입하면 자동으로 반영된다.</li></ul><h2 id="docker-gen"><a href="#docker-gen" class="headerlink" title="docker-gen"></a>docker-gen</h2><ul><li>Docker Container가 생성되면 이에 대한 이벤트가 발생되고, 원하는 작업을 자동으로 수행해주는 도구</li></ul><br><h1 id="컨테이너-오케스트레이션"><a href="#컨테이너-오케스트레이션" class="headerlink" title="컨테이너 오케스트레이션"></a>컨테이너 오케스트레이션</h1><ul><li>여러 대의 서버와 여러 개의 서비스를 편리하게 관리해주는 작업</li></ul><h2 id="스케줄링"><a href="#스케줄링" class="headerlink" title="스케줄링"></a>스케줄링</h2><ul><li>컨테이너를 적당한 서버에 배포해주는 작업</li><li>자동으로 스케일링 업/다운이 가능</li></ul><h2 id="클러스터링"><a href="#클러스터링" class="headerlink" title="클러스터링"></a>클러스터링</h2><ul><li>여러개 서버를 마치 하나의 서버처럼 작동</li><li>여러 클러스터를 묶어준다</li></ul><h2 id="그-이외"><a href="#그-이외" class="headerlink" title="그 이외"></a>그 이외</h2><ul><li>Service Discovery, Logging Monitoring 등이 있다.</li></ul><p><strong>현재 Kubernetes가 표준화 되어 있다.</strong></p><br><h2 id="서비스-매시-등장"><a href="#서비스-매시-등장" class="headerlink" title="서비스 매시 등장"></a>서비스 매시 등장</h2><ul><li>김충섭님 : <strong>“현재 가장 트렌드한 기술이라고 생각합니다.”</strong></li><li>서비스마다 Proxy가 대신 서비스를 재시작 등을 할 수 있음</li><li>Fault Injection, Distributed Tracing, Security, Authentication 등이 기존 방법에서 추가된 기능</li><li><strong>Library가 아니라 Proxy를 사용한다</strong><ul><li>서비스A &lt;-&gt; 서비스 B 요청은 각각 서비스에 존재되어 있는 Proxy를 통해 교신한다.</li></ul></li></ul><br><h1 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h1><p><strong>위 과정들은 모두 서버 상태를 관리하기 위한 노력!</strong></p><ul><li>쉽고 편리하게 서버 관리를 하기 위한 필요성에 등장</li><li>Immutable 하게 앱, 스토리지 또는 로그를 분리하여 관리</li><li>확장 가능한 설계</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/2019/07/01/TAcademy-54-Kubernetes-1-Container/0.png&quot; alt=&quot;인증샷&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;이 포스트는 2019년 6월 29일 토요일, SK플래닛 T아카데
      
    
    </summary>
    
      <category term="Seminar" scheme="https://wgtech.github.io/categories/Seminar/"/>
    
      <category term="T Academy" scheme="https://wgtech.github.io/categories/Seminar/T-Academy/"/>
    
      <category term="DevOps" scheme="https://wgtech.github.io/categories/Seminar/T-Academy/DevOps/"/>
    
      <category term="Kubernetes" scheme="https://wgtech.github.io/categories/Seminar/T-Academy/DevOps/Kubernetes/"/>
    
    
      <category term="Seminar" scheme="https://wgtech.github.io/tags/Seminar/"/>
    
      <category term="Cloud" scheme="https://wgtech.github.io/tags/Cloud/"/>
    
      <category term="T Academy" scheme="https://wgtech.github.io/tags/T-Academy/"/>
    
      <category term="Notes" scheme="https://wgtech.github.io/tags/Notes/"/>
    
      <category term="DevOps" scheme="https://wgtech.github.io/tags/DevOps/"/>
    
      <category term="Docker" scheme="https://wgtech.github.io/tags/Docker/"/>
    
      <category term="Kubernetes" scheme="https://wgtech.github.io/tags/Kubernetes/"/>
    
      <category term="Container" scheme="https://wgtech.github.io/tags/Container/"/>
    
      <category term="Container Orchestration" scheme="https://wgtech.github.io/tags/Container-Orchestration/"/>
    
      <category term="Server" scheme="https://wgtech.github.io/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>T아카데미 토크ON세미나 19차 &#39;컨테이너 기반 가상화 플랫폼 도커(Docker)의 이해&#39; : 4강 도커 이미지 빌드 환경 만들기</title>
    <link href="https://wgtech.github.io/posts/2019/06/28/TAcademy-19-Docker-4-Image-Developing-Environment/"/>
    <id>https://wgtech.github.io/posts/2019/06/28/TAcademy-19-Docker-4-Image-Developing-Environment/</id>
    <published>2019-06-28T11:15:00.000Z</published>
    <updated>2019-10-28T13:52:48.694Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>이 포스트는 2018년 1월 17일 수요일에 진행됐던 세미나 강의 영상을 시청하고 작성했습니다.<br>세미나 강의는 <a href="https://tacademy.skplanet.com/live/player/onlineLectureDetail.action?seq=125#sec2" rel="external nofollow noopener noreferrer" target="_blank"><strong>이 곳</strong></a>을 눌러 시청하실 수 있습니다.</p></blockquote><blockquote><p>노트 필기식으로 작성한 내용이기에, 존댓말을 사용하지 않은 점 참고하시기 바랍니다.</p></blockquote><p>* 발표자 : 김충섭 (퍼플웍스) 님</p><br><h1 id="지속적-통합-및-전달-CI-CD-란"><a href="#지속적-통합-및-전달-CI-CD-란" class="headerlink" title="지속적 통합 및 전달 (CI/CD)란?"></a>지속적 통합 및 전달 (CI/CD)란?</h1><h2 id="CI"><a href="#CI" class="headerlink" title="CI"></a>CI</h2><blockquote><p><strong>Continous Integration, 지속적 통합</strong></p></blockquote><p>빠르고 효과적으로 제품을 출시하기 위해 지속적으로 소스를 통합하고 빌드하고 테스트하고 배포하는 과정이 필요하다.</p><p>CI는 보통 테스트/빌드까지의 과정을 이야기하고…</p><h2 id="CD"><a href="#CD" class="headerlink" title="CD"></a>CD</h2><blockquote><p><strong>Continuous Delivery, 지속적 배포</strong></p></blockquote><p>CD는 여기에 추가로 전달/배포까지 지칭한다.</p><p>Microsoft Azure DevOps 시스템을 참고하자면</p><p><img src="/images/2019/06/28/TAcademy-19-Docker-4-Image-Developing-Environment/full-ci-cd-pipeline.png" alt="&quot;CI/CD 파이프라인&quot;"></p><p>위 사진에서, <a href="https://docs.microsoft.com/ko-kr/azure/container-service/dcos-swarm/container-service-docker-swarm-setup-ci-cd" rel="external nofollow noopener noreferrer" target="_blank">일반적인 CI/CD 사용 패턴</a>을 알 수 있는데 CI는 2, 3, 5에 해당되는 부분이고, 그리고 나머지 부분은 CD에 해당되는 부분이다.<br>따라서 CI와 CD는 연동적이고 연속적이라고 부분이고 전체적인 하나의 과정으로 진행한다고 보면 되겠다.</p><br><h1 id="Continuous-Integration-Tools"><a href="#Continuous-Integration-Tools" class="headerlink" title="Continuous Integration Tools"></a>Continuous Integration Tools</h1><p>개발자들과 기업체에서 주로 사용하는 툴과 언어들을 랭크로 확인할 수 있는, stackshare 에서 <a href="https://stackshare.io/continuous-integration" rel="external nofollow noopener noreferrer" target="_blank">‘What are the best Continuous Integration Tools?’</a> 이라는 기사를 작성했었는데,</p><p><img src="/images/2019/06/28/TAcademy-19-Docker-4-Image-Developing-Environment/best-of-ci-tools.png" alt></p><p>그 기사에 의하면 Jenkins, Travis CI, Circle CI 등이 주로 사용한다고 말한다.</p><p>이번 실습에서는 Jenkins 에 대해서 다루도록 하겠다.</p><h2 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h2><h3 id="소개"><a href="#소개" class="headerlink" title="소개"></a>소개</h3><ul><li>빌드, 테스트, 코드 분석, 배포, 알람 등 다양한 기능 제공</li><li>Master / Agent 구성 (하나의 Master에 수십, 수백개의 Agent 사용 가능)</li><li>1400여개가 넘는 플러그인, Pretty But Old UI</li><li>무료</li></ul><h3 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h3><blockquote><p><strong>노트에 기록하는 것보다 실습을 진행했고, 직관적이기 때문에 별도로 기록한 부분은 없었습니다.</strong><br><strong>따라서 위에 기재된 링크를 따라 들어가셔서 실습 자료를 내려받아 진행하시면 되겠습니다.</strong></p></blockquote><p><img src="/images/2019/06/28/TAcademy-19-Docker-4-Image-Developing-Environment/jenkins.png" alt="&quot;Jenkins 실습&quot;"></p><ul><li>pipeline : Stage 별로 작업 만들기</li><li>Do not allow concurrent builds 체크 : 한 빌드를 진행중이면, 연속적으로 빌드를 진행하지 않도록 한다.</li><li>GitHub project : GitHub Project 주소를 입력하면, GitHub에 업로드된 프로젝트를 활용하며 빌드한다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;이 포스트는 2018년 1월 17일 수요일에 진행됐던 세미나 강의 영상을 시청하고 작성했습니다.&lt;br&gt;세미나 강의는 &lt;a href=&quot;https://tacademy.skplanet.com/live/player/onlineLe
      
    
    </summary>
    
      <category term="Seminar" scheme="https://wgtech.github.io/categories/Seminar/"/>
    
      <category term="T Academy" scheme="https://wgtech.github.io/categories/Seminar/T-Academy/"/>
    
      <category term="DevOps" scheme="https://wgtech.github.io/categories/Seminar/T-Academy/DevOps/"/>
    
      <category term="Docker" scheme="https://wgtech.github.io/categories/Seminar/T-Academy/DevOps/Docker/"/>
    
    
      <category term="Seminar" scheme="https://wgtech.github.io/tags/Seminar/"/>
    
      <category term="T Academy" scheme="https://wgtech.github.io/tags/T-Academy/"/>
    
      <category term="Notes" scheme="https://wgtech.github.io/tags/Notes/"/>
    
      <category term="DevOps" scheme="https://wgtech.github.io/tags/DevOps/"/>
    
      <category term="Docker" scheme="https://wgtech.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>T아카데미 토크ON세미나 19차 &#39;컨테이너 기반 가상화 플랫폼 도커(Docker)의 이해&#39; : 3강 이미지 만들고 배포하기</title>
    <link href="https://wgtech.github.io/posts/2019/06/28/TAcademy-19-Docker-3-Develop-and-Distribute-the-Image/"/>
    <id>https://wgtech.github.io/posts/2019/06/28/TAcademy-19-Docker-3-Develop-and-Distribute-the-Image/</id>
    <published>2019-06-28T10:40:00.000Z</published>
    <updated>2019-10-28T13:52:48.693Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>이 포스트는 2018년 1월 17일 수요일에 진행됐던 세미나 강의 영상을 시청하고 작성했습니다.<br>세미나 강의는 <a href="https://tacademy.skplanet.com/live/player/onlineLectureDetail.action?seq=125#sec2" rel="external nofollow noopener noreferrer" target="_blank"><strong>이 곳</strong></a>을 눌러 시청하실 수 있습니다.</p></blockquote><blockquote><p>노트 필기식으로 작성한 내용이기에, 존댓말을 사용하지 않은 점 참고하시기 바랍니다.</p></blockquote><p>* 발표자 : 김대권 (Docker Meetup Seoul 운영자) 님</p><br><h1 id="구성요소"><a href="#구성요소" class="headerlink" title="구성요소"></a>구성요소</h1><h2 id="Base-Image"><a href="#Base-Image" class="headerlink" title="Base Image"></a>Base Image</h2><ul><li><p>초기<br>rootfs + Base Image 로 구성.</p></li><li><p>Run 실행 후<br>rootfs + Base Image + Install xxx (Container에 구성요소 추가)</p></li></ul><h2 id="Custom-Image"><a href="#Custom-Image" class="headerlink" title="Custom Image"></a>Custom Image</h2><ul><li>Base Image + Container 구성요소 + Commit<br>rootfs + Base Image + xxx</li></ul><br><h1 id="컨테이너를-이미지로-저장하기"><a href="#컨테이너를-이미지로-저장하기" class="headerlink" title="컨테이너를 이미지로 저장하기"></a>컨테이너를 이미지로 저장하기</h1><h2 id="명령어로-이미지-생성하기"><a href="#명령어로-이미지-생성하기" class="headerlink" title="명령어로 이미지 생성하기"></a>명령어로 이미지 생성하기</h2><blockquote><p>실습</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -it ubuntu:16.04 bash</span><br><span class="line"><span class="meta">#</span> apt-get update</span><br><span class="line"><span class="meta">#</span> apt-get install -y git</span><br></pre></td></tr></table></figure><blockquote><p>또 다른 터미널을 실행하여 작성</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line">docker diff &lt;CONTAINER_ID&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> git 이라는 version으로 태그한 ubuntu image가 생성된다.</span><br><span class="line">docker commit &lt;CONTAINER_ID&gt; ubuntu:git</span><br><span class="line"></span><br><span class="line">docker run -it ubuntu:git bash</span><br></pre></td></tr></table></figure><blockquote><p><strong>diff와 commit 명령어</strong><br>docker diff : 이미지의 변동사항을 확인할 수 있는 명령어<br>docker commit : Base Image 에 추가 구성사항을 더하여 새로운 이미지로 생성</p></blockquote><br><h2 id="Dockerfile로-이미지-만들기"><a href="#Dockerfile로-이미지-만들기" class="headerlink" title="Dockerfile로 이미지 만들기"></a>Dockerfile로 이미지 만들기</h2><blockquote><p><strong>Dockerfile</strong> : 이미지 생성 과정을 기술한 Docker 전용 DSL</p></blockquote><p>Dockerfile을 원하는 디렉토리에 만들어보자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch Dockerfile</span><br><span class="line">vi Dockerfile</span><br></pre></td></tr></table></figure><p>ubuntu 16.04 Base Image에 git을 설치하자</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">FROM</span> <span class="attr">ubuntu:16.04</span></span><br><span class="line"><span class="string">RUN</span> <span class="string">apt-get</span> <span class="string">update</span></span><br><span class="line"><span class="string">RUN</span> <span class="string">apt-get</span> <span class="string">install</span> <span class="bullet">-y</span> <span class="string">git</span></span><br></pre></td></tr></table></figure><blockquote><p>컨테이너는 반드시 상호작용 상태에서 작동되서는 안된다.<br>따라서 <strong>-y</strong> 옵션을 줘야 상호작용을 요구하지 않으며, 정상적으로 실행이 된다.</p></blockquote><p>위 방법대로 진행 후 git2 라는 버전이름을 갖춘 이미지를 생성해보자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat Dockerfile</span><br><span class="line">docker build -t ubuntu:git2 .</span><br></pre></td></tr></table></figure><br><h2 id="Dockerfile-작성시-알아야할-명령어"><a href="#Dockerfile-작성시-알아야할-명령어" class="headerlink" title="Dockerfile 작성시 알아야할 명령어"></a>Dockerfile 작성시 알아야할 명령어</h2><h3 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h3><blockquote><p>Base Image 지정을 의미한다.<br>FROM &lt;Base Image 이름&gt;</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:git</span><br></pre></td></tr></table></figure><h3 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h3><blockquote><p>파일 추가<br>ADD &lt;추가할 파일&gt; &lt;파일이 추가될 경로&gt;</p></blockquote><p><strong>현재</strong> Directory에  있는 내용들이 Dockerfile로 추가할 수 있다.</p><h3 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h3><blockquote><p>원하는 명령어 실행<br>RUN &lt;명령어&gt;</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span> apt-get install -y git</span><br></pre></td></tr></table></figure><ul><li>단, Interactive 내용이 있을 경우 Build가 되지 않는다.</li></ul><h3 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h3><blockquote><p>작업 디렉터리 변경 (cd 명령어와 유사)</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span> /tmp</span><br></pre></td></tr></table></figure><h3 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h3><blockquote><p>환경변수 기본값 지정<br>ENV AWESOME_VAR FOOVAR</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> JAVA_HOME=/opt/jdk/current</span><br></pre></td></tr></table></figure><h3 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h3><blockquote><p>컨테이너로 실행시 노출시킬 포트를 선언한다<br>EXPOSE &lt;포트 번호&gt;</p></blockquote><p>Docker 가 자동으로 내부 포트를 개방시킨다.</p><ul><li>단, -p  옵션을 사용하여 반드시 외부에서도 접근을 허용토록 설정해야한다.</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span> <span class="number">22</span></span><br></pre></td></tr></table></figure><h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><blockquote><p>이미지의 기본 실행 명령어 지정</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CMD</span> /bin/bash</span><br></pre></td></tr></table></figure><br><h1 id="Docker-Hub"><a href="#Docker-Hub" class="headerlink" title="Docker Hub"></a>Docker Hub</h1><ul><li>Docker Hub는 Docker에서 공식으로 제공하는 Docker Registry 사이트이다.<blockquote><p><strong><a href="https://hub.docker.com" rel="external nofollow noopener noreferrer" target="_blank">https://hub.docker.com</a></strong></p></blockquote></li></ul><h3 id="docker-tag"><a href="#docker-tag" class="headerlink" title="docker tag"></a>docker tag</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag wgtech/docker_tutorial:latest wgtech/docker_rename:latest</span><br></pre></td></tr></table></figure><ul><li>docker_tutorial:latest 태그의 이미지 손실 없이, docker_rename:latest 태그의 이미지가 추가된다.</li></ul><h3 id="docker-login"><a href="#docker-login" class="headerlink" title="docker login"></a>docker login</h3><blockquote><p>터미널 시스템과 Docker Registry 동기화</p></blockquote><h3 id="docker-push"><a href="#docker-push" class="headerlink" title="docker push"></a>docker push</h3><blockquote><p>생성된 이미지를 Docker Registry로 업로드.</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push wgtech/docker_tutorial:latest</span><br></pre></td></tr></table></figure><h3 id="docker-rmi"><a href="#docker-rmi" class="headerlink" title="docker rmi"></a>docker rmi</h3><blockquote><p>Local에서 생성된 이미지를 제거</p></blockquote><h3 id="docker-pull"><a href="#docker-pull" class="headerlink" title="docker pull"></a>docker pull</h3><blockquote><p>Docker Registry에 업로드 되어 있는 이미지를 내려받는 명령어</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull wgtech/ubuntu:latest</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;이 포스트는 2018년 1월 17일 수요일에 진행됐던 세미나 강의 영상을 시청하고 작성했습니다.&lt;br&gt;세미나 강의는 &lt;a href=&quot;https://tacademy.skplanet.com/live/player/onlineLe
      
    
    </summary>
    
      <category term="Seminar" scheme="https://wgtech.github.io/categories/Seminar/"/>
    
      <category term="T Academy" scheme="https://wgtech.github.io/categories/Seminar/T-Academy/"/>
    
      <category term="DevOps" scheme="https://wgtech.github.io/categories/Seminar/T-Academy/DevOps/"/>
    
      <category term="Docker" scheme="https://wgtech.github.io/categories/Seminar/T-Academy/DevOps/Docker/"/>
    
    
      <category term="Seminar" scheme="https://wgtech.github.io/tags/Seminar/"/>
    
      <category term="T Academy" scheme="https://wgtech.github.io/tags/T-Academy/"/>
    
      <category term="Notes" scheme="https://wgtech.github.io/tags/Notes/"/>
    
      <category term="DevOps" scheme="https://wgtech.github.io/tags/DevOps/"/>
    
      <category term="Docker" scheme="https://wgtech.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>T아카데미 토크ON세미나 19차 &#39;컨테이너 기반 가상화 플랫폼 도커(Docker)의 이해&#39; : 2강 도커 컨테이너 만들기</title>
    <link href="https://wgtech.github.io/posts/2019/06/28/TAcademy-19-Docker-2-How-To-Make-Container/"/>
    <id>https://wgtech.github.io/posts/2019/06/28/TAcademy-19-Docker-2-How-To-Make-Container/</id>
    <published>2019-06-28T10:20:00.000Z</published>
    <updated>2019-10-28T13:52:48.693Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>이 포스트는 2018년 1월 17일 수요일에 진행됐던 세미나 강의 영상을 시청하고 작성했습니다.<br>세미나 강의는 <a href="https://tacademy.skplanet.com/live/player/onlineLectureDetail.action?seq=125#sec2" rel="external nofollow noopener noreferrer" target="_blank"><strong>이 곳</strong></a>을 눌러 시청하실 수 있습니다.</p></blockquote><blockquote><p>노트 필기식으로 작성한 내용이기에, 존댓말을 사용하지 않은 점 참고하시기 바랍니다.</p></blockquote><p>* 발표자 : 김충섭 (퍼플웍스) 님</p><br><h1 id="도커-설치하기"><a href="#도커-설치하기" class="headerlink" title="도커 설치하기"></a>도커 설치하기</h1><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s https://get.docker.com/ | sudo sh</span><br></pre></td></tr></table></figure><h2 id="Mac-or-Windows"><a href="#Mac-or-Windows" class="headerlink" title="Mac or Windows"></a>Mac or Windows</h2><p><strong>Docker for Mac / Docker for Windows 설치</strong></p><ul><li><strong>Windows 의 경우…</strong><ol><li>Switch to Linux containers 를 눌러 <strong>Linux Container</strong> 로 변경.</li><li>Docker 옵션 창에서 <strong>Expose daemon on tcp://localhost …</strong> 찾아 클릭</li></ol></li></ul><p><strong>MacOS 는 xhyve를 사용, Windows 는 Hyper-V 사용</strong></p><blockquote><p><strong>wgtech 추가 코멘트)</strong> 특히 Windows 사용자들은 조심해야할 점은, Virtualbox이 설치된 환경인 경우이다.<br>Virtualbox도 Hyper-V를 점유하기 때문에, Virtualbox를 삭제해야할 것을 권장한다.</p></blockquote><br><h1 id="설치-완료-후-확인하기"><a href="#설치-완료-후-확인하기" class="headerlink" title="설치 완료 후 확인하기"></a>설치 완료 후 확인하기</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><br><h1 id="컨테이너-실행하기"><a href="#컨테이너-실행하기" class="headerlink" title="컨테이너 실행하기"></a>컨테이너 실행하기</h1><h2 id="‘run’-command"><a href="#‘run’-command" class="headerlink" title="‘run’ command"></a>‘run’ command</h2><h3 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run ubuntu:16.04</span><br></pre></td></tr></table></figure><ul><li>그러나 실행 이후 Process 가 바로 종료된다. 그래서 컨테이너 내부의 Shell 을 따로 실행해줘야한다.</li></ul><p>따라서 이번엔, 별도 command를 추가하여 실행해보자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -it ubuntu:latest /bin/sh</span><br></pre></td></tr></table></figure><p><strong>/bin/sh</strong> 을 사용하면, 컨테이너 내부에서 Shell이 실행된다.</p><blockquote><p><strong>TIP</strong> : –rm 옵션과 -it 옵션</p><ul><li>–rm : 컨테이너가 종료하면, 컨테이너는 즉시 삭제한다.<br>(이 옵션을 지정하지 않으면, 프로세스에 남아 있으며 일일히 docker rm 로 컨테이너를 삭제해야한다.)</li><li>-it : Interactive, 명령어 입력 가능 상태로 전환</li></ul></blockquote><br><h3 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -it centos:7 /bin/sh</span><br></pre></td></tr></table></figure><p>ubuntu 실행 예시처럼,<br>CentOS 7 버전의 이미지를 내려받아 컨테이너로 run 시키면서 Shell 을 실행하도록 초기화한다.<br>그리고, 실행한 컨테이너를 종료하면 자동으로 그 컨테이너가 제거된다.</p><br><h3 id="Web-Application-v2"><a href="#Web-Application-v2" class="headerlink" title="Web Application v2"></a><a href="https://hub.docker.com/r/subicura/docker-workshop-app/" rel="external nofollow noopener noreferrer" target="_blank">Web Application v2</a></h3><p>다음은 발표자님께서 작성하신 애플리케이션을 활용하며 컨테이너를 올려보자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-p 4568:4567 \</span><br><span class="line">-e ENDPOINT=https://workshop-docker-kr.herokuapp.com/ \</span><br><span class="line">-e PARAM_NAME=haha \</span><br><span class="line">subicura/docker-workshop-app:2</span><br></pre></td></tr></table></figure><blockquote><p><strong>TIP</strong> : 코드 속 설명</p><ul><li>\ : 명령어의 끝이 아님을 알린다.</li><li>-d : 실행된 상태로 멈춤</li><li>-p : 4568 포트로 컨테이너 4567 포트로 연결. (외부 4568 → 컨테이너 4567)</li><li>-e : 환경 변수 지정.</li><li>subicura/docker-workshop-app:2 : subicura 라는 이름의 Docker Hub 계정이 보유한, docker-workshop-app 라는 이미지의 ‘2’라는 태그를 의미하며, 이에 해당되는 이미지를 가리킨다.</li></ul></blockquote><h3 id="Web-Application-v3"><a href="#Web-Application-v3" class="headerlink" title="Web Application v3"></a><a href="https://hub.docker.com/r/subicura/docker-workshop-app/" rel="external nofollow noopener noreferrer" target="_blank">Web Application v3</a></h3><p>위에 내용과는 조금 다르게, 버전3 애플리케이션을 활용해본다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-p 4569:4567 \</span><br><span class="line">-e ENDPOINT=https://workshop-docker-kr.herokuapp.com/ \</span><br><span class="line">-e PARAM_NAME=haha \</span><br><span class="line">-e PARAM_MESSAGE=호호호 \</span><br><span class="line">subicura/docker-workshop-app:3</span><br></pre></td></tr></table></figure><ul><li>위 명령어를 작성하여 실행한 컨테이너를 종료하거나 삭제하지 않는다면 기존 v2 에서 4568이라는 포트를 사용중이기때문에, 동일한 포트를 입력하면 실행이 되지 않는다.</li></ul><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><blockquote><p><strong>Redis 는 메모리 기반의 다양한 기능을 가진 스토리지</strong></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name=redis -d -p 1234:6379 redis</span><br></pre></td></tr></table></figure><p>위 Redis 컨테이너를 실행하고나서 확인해보는 방법은 Telnet으로 하면 되며<br>Telnet 테스트는 흔히 아는 ‘그 Telnet’을 사용하거나,<br>그마저도 컨테이너로 올려 실행하고 싶다면 <a href="https://hub.docker.com/r/mikesplain/telnet/" rel="external nofollow noopener noreferrer" target="_blank">이 분</a>의 이미지를 활용하면 된다.<br>아래 2가지 방법 중 플랫폼에 맞춰 코드를 작성해본다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> macOS</span><br><span class="line">docker run --rm -it mikesplain/telnet docker.for.mac.localhost 1234</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Windows</span><br><span class="line">docker run --rm -it mikesplain/telnet docker.for.win.localhost 1234</span><br></pre></td></tr></table></figure><p>그럼 아래와 같은 내용이 나올 것이다</p><blockquote><p>Unable to find image ‘mikesplain/telnet:latest’ locally<br>latest: Pulling from mikesplain/telnet<br>c52e3ed763ff: Pull complete<br>a3ed95caeb02: Pull complete<br>Digest: sha256:11fa2b96776f5d34511452ad2b76eafad69321e456ac6653482eadb9d98c52a7<br>Status: Downloaded newer image for mikesplain/telnet:latest</p></blockquote><p>곧 이어 아무런 반응이 나오지 않는다면 다음과 같은 명령어를 입력하면서 상태를 확인해본다.</p><blockquote><p>keys **0<br>SET hello world<br>+OK<br>GET hello<br>$5<br>world</p></blockquote><br><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> run : 컨테이너를 실행만 한다. 실행 이후 추가 명령어를 입력할 일이 없을 때 주로 사용한다.</span><br><span class="line">docker run -d -p 3306:3306 \</span><br><span class="line">-e MYSQL_ALLOW_EMPTY_PASSWORD=true \</span><br><span class="line">--name mysql \</span><br><span class="line">mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> exec : 컨테이너가 running 상태라면, 입력된 추가 명령어를 담아 컨테이너에 직접 접근하여 명령을 수행한다.</span><br><span class="line">docker exec -it mysql mysql</span><br></pre></td></tr></table></figure><blockquote><p><strong>TIP</strong> : docker run 과 exec</p><ul><li>exec : run 명령어와는 달리, 컨테이너에 접속할 때 사용하며 일반적으로 컨테이너 안에 SSH Server 등을 설치하지 않고 접속한다.</li></ul></blockquote><br><h3 id="Wordpress"><a href="#Wordpress" class="headerlink" title="Wordpress"></a>Wordpress</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:80 \</span><br><span class="line">-e WORDPRESS_DB_PASSWORD=wp \</span><br><span class="line">-e WORDPRESS_DB_USER=wp \</span><br><span class="line">-e WORDPRESS_DB_NAME=wp \</span><br><span class="line">-e WORDPRESS_DB_HOST=docker.for.mac.localhost \</span><br><span class="line">wordpress</span><br></pre></td></tr></table></figure><p>정상적으로 실행이 된다면, <a href="localhost:8000" rel="external nofollow noopener noreferrer" target="_blank">localhost:8080</a> 를 브라우저에 입력하여 접속해본다.<br>처음 실행된 것이라면 초기 환경 설정 화면이 나올 것이다.</p><br><h3 id="Tensorflow"><a href="#Tensorflow" class="headerlink" title="Tensorflow"></a>Tensorflow</h3><blockquote><p>손쉽게 머신러닝을 할 수 있는 툴이다. Python과 Tensorflow와 관련된 라이브러리를 별도로 설치하지 않더라도 가능.</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 8888:8888 tensorflow/tensorflow</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="그-이외의-명령어"><a href="#그-이외의-명령어" class="headerlink" title="그 이외의 명령어"></a>그 이외의 명령어</h2><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 실행중인 또는 정지된 컨테이너 목록 확인</span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 모든 컨테이너들 각각의 상태(실행, 중단 등의 현재 상태)들을 체크할 수 있다.</span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><br><h3 id="stop"><a href="#stop" class="headerlink" title="stop"></a>stop</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 컨테이너 중지하기</span><br><span class="line">docker stop [CONTAINER ID]</span><br></pre></td></tr></table></figure><blockquote><p>CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES<br><strong>c1ae9b80e569</strong> redis “docker-entrypoint.s…” 14 minutes ago Up 14 minutes 0.0.0.0:1234-&gt;6379/tcp redis<br><strong>e12f3405413c</strong> subicura/docker-workshop-app:2 “/bin/sh -c ‘bundle …” 24 minutes ago Up 24 minutes 0.0.0.0:4568-&gt;4567/tcp suspicious_jones</p></blockquote><p>현재 Running인 Docker 컨테이너 c1ae9b80e569, e12f3405413c 를 중지하고 싶다면</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker stop c1 e1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>또는</span><br><span class="line">docker stop c1ae9b80e569 e12f3405413c</span><br><span class="line">docker stop c1ae9b80e569 &amp;&amp; docker stop e12f3405413c</span><br><span class="line">...</span><br></pre></td></tr></table></figure><br><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><p>현재 중지된 컨테이너를 제거한다.<br><strong>중지 상태와 제거 상태는 엄밀히 다르다</strong><br>중지 상태는 <strong>컨테이너 실행을 일시정지하는 것</strong>으로 생각하고, 제거상태는 <strong>저장된 컨테이너를 제거</strong>하는 것으로 생각하면 이해가 쉬울 것이다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 사용 예시</span><br><span class="line">docker ps -a # 중지된 컨테이너 확인</span><br><span class="line">docker rm 7a 0d c1 e1 c8</span><br></pre></td></tr></table></figure><br><h3 id="logs"><a href="#logs" class="headerlink" title="logs"></a>logs</h3><p>컨테이너의 로그를 직접 확인할 수 있다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker logs [CONTAINER ID]</span><br><span class="line"></span><br><span class="line">docker logs -f b62</span><br></pre></td></tr></table></figure><ul><li>-f : 새로 생성된 로그를 실시간으로 확인 할 수 있다.</li></ul><br><h3 id="images"><a href="#images" class="headerlink" title="images"></a>images</h3><p>현재 Docker 시스템에 설치된 이미지 목록 확인할 수 있다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><blockquote><p>REPOSITORY TAG IMAGE ID CREATED SIZE<br>wordpress latest 5e5e0b1aa9dd 7 days ago 447MB<br>ubuntu latest 4c108a37151f 7 days ago 64.2MB<br>redis latest 3c41ce05add9 2 weeks ago 95MB<br>mysql 5.7 a1aa4f76fab9 2 weeks ago 373MB<br>mysql latest c7109f74d339 2 weeks ago 443MB<br>wgtech/notebook django ee465632331e 4 weeks ago 903MB<br>centos latest 9f38484d220f 3 months ago 202MB<br>subicura/docker-workshop-app 2 0fe78e486e9f 17 months ago 299MB<br>mikesplain/telnet latest 16a7ed249fe6 3 years ago 4.79MB</p></blockquote><br><h3 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h3><p>Docker Hub와 같은 Docker Registry 등에서 이미지를 내려받는다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ubuntu:latest</span><br></pre></td></tr></table></figure><br><h3 id="rmi"><a href="#rmi" class="headerlink" title="rmi"></a>rmi</h3><p>현재 시스템에 설치된 이미지를 삭제한다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi mysql</span><br></pre></td></tr></table></figure><ul><li>실행중인 이미지는 삭제되지 않는다. 컨테이너는 이미지를 기반으로 생성되기 때문이다.</li></ul><p><strong>컨테이너는 이미지로부터 파생된 것이다. 컨테이너가 실행되어 있으면 그 컨테이너가 영향 받은 이미지는 제거가 불가능하다</strong></p><p><br><br></p><h1 id="네트워크-만들기"><a href="#네트워크-만들기" class="headerlink" title="네트워크 만들기"></a>네트워크 만들기</h1><h2 id="network-create"><a href="#network-create" class="headerlink" title="network create"></a>network create</h2><ul><li>도커 컨테이너끼리 통신할 수 있는 가상 네트워크를 만든다.</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker network create [OPTIONS] NETWORK</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 이번 실습은, Wordpress 컨테이너와 MySQL 컨테이너가 통신할 네트워크를 만들어본다.</span><br><span class="line">docker network create app-network </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 첫번째 컨테이너 생성 후 네트워크 연동</span><br><span class="line">docker run --name=ubuntu -it --network=app-network ubuntu /bin/sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 두번째 컨테이너 생성 후 네트워크 연동</span><br><span class="line">docker run --name=ubuntu2 -it --network=app-network ubuntu /bin/sh</span><br></pre></td></tr></table></figure><br><h2 id="network-connect"><a href="#network-connect" class="headerlink" title="network connect"></a>network connect</h2><ul><li>기존에 생성된 컨테이너에 네트워크를 추가한다.</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker network connect [OPTIONS] NETWORK CONTAINER</span><br><span class="line"></span><br><span class="line">docker network connect app-network mysql</span><br></pre></td></tr></table></figure><br><h2 id="run-with-network"><a href="#run-with-network" class="headerlink" title="run with network"></a>run with network</h2><ul><li>WordPress를 app-network에 속하도록하고, 이에 대한 DB는 mysql에서 가져다 쓸 수 있도록 한다.</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:80 \</span><br><span class="line">-e WORDPRESS_DB_HOST=**mysql** \</span><br><span class="line">-e WORDPRESS_DB_NAME=wp \</span><br><span class="line">-e WORDPRESS_DB_USER=wp \</span><br><span class="line">-e WORDPRESS_DB_PASSWORD=wp \</span><br><span class="line">wordpress</span><br></pre></td></tr></table></figure><br><h1 id="Volume-Mount"><a href="#Volume-Mount" class="headerlink" title="Volume Mount"></a>Volume Mount</h1><p><strong>-v</strong> 옵션</p><ul><li>호스트 OS의 볼륨과 실제로 연동하도록 작업할 수 있다. (컨테이너의 볼륨이 시스템 볼륨의 지정 위치와 동기화하여 작동한다.)</li><li>DB 또는 DBMS 등 휘발적인 사용이 권장되지 않는 환경에서 주로 사용된다. </li></ul><p><br><br></p><h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h1><p>Docker for Mac / Windows 환경은 Docker Compose가 자동으로 설치되어 있다.</p><h2 id="docker-compose-yaml-파일-작성"><a href="#docker-compose-yaml-파일-작성" class="headerlink" title="docker-compose.yaml 파일 작성"></a>docker-compose.yaml 파일 작성</h2><p>다음은 mysql, wordpress 컨테이너를 다수의 명령어 없이 일일히 작성하는 파일 방식이다.<br>이 방법은 <strong>선언</strong> 방법이라고 한다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line"><span class="attr">    db:</span></span><br><span class="line"><span class="attr">        image:</span> <span class="attr">mysql:5.7</span></span><br><span class="line"><span class="attr">        volumes:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">./mysql:/var/lib/mysql</span></span><br><span class="line"><span class="attr">        restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">        environment:</span></span><br><span class="line"><span class="attr">            MYSQL_ROOT_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">            MYSQL_DATABASE:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">            MYSQL_USER:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">            MYSQL_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    wordpress:</span></span><br><span class="line"><span class="attr">        image:</span> <span class="attr">wordpress:latest</span></span><br><span class="line"><span class="attr">        volumes:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">./wp:/var/www/html</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">"8000:80"</span></span><br><span class="line"><span class="attr">        restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">        environment:</span></span><br><span class="line"><span class="attr">            WORDPRESS_DB_HOST:</span> <span class="attr">db:3306</span></span><br><span class="line"><span class="attr">            WORDPRESS_DB_PASSWORD:</span> <span class="string">wordpress</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;이 포스트는 2018년 1월 17일 수요일에 진행됐던 세미나 강의 영상을 시청하고 작성했습니다.&lt;br&gt;세미나 강의는 &lt;a href=&quot;https://tacademy.skplanet.com/live/player/onlineLe
      
    
    </summary>
    
      <category term="Seminar" scheme="https://wgtech.github.io/categories/Seminar/"/>
    
      <category term="T Academy" scheme="https://wgtech.github.io/categories/Seminar/T-Academy/"/>
    
      <category term="DevOps" scheme="https://wgtech.github.io/categories/Seminar/T-Academy/DevOps/"/>
    
      <category term="Docker" scheme="https://wgtech.github.io/categories/Seminar/T-Academy/DevOps/Docker/"/>
    
    
      <category term="Seminar" scheme="https://wgtech.github.io/tags/Seminar/"/>
    
      <category term="T Academy" scheme="https://wgtech.github.io/tags/T-Academy/"/>
    
      <category term="Notes" scheme="https://wgtech.github.io/tags/Notes/"/>
    
      <category term="DevOps" scheme="https://wgtech.github.io/tags/DevOps/"/>
    
      <category term="Docker" scheme="https://wgtech.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>T아카데미 토크ON세미나 19차 &#39;컨테이너 기반 가상화 플랫폼 도커(Docker)의 이해&#39; : 1강 도커 개요 및 소개</title>
    <link href="https://wgtech.github.io/posts/2019/06/28/TAcademy-19-Docker-1-Introduce/"/>
    <id>https://wgtech.github.io/posts/2019/06/28/TAcademy-19-Docker-1-Introduce/</id>
    <published>2019-06-28T09:40:00.000Z</published>
    <updated>2019-10-28T13:52:48.693Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>이 포스트는 2018년 1월 17일 수요일에 진행됐던 세미나 강의 영상을 시청하고 작성했습니다.<br>세미나 강의는 <a href="https://tacademy.skplanet.com/live/player/onlineLectureDetail.action?seq=125#sec2" rel="external nofollow noopener noreferrer" target="_blank"><strong>이 곳</strong></a>을 눌러 시청하실 수 있습니다.</p></blockquote><blockquote><p>노트 필기식으로 작성한 내용이기에, 존댓말을 사용하지 않은 점 참고하시기 바랍니다.</p></blockquote><p>* 발표자 : 김대권 (Docker Meetup Seoul 운영자) 님</p><br><h1 id="Docker의-등장"><a href="#Docker의-등장" class="headerlink" title="Docker의 등장"></a>Docker의 등장</h1><ul><li><a href="https://pyvideo.org/pycon-us-2013/the-future-of-linux-containers.html" rel="external nofollow noopener noreferrer" target="_blank">솔로몬 하익스(Solomon Hykes), PyCon 2013 Lighting Talk (The Future of Linux Containers)</a></li></ul><h2 id="Hello-World-찍어보기"><a href="#Hello-World-찍어보기" class="headerlink" title="Hello World 찍어보기"></a>Hello World 찍어보기</h2><ol><li><p>로컬/호스트 시스템에서 Hello World 출력</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo "Hello World"</span><br><span class="line"><span class="meta">#</span> Hello World</span><br></pre></td></tr></table></figure></li><li><p>Docker를 통해 Hello World 출력</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span> -it ubuntu:latest echo "Hello World"</span><br><span class="line"><span class="comment"># root@d2af7da4b97d:/</span></span><br><span class="line"><span class="comment"># Hello World</span></span><br><span class="line"><span class="comment"># root@d2af7da4b97d:/</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>겉으로는 똑같아보이지만 실환경은 서로 다르다.</strong></p><br><h1 id="컨테이너"><a href="#컨테이너" class="headerlink" title="컨테이너"></a>컨테이너</h1><h2 id="컨테이너는-가상-환경인가요"><a href="#컨테이너는-가상-환경인가요" class="headerlink" title="컨테이너는 가상 환경인가요?"></a>컨테이너는 가상 환경인가요?</h2><p><strong>각각의 VM = 서로 다른 환경, 각각의 컨테이너 = 서로 다른 환경</strong></p><h2 id="컨테이너는-VM인가요"><a href="#컨테이너는-VM인가요" class="headerlink" title="컨테이너는 VM인가요?"></a>컨테이너는 VM인가요?</h2><p>Virtual Machine 은 하드웨어 가상화</p><ul><li>소프트웨어로 구현된 하드웨어</li></ul><p><strong>컨테이너는 하드웨어 가상화가 아님.</strong></p><ul><li>OS에서 지원하는 기능을 사용</li><li>격리된 환경에서 프로세스를 실행</li></ul><p><strong>즉, 컨테이너는 하드웨어 가상화 없는 격리된 환경에서 실행되는 프로세스이다.</strong><br>Docker와 <strong>chroot</strong> 명령어는 매우 유사하다. chroot는 Root Directory를 바꿔주는 명령어다.</p><br><h3 id="컨테이너-사용예시"><a href="#컨테이너-사용예시" class="headerlink" title="컨테이너 사용예시"></a>컨테이너 사용예시</h3><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><ol><li><p>Docker로 MySQL 설치</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3306:3306 --name mysql mysql:5.7</span><br></pre></td></tr></table></figure></li><li><p>설치 확인</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">telnet 0.0.0.0:3306</span><br><span class="line"><span class="meta">#</span> 미설치시 Mac환경은, brew install telnet</span><br></pre></td></tr></table></figure></li></ol><h2 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h2><ul><li>(MySQL Container가 실행된 이후)<figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span> --name wordpress --link mysql:mysql -p 8080:80 -d wordpress</span><br></pre></td></tr></table></figure></li></ul><br><h1 id="이미지"><a href="#이미지" class="headerlink" title="이미지"></a>이미지</h1><p><strong>1. 특정 프로세스를 실행하기 위한 환경</strong></p><ul><li>계층화된 파일 시스템</li><li>이미지는 파일들의 집합</li><li>프로세스가 실행되는 환경도, 결국 파일들의 집합이다.</li></ul><p><strong>2. 작동되는 상태</strong></p><br><h1 id="Docker-아키텍쳐"><a href="#Docker-아키텍쳐" class="headerlink" title="Docker 아키텍쳐"></a>Docker 아키텍쳐</h1><h2 id="리눅스-머신에서의-Docker"><a href="#리눅스-머신에서의-Docker" class="headerlink" title="리눅스 머신에서의 Docker"></a>리눅스 머신에서의 Docker</h2><ul><li>컨테이너를 네이티브하게 지원<ul><li>컨테이너 = 호스트의 프로세스</li></ul></li><li>배포판에 따라 차이는 있지만, 대부분은 지원된다.</li><li>실제 Docker Container 배포에는 리눅스 머신을 사용</li></ul><h2 id="Docker-for-macOS"><a href="#Docker-for-macOS" class="headerlink" title="Docker for macOS"></a>Docker for macOS</h2><ul><li>xhyve 와 교신<ul><li>macOS의 가상화 방식 (경량 가상 머신)</li><li>컨테이너 = xhyve에서 실행된 프로세스</li></ul></li><li>호스트 머신과 자연스럽게 결합<ul><li>네트워크 / 볼륨 등</li><li>호스트 머신 처럼 사용 가능</li></ul></li></ul><h2 id="Virtual-Machine-on-macOS-macOS-lt-gt-Virtualbox"><a href="#Virtual-Machine-on-macOS-macOS-lt-gt-Virtualbox" class="headerlink" title="Virtual Machine on macOS (macOS &lt;-&gt; Virtualbox)"></a>Virtual Machine on macOS (macOS &lt;-&gt; Virtualbox)</h2><ul><li>일반적인 가상 머신</li><li>컨테이너 = 가상 머신의 프로세스</li><li>네트워크 / 볼륨 설정이 까다로움</li><li>클라이언트는 환경 변수를 참조해서 서버에 접속</li></ul><h2 id="Local-Client-amp-Remote-Docker-Server-macOS-lt-gt-Linux-Server"><a href="#Local-Client-amp-Remote-Docker-Server-macOS-lt-gt-Linux-Server" class="headerlink" title="Local Client &amp; Remote Docker Server (macOS &lt;-&gt; Linux Server)"></a>Local Client &amp; Remote Docker Server (macOS &lt;-&gt; Linux Server)</h2><ul><li>원격 리눅스 서버에 존재한 Docker와의 연결</li></ul><br><h1 id="컨테이너가-필요한-이유"><a href="#컨테이너가-필요한-이유" class="headerlink" title="컨테이너가 필요한 이유"></a>컨테이너가 필요한 이유</h1><p>여러가지의 상황과 환경의 기반의 컴퓨터와 하드웨어 환경에서 동일한 환경내로 변경 또는 관리를 수월해야하는 필요성에 대해 등장.</p><h2 id="Dockerfile-이란"><a href="#Dockerfile-이란" class="headerlink" title="Dockerfile 이란"></a>Dockerfile 이란</h2><p>깨끗한 환경으로부터 애플리케이션 실행 환경까지 최단경로</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;이 포스트는 2018년 1월 17일 수요일에 진행됐던 세미나 강의 영상을 시청하고 작성했습니다.&lt;br&gt;세미나 강의는 &lt;a href=&quot;https://tacademy.skplanet.com/live/player/onlineLe
      
    
    </summary>
    
      <category term="Seminar" scheme="https://wgtech.github.io/categories/Seminar/"/>
    
      <category term="T Academy" scheme="https://wgtech.github.io/categories/Seminar/T-Academy/"/>
    
      <category term="DevOps" scheme="https://wgtech.github.io/categories/Seminar/T-Academy/DevOps/"/>
    
      <category term="Docker" scheme="https://wgtech.github.io/categories/Seminar/T-Academy/DevOps/Docker/"/>
    
    
      <category term="Seminar" scheme="https://wgtech.github.io/tags/Seminar/"/>
    
      <category term="T Academy" scheme="https://wgtech.github.io/tags/T-Academy/"/>
    
      <category term="Notes" scheme="https://wgtech.github.io/tags/Notes/"/>
    
      <category term="DevOps" scheme="https://wgtech.github.io/tags/DevOps/"/>
    
      <category term="Docker" scheme="https://wgtech.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>NumberPicker Wheel/Scroll(휠스크롤) 방식으로 바꾸고, 수정 못 하도록 포커스 막기</title>
    <link href="https://wgtech.github.io/posts/2019/06/10/Android-NumberPicker-Wheel-Scroll-Focus-Block/"/>
    <id>https://wgtech.github.io/posts/2019/06/10/Android-NumberPicker-Wheel-Scroll-Focus-Block/</id>
    <published>2019-06-10T09:08:55.000Z</published>
    <updated>2019-10-28T13:52:48.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="시작하기-전에"><a href="#시작하기-전에" class="headerlink" title="시작하기 전에"></a>시작하기 전에</h1><p>제가 속한 팀에서 작업한, <a href="https://pentacore.gitbook.io/notebook" rel="external nofollow noopener noreferrer" target="_blank">Notebook</a> 프로젝트는 Android로도 개발했습니다.<br>웹으로 작업한 디자인과 최대한 동일한 환경을 제공하기 위하여 휠스크롤이 가능한 Picker(선택기) 위젯이 필요했습니다.<br>커스텀 작업이 가능한 NumberPicker가 최적이라는 것을 확인했고, 이에 따라 작업을 하기 시작했습니다..</p><p>그러나, 문제가 생겼습니다.</p><p>일단 기본 옵션으로 휠스크롤 모양으로 바뀌지 않다는 것,<br>그리고 Picker 의 값을 누르면 값이 수정이 된다는 문제였습니다.</p><br><h1 id="NumberPicker-휠스크롤-모양으로-바꾸기"><a href="#NumberPicker-휠스크롤-모양으로-바꾸기" class="headerlink" title="NumberPicker 휠스크롤 모양으로 바꾸기"></a>NumberPicker 휠스크롤 모양으로 바꾸기</h1><p><img src="/images/2019/06/10/Android-NumberPicker-Wheel-Scroll-Focus-Block/NumberPicker-1.png" alt="4.2 버전의 NumberPicker" title="4.2 버전의 NumberPicker"><br>기존 NumberPicker는, 위 사진 처럼 +/- 버튼이 있는 형태였습니다.<br>그러나, 현재 우리가 많이 사용하는 앱은 이런 디자인을 잘 사용하지 않습니다. 따라서 바꿔보겠습니다.</p><h2 id="해결-방법"><a href="#해결-방법" class="headerlink" title="해결 방법"></a>해결 방법</h2><p><em>API Level 11 (허니콤) 부터 적용할 수 있습니다</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> NumberPicker npDetailSentence;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   중략</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">npDetailSentence.setWrapSelectorWheel(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><br><h1 id="NumberPicker의-값을-수정-할-수-없도록-포커스-막기"><a href="#NumberPicker의-값을-수정-할-수-없도록-포커스-막기" class="headerlink" title="NumberPicker의 값을 수정 할 수 없도록, 포커스 막기"></a>NumberPicker의 값을 수정 할 수 없도록, 포커스 막기</h1><p>위에서 언급한 내용대로, 아래 사진과 같이 휠스크롤 디자인으로 변경했습니다.<br><img src="/images/2019/06/10/Android-NumberPicker-Wheel-Scroll-Focus-Block/NumberPicker-2.png" alt="&quot;휠스크롤 형식으로 바꾼 NumberPicker&quot;" title="휠스크롤 형식으로 바꾼 NumberPicker"><br>그런데 문제가 생겼습니다. 위와 같은 이미지처럼, 값을 누르면 변경하는 키보드가 올라옵니다.<br>따라서 이 값을 수정하지 못하도록 <strong>포커스</strong> 자체를 막도록 해봅시다.</p><h2 id="해결-방법-1"><a href="#해결-방법-1" class="headerlink" title="해결 방법"></a>해결 방법</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> NumberPicker npDetailSentence;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   중략</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">npDetailSentence.setDescendantFocusability(</span><br><span class="line">    NumberPicker.FOCUS_BLOCK_DESCENDANTS</span><br><span class="line">);</span><br></pre></td></tr></table></figure><br><h1 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h1><p>기존에 가공된 값을 설정하며, 디자인을 조금 더 가공한 결과<br>아래와 같은 결과물을 얻을 수 있게 되었습니다!</p><p><img src="/images/2019/06/10/Android-NumberPicker-Wheel-Scroll-Focus-Block/NumberPicker-3.gif" alt></p><hr><p>그림 출처</p><ol><li>NumberPicker 휠스크롤 모양으로 바꾸기<ul><li><a href="https://atstechlab.wordpress.com/2010/07/15/android-numberpicker-widget-part-1/" rel="external nofollow noopener noreferrer" target="_blank">https://atstechlab.wordpress.com/2010/07/15/android-numberpicker-widget-part-1/</a></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;시작하기-전에&quot;&gt;&lt;a href=&quot;#시작하기-전에&quot; class=&quot;headerlink&quot; title=&quot;시작하기 전에&quot;&gt;&lt;/a&gt;시작하기 전에&lt;/h1&gt;&lt;p&gt;제가 속한 팀에서 작업한, &lt;a href=&quot;https://pentacore.gitbook.
      
    
    </summary>
    
      <category term="Programming" scheme="https://wgtech.github.io/categories/Programming/"/>
    
      <category term="Framework" scheme="https://wgtech.github.io/categories/Programming/Framework/"/>
    
      <category term="Android" scheme="https://wgtech.github.io/categories/Programming/Framework/Android/"/>
    
    
      <category term="Programming" scheme="https://wgtech.github.io/tags/Programming/"/>
    
      <category term="Framework" scheme="https://wgtech.github.io/tags/Framework/"/>
    
      <category term="Android" scheme="https://wgtech.github.io/tags/Android/"/>
    
      <category term="Java" scheme="https://wgtech.github.io/tags/Java/"/>
    
      <category term="Kotlin" scheme="https://wgtech.github.io/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Swift 문법 : (3) 특수문자 표시와 의미 (Special Characters In Swift)</title>
    <link href="https://wgtech.github.io/posts/2019/06/07/Special-Characters-In-Swift/"/>
    <id>https://wgtech.github.io/posts/2019/06/07/Special-Characters-In-Swift/</id>
    <published>2019-06-07T09:45:17.000Z</published>
    <updated>2019-10-28T13:52:48.692Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>용도에 대한 자세한 설명을 작성할 예정입니다.</strong></p></blockquote><br><h1 id="Swift-문법"><a href="#Swift-문법" class="headerlink" title="Swift 문법"></a>Swift 문법</h1><h2 id="특수-문자표"><a href="#특수-문자표" class="headerlink" title="특수 문자표"></a>특수 문자표</h2><p>한글 두벌식 (또는 영문 QWERTY) 기준으로 좌측에서 우측 순으로, 위에서 아래 순입니다.<br>주로 많이 사용하거나 중요한 것은 두꺼운 글씨로 표기했습니다</p><table><thead><tr><th align="center">특수문자(기호)</th><th align="center">우리말 (한글 표현)</th><th align="center">영어</th><th align="center">뜻, 의미, 용도</th></tr></thead><tbody><tr><td align="center">`</td><td align="center"></td><td align="center">Grave Accent / Back Tick</td><td align="center">키워드를 식별자로 변환</td></tr><tr><td align="center">~</td><td align="center">물결 / 물결 표시</td><td align="center">Tilde</td><td align="center">비트 연산</td></tr><tr><td align="center">!</td><td align="center">느낌표</td><td align="center">Exclamation Mark</td><td align="center">논리 부정 / 저장된 값을 강제로 가져올 때 (Optional) 용도로 사용</td></tr><tr><td align="center">@</td><td align="center">골뱅이</td><td align="center">At symbol</td><td align="center">코드 자체의 특성을 가리킬 때 사용</td></tr><tr><td align="center">#</td><td align="center">우물 정 / 샵 / 해쉬태그</td><td align="center">Sharp / Pound / Hash Tag</td><td align="center">Swift 고유의 특별한 명령어들의 첫 문자</td></tr><tr><td align="center">$</td><td align="center">달러</td><td align="center">Dollar Sign</td><td align="center">Closure에서 파라미터(인자, Parameter) 이름을 대체할 때 사용</td></tr><tr><td align="center">%</td><td align="center">퍼센트 / 백분율</td><td align="center">Percent Sign</td><td align="center">나머지 연산</td></tr><tr><td align="center">^</td><td align="center">위로 꺾은 기호 / 꺽쇠</td><td align="center">Caret</td><td align="center">비트 연산</td></tr><tr><td align="center">&amp;</td><td align="center">앤드 기호</td><td align="center">Ampersand</td><td align="center">메모리 주소를 얻거나 참조</td></tr><tr><td align="center">*</td><td align="center">별</td><td align="center">Asterisk</td><td align="center">곱셈 연산</td></tr><tr><td align="center">( )</td><td align="center">소괄호</td><td align="center">Parentheses</td><td align="center">함수 호출 / 계산의 순서를 지정</td></tr><tr><td align="center">-</td><td align="center">뺄셈 기호 / 마이너스</td><td align="center">Minus Sign / Hyphen</td><td align="center">뺄셈 연산 / 음수 지정</td></tr><tr><td align="center">+</td><td align="center">덧셈 기호 / 플러스</td><td align="center">Plus Sign</td><td align="center">덧셈 연산</td></tr><tr><td align="center">_</td><td align="center">밑줄</td><td align="center">Minus Sign / Underscore</td><td align="center">Wild Card 패턴 활용</td></tr><tr><td align="center">=</td><td align="center">등호 / 이퀄 / 은,는 기호</td><td align="center">Equal Sign</td><td align="center">값을 저장 / *(두개를 연달아 사용시 ‘==’, 값을 비교)</td></tr><tr><td align="center"><strong>{ }</strong></td><td align="center"><strong>중괄호</strong></td><td align="center"><strong>Curly Bracket / Brace</strong></td><td align="center"><strong>코드 블록의 범위를 지정</strong></td></tr><tr><td align="center">|</td><td align="center">수직 기호 / 파이프</td><td align="center">Vertical Bar / Pipe</td><td align="center">옵션 열거시 사용(기존 Swift) / 논리 연산 또는 비트 연산</td></tr><tr><td align="center"><strong>[ ]</strong></td><td align="center"><strong>대괄호</strong></td><td align="center"><strong>Square Bracket</strong></td><td align="center"><strong>주로 Collection에 저장된 값을 접근할 때 / Subscript 문법 활용</strong></td></tr><tr><td align="center">\</td><td align="center">오른쪽 내려가는 대각선 / 역슬래쉬</td><td align="center">Backslash</td><td align="center">String Interpolation / Keypress 표현</td></tr><tr><td align="center">:</td><td align="center">콜론</td><td align="center">Colon</td><td align="center">자료형 지정 /  Dictionary에서 키와 값을 구분</td></tr><tr><td align="center">;</td><td align="center">세미콜론</td><td align="center">Semicolon</td><td align="center">문장의 끝을 표현 / 한 줄에 여러 식이나 문장을 입력</td></tr><tr><td align="center"><strong>&lt; &gt;</strong></td><td align="center"><strong>화살 괄호</strong></td><td align="center"><strong>Angle Bracket</strong></td><td align="center"><strong>크기를 비교 / Generic에서는 형식 파라미터를 지정</strong></td></tr><tr><td align="center">?</td><td align="center">물음표</td><td align="center">Question Mark</td><td align="center">Optional 사용</td></tr><tr><td align="center">,</td><td align="center">쉼표 / 콤마</td><td align="center">Comma</td><td align="center">함수를 전달하는 값을 나열 / 배열에 저장할 값을 나열</td></tr><tr><td align="center">.</td><td align="center">온점 / 점</td><td align="center">Period</td><td align="center">메서드를 호출하거나 속성에 접근</td></tr><tr><td align="center">/</td><td align="center">오른쪽 올라가는 대각선, 사선 / 슬래쉬</td><td align="center">Slash</td><td align="center">주로 경로를 지정</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;용도에 대한 자세한 설명을 작성할 예정입니다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;h1 id=&quot;Swift-문법&quot;&gt;&lt;a href=&quot;#Swift-문법&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="Programming" scheme="https://wgtech.github.io/categories/Programming/"/>
    
      <category term="Language" scheme="https://wgtech.github.io/categories/Programming/Language/"/>
    
      <category term="Swift" scheme="https://wgtech.github.io/categories/Programming/Language/Swift/"/>
    
    
      <category term="Programming" scheme="https://wgtech.github.io/tags/Programming/"/>
    
      <category term="Language" scheme="https://wgtech.github.io/tags/Language/"/>
    
      <category term="Swift" scheme="https://wgtech.github.io/tags/Swift/"/>
    
      <category term="Grammar" scheme="https://wgtech.github.io/tags/Grammar/"/>
    
      <category term="Special Character" scheme="https://wgtech.github.io/tags/Special-Character/"/>
    
  </entry>
  
  <entry>
    <title>Swift 프로세스 : 컴파일, 링크, 실행 (Compile, Link, Run In Swift)</title>
    <link href="https://wgtech.github.io/posts/2019/06/07/Compile-Link-Run-In-Swift/"/>
    <id>https://wgtech.github.io/posts/2019/06/07/Compile-Link-Run-In-Swift/</id>
    <published>2019-06-07T09:35:11.000Z</published>
    <updated>2019-10-28T13:52:48.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Swift-구조"><a href="#Swift-구조" class="headerlink" title="Swift 구조"></a>Swift 구조</h1><h2 id="컴파일-Compile"><a href="#컴파일-Compile" class="headerlink" title="컴파일 (Compile)"></a>컴파일 (Compile)</h2><p>사람이 이해할 수 있는 문자를 사용하며 코드를 작성하고, 이 문자들을 컴퓨터 컴파일러를 통해서, 컴퓨터가 알아볼 수 있고 0과 1로 구성되어 있는 이진수 코드로 변환하는 과정을 의미합니다.</p><p><span style="background-color:black;color:white;">codes ⇒ 0101…</span></p><br><h2 id="링크-Link"><a href="#링크-Link" class="headerlink" title="링크 (Link)"></a>링크 (Link)</h2><p>컴파일 과정을 통해 얻은, 이진수로 구성되어 있는 컴파일 코드를 실행 가능한 파일(바이너리)로 변환하기 위하여, 프레임워크와 라이브러리 등을 접목시켜 변환하는 작업을 의미합니다.</p><span style="background-color:black;color:white;">codes ⇒ 0101... + Framework (+ Libraries ... ) ⇒ Variables, Components ...</span><p>과거 일일히 처리하는 도구가 있어야하지만, 오늘날 IDE(Integrated Development Environments, 통합 개발 환경) 도구가 모두 처리해줍니다.</p><br><h2 id="빌드-Build"><a href="#빌드-Build" class="headerlink" title="빌드 (Build)"></a>빌드 (Build)</h2><p>Compile 과정과 Link 과정을 아우르는 과정은 ‘Build’ 라고 합니다.</p><br><h2 id="실행-Run"><a href="#실행-Run" class="headerlink" title="실행 (Run)"></a>실행 (Run)</h2><p>build 과정을 거친 이후, 개발자가 작성한 코드는 실행이 가능한 상태인 파일들로 변환됩니다. 이 때, 원하는 상태(Mode) 를 통해, 각기 다른 결과를 도출할 수도 있는데 크게 두 가지 상태로 나뉘어집니다.</p><ul><li>Debug Mode : 앱을 만들 때 사용하며, 사용자가 볼 수 없지만 개발자들이 확인 가능한 값들도 출력이 됩니다.</li><li>Release Mode : 각 다른 실행 기기에 최적화된 상태로 변환되며, Debug Mode 와는 달리 실행 속도가 빠릅니다.</li></ul><br><h2 id="시간과-시점"><a href="#시간과-시점" class="headerlink" title="시간과 시점"></a>시간과 시점</h2><h3 id="컴파일-시간-Compile-Time"><a href="#컴파일-시간-Compile-Time" class="headerlink" title="컴파일 시간 (Compile Time)"></a>컴파일 시간 (Compile Time)</h3><p>Compile와 Link 시작시간에서, 과정을 모두 마칠 때까지 걸린 시간을 의미합니다.</p><h3 id="런타임-실행시점-Runtime"><a href="#런타임-실행시점-Runtime" class="headerlink" title="런타임 (실행시점, Runtime)"></a>런타임 (실행시점, Runtime)</h3><p>실행한 시점을 가리킵니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Swift-구조&quot;&gt;&lt;a href=&quot;#Swift-구조&quot; class=&quot;headerlink&quot; title=&quot;Swift 구조&quot;&gt;&lt;/a&gt;Swift 구조&lt;/h1&gt;&lt;h2 id=&quot;컴파일-Compile&quot;&gt;&lt;a href=&quot;#컴파일-Compile&quot; class
      
    
    </summary>
    
      <category term="Programming" scheme="https://wgtech.github.io/categories/Programming/"/>
    
      <category term="Language" scheme="https://wgtech.github.io/categories/Programming/Language/"/>
    
      <category term="Swift" scheme="https://wgtech.github.io/categories/Programming/Language/Swift/"/>
    
    
      <category term="Programming" scheme="https://wgtech.github.io/tags/Programming/"/>
    
      <category term="Language" scheme="https://wgtech.github.io/tags/Language/"/>
    
      <category term="Swift" scheme="https://wgtech.github.io/tags/Swift/"/>
    
      <category term="Process" scheme="https://wgtech.github.io/tags/Process/"/>
    
      <category term="Compile" scheme="https://wgtech.github.io/tags/Compile/"/>
    
      <category term="Link" scheme="https://wgtech.github.io/tags/Link/"/>
    
      <category term="Run" scheme="https://wgtech.github.io/tags/Run/"/>
    
  </entry>
  
  <entry>
    <title>Swift 문법 : (2) 리터럴, 식별자, 키워드 (Literals, Identifiers, Keywords In Swift)</title>
    <link href="https://wgtech.github.io/posts/2019/06/07/Literals-Identifiers-Keywords-In-Swift/"/>
    <id>https://wgtech.github.io/posts/2019/06/07/Literals-Identifiers-Keywords-In-Swift/</id>
    <published>2019-06-07T09:30:38.000Z</published>
    <updated>2019-10-28T13:52:48.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Swift-문법"><a href="#Swift-문법" class="headerlink" title="Swift 문법"></a>Swift 문법</h1><h2 id="리터럴-Literals"><a href="#리터럴-Literals" class="headerlink" title="리터럴 (Literals)"></a>리터럴 (Literals)</h2><ul><li>숫자 자체를 의미합니다. 그러나 상수 또는 변수에 붙어있는 숫자가 아닙니다.</li><li>Integer, Floating-point, Boolean 등의 자료형으로 구성되어 있습니다.<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">3</span> <span class="comment">// 3이 Literal 입니다.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> y = <span class="number">1</span> + <span class="number">2</span> <span class="comment">// 1, 2가 Literal 입니다.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x2 = x &gt; <span class="number">3</span> <span class="comment">// x2는 Literal 이 아니며, 3만 Literal 입니다.</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="식별자-Identifiers"><a href="#식별자-Identifiers" class="headerlink" title="식별자 (Identifiers)"></a>식별자 (Identifiers)</h2><ul><li>코드에 포함한 요소를 구별하는 데에 사용합니다. 특정한 변수 또는 상수를 지칭할 때 사용합니다.<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">7</span> <span class="comment">// x가 식별자입니다</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// number 와 Number, _Number는 각각 다른 상수입니다.</span></span><br><span class="line"><span class="keyword">let</span> number = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="type">Number</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> _Number = <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="키워드-Keywords"><a href="#키워드-Keywords" class="headerlink" title="키워드 (Keywords)"></a>키워드 (Keywords)</h2><ul><li>변수나 상수 또는 다른 요소를 구성하거나 선언할 때 사용하는 예약된 문자입니다.</li><li>class, enum, init, for, if 등이 있습니다. 이 것들은 <strong>예약어 (Reserved words/keywords)</strong> 라고 합니다<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">2</span> <span class="comment">// let은 키워드로 상수를 의미합니다.</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">3</span> <span class="comment">// x는 변수를 의미합니다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//let let = 0 // 컴파일 오류가 발생합니다. 'let'은 상수로 사용할 수 없습니다</span></span><br><span class="line"><span class="keyword">let</span> letNumber = <span class="number">0</span> <span class="comment">// 단, 단어 사이에 포함된 키워드는 사용이 가능합니다.</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Swift-문법&quot;&gt;&lt;a href=&quot;#Swift-문법&quot; class=&quot;headerlink&quot; title=&quot;Swift 문법&quot;&gt;&lt;/a&gt;Swift 문법&lt;/h1&gt;&lt;h2 id=&quot;리터럴-Literals&quot;&gt;&lt;a href=&quot;#리터럴-Literals&quot; cla
      
    
    </summary>
    
      <category term="Programming" scheme="https://wgtech.github.io/categories/Programming/"/>
    
      <category term="Language" scheme="https://wgtech.github.io/categories/Programming/Language/"/>
    
      <category term="Swift" scheme="https://wgtech.github.io/categories/Programming/Language/Swift/"/>
    
    
      <category term="Programming" scheme="https://wgtech.github.io/tags/Programming/"/>
    
      <category term="Language" scheme="https://wgtech.github.io/tags/Language/"/>
    
      <category term="Swift" scheme="https://wgtech.github.io/tags/Swift/"/>
    
      <category term="Grammar" scheme="https://wgtech.github.io/tags/Grammar/"/>
    
      <category term="Literal" scheme="https://wgtech.github.io/tags/Literal/"/>
    
      <category term="Identifier" scheme="https://wgtech.github.io/tags/Identifier/"/>
    
      <category term="Keyword" scheme="https://wgtech.github.io/tags/Keyword/"/>
    
  </entry>
  
  <entry>
    <title>Swift 문법 : (1) 토큰, 표현식, 문장 (Tokens, Expressions, Statements In Swift)</title>
    <link href="https://wgtech.github.io/posts/2019/06/07/Tokens-Expressions-Statements-In-Swift/"/>
    <id>https://wgtech.github.io/posts/2019/06/07/Tokens-Expressions-Statements-In-Swift/</id>
    <published>2019-06-07T09:22:04.000Z</published>
    <updated>2019-10-28T13:52:48.698Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Swift-문법"><a href="#Swift-문법" class="headerlink" title="Swift 문법"></a>Swift 문법</h1><h2 id="토큰-Tokens"><a href="#토큰-Tokens" class="headerlink" title="토큰 (Tokens)"></a>토큰 (Tokens)</h2><ul><li>언어를 구성하는 요소들 중 가장 작은 단위. 문법적으로 더 이상 나눌 수 없는 단위</li><li>종류<ul><li>식별자, 키워드, 구두점, 연산자, 리터럴 (Identifiers, Keywords, Punctuations, Operators, Literals)</li></ul></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>+<span class="number">3</span>; <span class="comment">// 토큰은 4개 (2, +, 3, ;)</span></span><br><span class="line"><span class="number">2</span> + <span class="number">3</span> ; <span class="comment">// 토큰은 7개 (2, , +, , 3, , ;)</span></span><br></pre></td></tr></table></figure><br><h2 id="표현식-Expressions"><a href="#표현식-Expressions" class="headerlink" title="표현식 (Expressions)"></a>표현식 (Expressions)</h2><ul><li>값, 연산자, 함수들을 하나로 모여 표현하는 식, 코드를 평가했을 때 결과 값이 나오는 식. 하나 이상의 토큰이 모여서 하나 이상의 값을 도출하는 것</li></ul><blockquote><p><strong>산술 표현식 (Arithmetic Expressions)</strong></p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">7</span></span><br><span class="line">x + <span class="number">1</span> = <span class="number">8</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>논리 표현식 (Boolean Expressions)</strong></p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x &lt; <span class="number">10</span></span><br></pre></td></tr></table></figure><br><h2 id="문장-구문-문-Statements"><a href="#문장-구문-문-Statements" class="headerlink" title="문장/구문/~문 (Statements)"></a>문장/구문/~문 (Statements)</h2><ul><li>하나 이상의 표현식이 모이면 특정 작업을 실행하는 코드<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"Swift"</span></span><br><span class="line"><span class="built_in">print</span>(str)</span><br><span class="line"><span class="comment">// Objective-C 와는 달리 ; 빼도 실행 가능</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Swift-문법&quot;&gt;&lt;a href=&quot;#Swift-문법&quot; class=&quot;headerlink&quot; title=&quot;Swift 문법&quot;&gt;&lt;/a&gt;Swift 문법&lt;/h1&gt;&lt;h2 id=&quot;토큰-Tokens&quot;&gt;&lt;a href=&quot;#토큰-Tokens&quot; class=&quot;he
      
    
    </summary>
    
      <category term="Programming" scheme="https://wgtech.github.io/categories/Programming/"/>
    
      <category term="Language" scheme="https://wgtech.github.io/categories/Programming/Language/"/>
    
      <category term="Swift" scheme="https://wgtech.github.io/categories/Programming/Language/Swift/"/>
    
    
      <category term="Programming" scheme="https://wgtech.github.io/tags/Programming/"/>
    
      <category term="Language" scheme="https://wgtech.github.io/tags/Language/"/>
    
      <category term="Swift" scheme="https://wgtech.github.io/tags/Swift/"/>
    
      <category term="Grammar" scheme="https://wgtech.github.io/tags/Grammar/"/>
    
      <category term="Token" scheme="https://wgtech.github.io/tags/Token/"/>
    
      <category term="Expression" scheme="https://wgtech.github.io/tags/Expression/"/>
    
      <category term="Statement" scheme="https://wgtech.github.io/tags/Statement/"/>
    
  </entry>
  
  <entry>
    <title>Data Binding 작업 후, &#39;Found data binding errors. msg:Identifiers must have user defined types from the XML file.&#39; 발생시</title>
    <link href="https://wgtech.github.io/posts/2019/06/07/Android-Found-data-binding-Errors/"/>
    <id>https://wgtech.github.io/posts/2019/06/07/Android-Found-data-binding-Errors/</id>
    <published>2019-06-07T04:49:18.000Z</published>
    <updated>2019-10-28T13:52:48.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Data-binding-error-발생"><a href="#Data-binding-error-발생" class="headerlink" title="Data binding error 발생"></a>Data binding error 발생</h1><p>XML Layout 파일에서 Data binding을 사용하는 분들이 많습니다. <em>저를 비롯해서..</em><br>저는 사진 촬영 버튼을 누르면 저장 할 것인지 다시 촬영할 것인지, 미리보기 화면을 제공하는 기능을 구현하고 있었습니다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"android.view.View"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">"activity"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">"project.wgtech.sample.view.CameraActivity"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">"previewMode"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">"java.lang.Boolean"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 생략 --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">androidx.appcompat.widget.AppCompatImageButton</span></span></span><br><span class="line"><span class="tag">            <span class="attr">..</span> 생략 <span class="attr">..</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:onClick</span>=<span class="string">"@&#123;activity::clickCapture&#125;"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:visibility</span>=<span class="string">"@&#123;previewMode ? View.VISIBLE : View.GONE&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 생략 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위와 같이 Data binding 을 수행하고 build를 시도해보니….</p><blockquote><p><span style="color:red">****/ data binding error****<br>msg:Identifiers must have user defined types from the XML file.<br>View is missing it file: … <br>****\ data binding error</span></p></blockquote><p>라는 오류가 발생되면서 build에 실패합니다….</p><br><h1 id="왜-발생할까요"><a href="#왜-발생할까요" class="headerlink" title="왜 발생할까요?"></a>왜 발생할까요?</h1><p><strong>View is missing it</strong> 이라고 합니다.<br>XML 파일에서 해당 View를 정의하지 않아 생긴 오류라고는 하는데,</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 생략 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.appcompat.widget.AppCompatImageButton</span></span></span><br><span class="line"><span class="tag">            <span class="attr">..</span> 생략 <span class="attr">..</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:onClick</span>=<span class="string">"@&#123;activity::clickCapture&#125;"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:visibility</span>=<span class="string">"@&#123;previewMode ? View.VISIBLE : View.GONE&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 생략 --&gt;</span></span><br></pre></td></tr></table></figure><p>android:visibility 에서 <strong>View</strong> 클래스를 사용하고 있더라구요.<br>도대체 어디서 저 View 를 정의하면 되는 것인가~ 했더니! import하면 되는 것이었습니다.</p><br><h1 id="해결-방법"><a href="#해결-방법" class="headerlink" title="해결 방법"></a>해결 방법</h1><p>따라서 <strong><data></data></strong> 태그에서 View 클래스를 import 하면 됩니다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"android.view.View"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위와 같은 형식으로 <strong>&lt;data&gt;</strong> 태그안에 <strong>&lt;import&gt;</strong> 태그를 정의하고,</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"android.view.View"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">"activity"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">"project.wgtech.sample.view.CameraActivity"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">"previewMode"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">"java.lang.Boolean"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 생략 --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">androidx.appcompat.widget.AppCompatImageButton</span></span></span><br><span class="line"><span class="tag">            <span class="attr">..</span> 생략 <span class="attr">..</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:onClick</span>=<span class="string">"@&#123;activity::clickCapture&#125;"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:visibility</span>=<span class="string">"@&#123;previewMode ? View.VISIBLE : View.GONE&#125;"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 생략 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>로써, 미리보기 화면을 한 화면에서 조정할 수 있게 되었습니다!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Data-binding-error-발생&quot;&gt;&lt;a href=&quot;#Data-binding-error-발생&quot; class=&quot;headerlink&quot; title=&quot;Data binding error 발생&quot;&gt;&lt;/a&gt;Data binding error 발생&lt;/
      
    
    </summary>
    
      <category term="Programming" scheme="https://wgtech.github.io/categories/Programming/"/>
    
      <category term="Framework" scheme="https://wgtech.github.io/categories/Programming/Framework/"/>
    
      <category term="Android" scheme="https://wgtech.github.io/categories/Programming/Framework/Android/"/>
    
    
      <category term="Programming" scheme="https://wgtech.github.io/tags/Programming/"/>
    
      <category term="Framework" scheme="https://wgtech.github.io/tags/Framework/"/>
    
      <category term="Android" scheme="https://wgtech.github.io/tags/Android/"/>
    
      <category term="Data Binding" scheme="https://wgtech.github.io/tags/Data-Binding/"/>
    
      <category term="Android Studio" scheme="https://wgtech.github.io/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>APAC AWSomeDay Online Seminar 2019 : 모듈5. AWS 요금 및 지원</title>
    <link href="https://wgtech.github.io/posts/2019/05/30/APAC-AWSomeDay-Online-Seminar-2019-Module5/"/>
    <id>https://wgtech.github.io/posts/2019/05/30/APAC-AWSomeDay-Online-Seminar-2019-Module5/</id>
    <published>2019-05-30T03:15:00.000Z</published>
    <updated>2019-10-28T13:52:48.683Z</updated>
    
    <content type="html"><![CDATA[<h1 id="요금-기본-정보"><a href="#요금-기본-정보" class="headerlink" title="요금 기본 정보"></a>요금 기본 정보</h1><h2 id="지불-조건"><a href="#지불-조건" class="headerlink" title="지불 조건"></a>지불 조건</h2><h3 id="트래픽-사용량에-따른-비용-지불"><a href="#트래픽-사용량에-따른-비용-지불" class="headerlink" title="트래픽 사용량에 따른 비용 지불"></a>트래픽 사용량에 따른 비용 지불</h3><ul><li>사용하는 서비스에 대한 비용만 지불, 대규모 선결제 금액이 없습니다.</li></ul><h3 id="예약하는-경우-지불-비용-감소"><a href="#예약하는-경우-지불-비용-감소" class="headerlink" title="예약하는 경우 지불 비용 감소"></a>예약하는 경우 지불 비용 감소</h3><ul><li>전체 선결제 : AURI (All Upfront)</li><li>부분 선결제 : PRUI (Partial Upfront)</li><li>선결제 없음 : NURI (No Upfront)</li></ul><h3 id="더-많이-사용할-수록-단위당-더-적은-비용-지불"><a href="#더-많이-사용할-수록-단위당-더-적은-비용-지불" class="headerlink" title="더 많이 사용할 수록 단위당 더 적은 비용 지불"></a>더 많이 사용할 수록 단위당 더 적은 비용 지불</h3><ul><li>대량 구매 할인 실현</li></ul><h3 id="AWS-규모가-커짐에-따라-더-적은-비용-지불"><a href="#AWS-규모가-커짐에-따라-더-적은-비용-지불" class="headerlink" title="AWS 규모가 커짐에 따라 더 적은 비용 지불"></a>AWS 규모가 커짐에 따라 더 적은 비용 지불</h3><h3 id="사용자-지정-요금"><a href="#사용자-지정-요금" class="headerlink" title="사용자 지정 요금"></a>사용자 지정 요금</h3><ul><li>고유한 요구사항 있는 대용량 프로젝트에 따라 요금 선택 가능</li><li>AWS 프리티어 (최대 1년, 특정 서비스와 옵션 제한)</li></ul><br><h2 id="추가-요금-없는-AWS-서비스"><a href="#추가-요금-없는-AWS-서비스" class="headerlink" title="추가 요금 없는 AWS 서비스"></a>추가 요금 없는 AWS 서비스</h2><ul><li>Amazon VPC</li><li>AWS Elastic Beanstalk</li><li>AWS CloudFormation</li><li>AWS IAM</li><li>Auto Scaling</li><li>AWS OpsWorks</li></ul><br><h1 id="AWS-지불-내역"><a href="#AWS-지불-내역" class="headerlink" title="AWS 지불 내역"></a>AWS 지불 내역</h1><h2 id="AWS-기초-특성에-대한-비용-지불"><a href="#AWS-기초-특성에-대한-비용-지불" class="headerlink" title="AWS 기초 특성에 대한 비용 지불"></a>AWS 기초 특성에 대한 비용 지불</h2><ul><li>컴퓨팅</li><li>스토리지</li><li>아웃바운드 데이터 전송 (Amazon EC2, S3 등에서)</li></ul><h2 id="무료"><a href="#무료" class="headerlink" title="무료"></a>무료</h2><ul><li>인바운드 데이터 전송</li><li>동일 리전 내 서비스간 데이터 전송</li></ul><hr><h1 id="AWS-서비스와-가격"><a href="#AWS-서비스와-가격" class="headerlink" title="AWS 서비스와 가격"></a>AWS 서비스와 가격</h1><h2 id="Amazon-EC2"><a href="#Amazon-EC2" class="headerlink" title="Amazon EC2"></a>Amazon EC2</h2><ul><li><strong>Clock-초/시간당 청구</strong><ul><li>리소스가 실행되고 있을때만 요금 청구</li></ul></li><li><strong>인스턴스 구성</strong><ul><li>인스턴스의 물리적 용량</li><li>AWS 리전, OS, 코어 수, 메모리에 따라 요금이 변동됨.</li></ul></li></ul><h2 id="Amazon-S3"><a href="#Amazon-S3" class="headerlink" title="Amazon S3"></a>Amazon S3</h2><ul><li>요청 수 / 유형 (GET 요청에 대한 요율이 다름)</li><li>스토리지</li><li>데이터 전송</li></ul><h2 id="Amazon-EBS"><a href="#Amazon-EBS" class="headerlink" title="Amazon EBS"></a>Amazon EBS</h2><ul><li>EBS 볼륨은 인스턴스와 별개로 유지</li><li>클라우드 가상 디스크와 유사</li><li>볼륨 유형에 따라 다르게 요금 제공<ul><li>프로비저닝되는 용량에 따라 요금이 부과</li><li>범용 SSD, 프로비저닝된 IOPS(SSD), 마그네틱</li></ul></li><li>스냅샷 : 저장된 데이터의 월별 GB당 추가.</li><li>데이터 전송 : 인바운드 데이터 전송은 무료이며, 아웃바운드 데이터 전송은 계층화.</li></ul><h2 id="Amazon-RDS"><a href="#Amazon-RDS" class="headerlink" title="Amazon RDS"></a>Amazon RDS</h2><ul><li><strong>DB 구매 유형</strong><ul><li>온디맨드 데이터베이스 인스턴스 : 시간당</li><li>예약 데이터베이스 인스턴스 : 선결제 금액</li></ul></li><li><strong>다수의 DB 인스턴스</strong><ul><li>피크로드를 처리하도록 다수의 DB 인스턴스를 프로비저닝 할 때</li></ul></li><li>배포 유형<ul><li>단일 가용 영역 또는, 다중 가용 영역</li></ul></li></ul><hr><h1 id="AWS-에서-제공되는-유틸리티"><a href="#AWS-에서-제공되는-유틸리티" class="headerlink" title="AWS 에서 제공되는 유틸리티"></a>AWS 에서 제공되는 유틸리티</h1><h2 id="AWS-TCO-계산기"><a href="#AWS-TCO-계산기" class="headerlink" title="AWS TCO 계산기"></a>AWS TCO 계산기</h2><p><a href="https://awstcocalculator.com" rel="external nofollow noopener noreferrer" target="_blank"><strong>https://awstcocalculator.com</strong></a></p><ul><li>비용 절감 효과 추정</li><li>세부 보고서 제공</li><li>시뮬레이션</li></ul><h1 id="AWS-Support-플랜"><a href="#AWS-Support-플랜" class="headerlink" title="AWS Support 플랜"></a>AWS Support 플랜</h1><ul><li>도구와 전문성의 고유한 조합 제공</li><li>선제적 지침 : Technical Assistance Management (TAM)</li><li>모범 사례 : Trusted Advisor</li><li>계정 지원 : AWS Support 컨시어지</li><li>4가지의 특정 플랜 존재<ol><li>Basic Support Plan<ol><li>고객 서비스</li><li>설명서</li><li>지원 및 포럼</li><li>연중무휴 24시간</li><li>Personal Health Dashboard 액세스 지원</li></ol></li><li>Developer Support Plan<ol><li>AWS 초기 개발 및 테스트 고객을 위한 리소스<ol><li>지침 및 기술지원</li><li>AWS 신속 업무</li><li>비 Production Work 등에 대한 지원</li></ol></li></ol></li><li>Business Support Plan<ol><li>여러 서비스 활성화 되어 있거나 주요 서비스를 폭넓게 사용</li><li>확장성 및 보안성에 중요한 리소스 제공</li></ol></li><li>Enterprise Support Plan<ol><li>AWS에서 Mission Critical Work plan 등을 원하는 고객</li><li>모범사례에 따른 Work-Load 구축</li><li>기타 서비스로부터 Migration 수행을 원하는 고객사</li></ol></li></ol></li></ul><hr><h1 id="채팅창-꿀팁"><a href="#채팅창-꿀팁" class="headerlink" title="채팅창 꿀팁"></a>채팅창 꿀팁</h1><ul><li>일단 온디멘드로 시작하다가 장기로 가면 예약 인스턴스로 넘어가면 되는거 같아요.</li><li>RDS 가 비용안 비싸고 디비 데이터 보호에 아주 좋다고 하더라고요.</li><li>rds 쓰는게 HA 까지 하다보면 더 나을꺼 같아요</li><li>보안 백업 등등의 관리를 모두 할수있다 라면 ec2에</li><li>r5.large라 그리 크지않은거 쓰고 있는데 제법나오요 (reader writer구성 )</li><li>뭐 안되거나 잘못됏을때 무조건 연락해서 지원받아야됩니다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;요금-기본-정보&quot;&gt;&lt;a href=&quot;#요금-기본-정보&quot; class=&quot;headerlink&quot; title=&quot;요금 기본 정보&quot;&gt;&lt;/a&gt;요금 기본 정보&lt;/h1&gt;&lt;h2 id=&quot;지불-조건&quot;&gt;&lt;a href=&quot;#지불-조건&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="Seminar" scheme="https://wgtech.github.io/categories/Seminar/"/>
    
      <category term="Amazon Web Services" scheme="https://wgtech.github.io/categories/Seminar/Amazon-Web-Services/"/>
    
      <category term="AWSomeDay" scheme="https://wgtech.github.io/categories/Seminar/Amazon-Web-Services/AWSomeDay/"/>
    
    
      <category term="Seminar" scheme="https://wgtech.github.io/tags/Seminar/"/>
    
      <category term="Amazon Web Services" scheme="https://wgtech.github.io/tags/Amazon-Web-Services/"/>
    
      <category term="AWS" scheme="https://wgtech.github.io/tags/AWS/"/>
    
      <category term="AWSomeDay" scheme="https://wgtech.github.io/tags/AWSomeDay/"/>
    
      <category term="Environment" scheme="https://wgtech.github.io/tags/Environment/"/>
    
      <category term="Cloud" scheme="https://wgtech.github.io/tags/Cloud/"/>
    
      <category term="Cloud Services" scheme="https://wgtech.github.io/tags/Cloud-Services/"/>
    
  </entry>
  
  <entry>
    <title>APAC AWSomeDay Online Seminar 2019 : 모듈4. AWS 아키텍쳐 설계</title>
    <link href="https://wgtech.github.io/posts/2019/05/30/APAC-AWSomeDay-Online-Seminar-2019-Module4/"/>
    <id>https://wgtech.github.io/posts/2019/05/30/APAC-AWSomeDay-Online-Seminar-2019-Module4/</id>
    <published>2019-05-30T02:36:00.000Z</published>
    <updated>2019-10-28T13:52:48.682Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AWS-Well-Architected-Framework"><a href="#AWS-Well-Architected-Framework" class="headerlink" title="AWS Well-Architected Framework"></a>AWS Well-Architected Framework</h1><ul><li>아키텍처를 평가하고 개선</li><li>설계 의사 결정이 비즈니스</li></ul><h1 id="AWS-Well-Architected-Framework-5가지-원칙"><a href="#AWS-Well-Architected-Framework-5가지-원칙" class="headerlink" title="AWS Well-Architected Framework 5가지 원칙"></a>AWS Well-Architected Framework 5가지 원칙</h1><h2 id="보안"><a href="#보안" class="headerlink" title="보안"></a>보안</h2><ul><li>Identity and Access Management (IAM)</li><li>탐지 제어</li><li>인프라 보호</li><li>데이터 보호</li><li>인시던트 대응</li></ul><br><h2 id="안정성"><a href="#안정성" class="headerlink" title="안정성"></a>안정성</h2><ol><li>문제/장애로부터 복구</li><li>기반, 변경 관리 및 장애 관리 모범 사례 적용</li><li>장애 예측, 대응 및 방지</li></ol><h3 id="안정성-원칙-설계-원칙"><a href="#안정성-원칙-설계-원칙" class="headerlink" title="안정성 원칙 설계 원칙"></a>안정성 원칙 설계 원칙</h3><ul><li>복구 절차 테스트</li><li>자동 복구</li><li>수평 확장</li><li>용량 추정 불필요</li><li>자동화 변경 사항 관리</li></ul><br><h2 id="성능-효율성"><a href="#성능-효율성" class="headerlink" title="성능 효율성"></a>성능 효율성</h2><h3 id="성능-효율성-원칙"><a href="#성능-효율성-원칙" class="headerlink" title="성능 효율성 원칙"></a>성능 효율성 원칙</h3><ul><li>선택 : 사용자 지정 가능한 솔루션 선택, 보유 워크아웃에 따라 다름.</li><li>검토 : 지속적 혁신을 위한 검토</li><li>모니터링 : AWS 서비스 모니터링</li><li>절충 : AWS 서비스 절충 고려</li></ul><h3 id="성능-효율성-원칙-설계-원칙"><a href="#성능-효율성-원칙-설계-원칙" class="headerlink" title="성능 효율성 원칙 : 설계 원칙"></a>성능 효율성 원칙 : 설계 원칙</h3><ul><li>고급 기술을 대중화</li><li>몇 분 만에 전 세계에 배포</li><li>Serverless Architecture 사용</li><li>실험 빈도 증가</li><li>기술적 동조 적용</li></ul><br><h2 id="비용-최적화"><a href="#비용-최적화" class="headerlink" title="비용 최적화"></a>비용 최적화</h2><h3 id="비용-최적화-원칙"><a href="#비용-최적화-원칙" class="headerlink" title="비용 최적화 원칙"></a>비용 최적화 원칙</h3><ul><li>비용 효율적인 리소스 사용</li><li>수요에 맞춰 공급</li><li>지출에 대한 인식 고취</li><li>시간을 두고 최적화</li></ul><h3 id="비용-최적화-원칙-설계-원칙"><a href="#비용-최적화-원칙-설계-원칙" class="headerlink" title="비용 최적화 원칙 : 설계 원칙"></a>비용 최적화 원칙 : 설계 원칙</h3><ul><li>소비 모델 채택</li><li>전반적인 효율성 측정</li><li>데이터 센터 운영에 지출하는 비용 절감 또는 중단</li><li>지출 속성 파악 및 분석</li><li>관리형 서비스 사용</li></ul><br><h2 id="운영-우수성"><a href="#운영-우수성" class="headerlink" title="운영 우수성"></a>운영 우수성</h2><h3 id="참조-아키텍쳐-1-내결함성"><a href="#참조-아키텍쳐-1-내결함성" class="headerlink" title="참조 아키텍쳐 : 1. 내결함성"></a>참조 아키텍쳐 : 1. 내결함성</h3><ul><li>시스템이 작동 가능 상태를 유지 할 수 있는 능력</li><li>애플리케이션 구성요소의 내장된 중복성</li></ul><h3 id="참조-아키텍쳐-2-고가용성"><a href="#참조-아키텍쳐-2-고가용성" class="headerlink" title="참조 아키텍쳐 : 2. 고가용성"></a>참조 아키텍쳐 : 2. 고가용성</h3><ul><li>시스템이 일반적으로 작동하고 액세스 가능 상태 유지</li><li>가동 중단을 최소화</li><li>필요한 인적 개입을 최소화</li><li>사전 비용 투자를 최소화</li></ul><br><h1 id="고가용성-온프레미스와-AWS-비교"><a href="#고가용성-온프레미스와-AWS-비교" class="headerlink" title="고가용성 온프레미스와 AWS 비교"></a>고가용성 온프레미스와 AWS 비교</h1><h2 id="기존-온프레미스"><a href="#기존-온프레미스" class="headerlink" title="기존 (온프레미스)"></a>기존 (온프레미스)</h2><ul><li>높은 비용</li><li>미션 크리티컬 애플리케이션만 해당</li></ul><h2 id="AWS"><a href="#AWS" class="headerlink" title="AWS"></a>AWS</h2><ul><li>다수의 서버</li><li>가용 영역</li><li>리전</li><li>내결함성 서비스</li></ul><br><h1 id="탄력적-로드-밸런서-ELB"><a href="#탄력적-로드-밸런서-ELB" class="headerlink" title="탄력적 로드 밸런서 : ELB"></a>탄력적 로드 밸런서 : ELB</h1><ul><li>수신 트래픽(로드) 분산</li><li>Amazon CloudWatch로 지표 전송</li><li>트리거/알림<ul><li>긴 지연 시간 또는 과도한 사용</li></ul></li></ul><h1 id="탄력적-IP-주소"><a href="#탄력적-IP-주소" class="headerlink" title="탄력적 IP 주소"></a>탄력적 IP 주소</h1><ul><li>동적 클라우드 컴퓨팅을 위한 고정 IP 주소</li><li>장애가 발생하는 경우, 장애를 마스킹</li><li>인스턴스에 장애가 발생해도 애플리케이션에 계속 액세스합니다.</li></ul><h1 id="Amazon-Route-53"><a href="#Amazon-Route-53" class="headerlink" title="Amazon Route 53"></a>Amazon Route 53</h1><ul><li>신뢰할 수 있는 DNS</li><li>단순 라우팅, 지연시간 기반 라우팅, 상태 확인, DNS 장애 조치, 지리 위치 라우팅</li></ul><h1 id="Amazon-CloudWatch"><a href="#Amazon-CloudWatch" class="headerlink" title="Amazon CloudWatch"></a>Amazon CloudWatch</h1><ul><li>사용 지표를 설정하여, 임계 시간 이상을 사용하거나 임계치 이상을 설정시 자동으로 알림</li></ul><h1 id="기타-내결함성-도구"><a href="#기타-내결함성-도구" class="headerlink" title="기타 내결함성 도구"></a>기타 내결함성 도구</h1><ul><li>Amazon Simple Queue Service (Amazon SQS)</li><li>Amazon Simple Storage Service (S3)</li><li>Amazon SimpleDB</li><li>Amazon Relational Database Service</li></ul><br><h1 id="참조-아키텍처-웹-호스팅"><a href="#참조-아키텍처-웹-호스팅" class="headerlink" title="참조 아키텍처 - 웹 호스팅"></a>참조 아키텍처 - 웹 호스팅</h1><h2 id="AWS에서-웹-호스팅"><a href="#AWS에서-웹-호스팅" class="headerlink" title="AWS에서 웹 호스팅"></a>AWS에서 웹 호스팅</h2><ul><li>빠름</li><li>간단함</li><li>저렴한비용</li></ul><h2 id="일반적인-웹-애플리케이션"><a href="#일반적인-웹-애플리케이션" class="headerlink" title="일반적인 웹 애플리케이션"></a>일반적인 웹 애플리케이션</h2><ul><li>기업 웹 사이트</li><li>콘텐츠 관리 시스템</li><li>소셜 미디어 애플리케이션 개발</li><li>사내 SharePoint 사이트</li></ul><hr><h1 id="채팅창-꿀팁"><a href="#채팅창-꿀팁" class="headerlink" title="채팅창 꿀팁"></a>채팅창 꿀팁</h1><ul><li>예전에 기회가 되서 서버 1개를 그냥 오픈해서 열어둔적이 있었는데.. 1달만에 서버 초토화됬음.. 별별..이상한게 엄청 깔려서..</li><li>회사내 프로젝트관리가 체계적이지 않음 보안에 구멍이 뚫리기 쉽더군요 ..</li><li>AWS 를 통해 VPC를 설정하면 기본적으로 N-ACL 설정이 동반되게 됩니다</li><li>좀더 어플리케이션 단 얘기긴하지만 웹서버인 경우 WAF를 쓰면 DDOS가 있더라도 어느정도는 막아주는거 같더라구요. 물론 발생된 트래픽은 과금되지만.</li><li>AWS Shield Advanced를 활용하면 DDos 트래픽에 대한 비용 보호 제도가 있다고 합니다<ul><li><a href="https://aws.amazon.com/ko/shield/pricing/" rel="external nofollow noopener noreferrer" target="_blank">https://aws.amazon.com/ko/shield/pricing/</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;AWS-Well-Architected-Framework&quot;&gt;&lt;a href=&quot;#AWS-Well-Architected-Framework&quot; class=&quot;headerlink&quot; title=&quot;AWS Well-Architected Framework&quot;&gt;
      
    
    </summary>
    
      <category term="Seminar" scheme="https://wgtech.github.io/categories/Seminar/"/>
    
      <category term="Amazon Web Services" scheme="https://wgtech.github.io/categories/Seminar/Amazon-Web-Services/"/>
    
      <category term="AWSomeDay" scheme="https://wgtech.github.io/categories/Seminar/Amazon-Web-Services/AWSomeDay/"/>
    
    
      <category term="Seminar" scheme="https://wgtech.github.io/tags/Seminar/"/>
    
      <category term="Amazon Web Services" scheme="https://wgtech.github.io/tags/Amazon-Web-Services/"/>
    
      <category term="AWS" scheme="https://wgtech.github.io/tags/AWS/"/>
    
      <category term="AWSomeDay" scheme="https://wgtech.github.io/tags/AWSomeDay/"/>
    
      <category term="Environment" scheme="https://wgtech.github.io/tags/Environment/"/>
    
      <category term="Cloud" scheme="https://wgtech.github.io/tags/Cloud/"/>
    
      <category term="Cloud Services" scheme="https://wgtech.github.io/tags/Cloud-Services/"/>
    
      <category term="Architecture" scheme="https://wgtech.github.io/tags/Architecture/"/>
    
  </entry>
  
  <entry>
    <title>APAC AWSomeDay Online Seminar 2019 : 모듈3. AWS 보안</title>
    <link href="https://wgtech.github.io/posts/2019/05/30/APAC-AWSomeDay-Online-Seminar-2019-Module3/"/>
    <id>https://wgtech.github.io/posts/2019/05/30/APAC-AWSomeDay-Online-Seminar-2019-Module3/</id>
    <published>2019-05-30T01:55:00.000Z</published>
    <updated>2019-10-28T13:52:48.682Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AWS-보안-소개"><a href="#AWS-보안-소개" class="headerlink" title="AWS 보안 소개"></a>AWS 보안 소개</h1><ul><li>암호화 기능</li><li>키 관리 옵션 : AWS Key Management Service</li><li>하드웨어 기반 암호화 키 스토리지 옵션 : AWS CloudHSM</li><li>액세스 제어 및 관리<ul><li>Identity and Access Management (IAM)</li><li>Multi-factor authentication MFA</li><li>기업 디렉터리와 통합 및 연동</li><li>Amazon Cognito 서비스</li><li>AWS SSO</li></ul></li></ul><h1 id="클라우드에서의-보안"><a href="#클라우드에서의-보안" class="headerlink" title="클라우드에서의 보안"></a>클라우드에서의 보안</h1><h2 id="AWS-Service-Catalog"><a href="#AWS-Service-Catalog" class="headerlink" title="AWS Service Catalog"></a>AWS Service Catalog</h2><ul><li>공통 IT 서비스를 중앙에서 관리</li><li>일관된 거버넌스 구현</li><li>규정 준수 요건 충족</li><li>승인된 IT 서비스를 신속하게 배포</li></ul><h1 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h1><ol><li>AWS와 고객은 보안 책임을 공유</li><li>고객은 보안 조치에 대해 완전한 제어권 보유</li><li>고객은 AWS Service Catalog 를 사용할 수 있음</li><li>‘인프라’ 서비스</li></ol><hr><h1 id="AWS-Identity-and-Access-Management-IAM"><a href="#AWS-Identity-and-Access-Management-IAM" class="headerlink" title="AWS Identity and Access Management (IAM)"></a>AWS Identity and Access Management (IAM)</h1><ul><li>사용자와 그룹을 생성</li><li>권한과 역할을 부여</li><li>기능<ol><li>사용자와 액세스 권한을 관리</li><li>역할과 그 권한을 관리</li><li>연동 사용자와 해당 권한을 관리</li></ol></li><li>모범 사례<ol><li>AWS 루트 계정 액세스 키 삭제</li><li>Multi-Factor Authentication (MFA) 활성화</li><li>IAM 사용자에게 꼭 필요한 권한만 부여</li><li>IAM 그룹 사용</li><li>IAM 암호 정책을 적용</li><li>역할<ul><li>애플리케이션에 대해 역할을 사용</li><li>자격 증명을 공유하는 방법 보다는 역할을 직접 사용</li></ul></li><li>자격 증명을 주기적으로 교체, 불필요한 사용자와 자격 증명을 제거</li><li>보안 강화를 위해 정책 조건 사용</li><li>AWS 계정 활동 모니터링</li></ol></li></ul><h1 id="AWS-보안-및-규정-준수-프로그램"><a href="#AWS-보안-및-규정-준수-프로그램" class="headerlink" title="AWS 보안 및 규정 준수 프로그램"></a>AWS 보안 및 규정 준수 프로그램</h1><ul><li>AWS 와 고객이 IT 환경에 대한 제어권을 공유</li></ul><hr><h1 id="채팅창-꿀팁"><a href="#채팅창-꿀팁" class="headerlink" title="채팅창 꿀팁"></a>채팅창 꿀팁</h1><ul><li>클라우드 써보시려면 구글 추천합니다. AWS 는 비용이 지출될 수 있는데, 구글 300 달러안에서 다 할 수 있어서 입문용으로 좋아요.</li><li><a href="https://blog.naver.com/gksxoehd5" rel="external nofollow noopener noreferrer" target="_blank">https://blog.naver.com/gksxoehd5</a></li><li><a href="http://www.yes24.com/Product/Goods/69304366?scode=032&OzSrank=1" rel="external nofollow noopener noreferrer" target="_blank">http://www.yes24.com/Product/Goods/69304366?scode=032&amp;OzSrank=1</a></li><li>저는 개발자라서, 코드커밋하고 엘라스틱 아이피랑 EC2, RDS, R3 정도 쓰고 있어요 소소하게 유료결제 하면서요</li><li>요즘 구직 사이트보면 AWS  GCP 작업한다고 사람 뽑는 것 여럿 있더라구요.</li><li><a href="https://aws.amazon.com/ko/certification/" rel="external nofollow noopener noreferrer" target="_blank">https://aws.amazon.com/ko/certification/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;AWS-보안-소개&quot;&gt;&lt;a href=&quot;#AWS-보안-소개&quot; class=&quot;headerlink&quot; title=&quot;AWS 보안 소개&quot;&gt;&lt;/a&gt;AWS 보안 소개&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;암호화 기능&lt;/li&gt;
&lt;li&gt;키 관리 옵션 : AWS Key Ma
      
    
    </summary>
    
      <category term="Seminar" scheme="https://wgtech.github.io/categories/Seminar/"/>
    
      <category term="Amazon Web Services" scheme="https://wgtech.github.io/categories/Seminar/Amazon-Web-Services/"/>
    
      <category term="AWSomeDay" scheme="https://wgtech.github.io/categories/Seminar/Amazon-Web-Services/AWSomeDay/"/>
    
    
      <category term="Seminar" scheme="https://wgtech.github.io/tags/Seminar/"/>
    
      <category term="Amazon Web Services" scheme="https://wgtech.github.io/tags/Amazon-Web-Services/"/>
    
      <category term="AWS" scheme="https://wgtech.github.io/tags/AWS/"/>
    
      <category term="AWSomeDay" scheme="https://wgtech.github.io/tags/AWSomeDay/"/>
    
      <category term="Environment" scheme="https://wgtech.github.io/tags/Environment/"/>
    
      <category term="Cloud" scheme="https://wgtech.github.io/tags/Cloud/"/>
    
      <category term="Cloud Services" scheme="https://wgtech.github.io/tags/Cloud-Services/"/>
    
      <category term="Security" scheme="https://wgtech.github.io/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>APAC AWSomeDay Online Seminar 2019 : 모듈2. AWS 핵심 서비스</title>
    <link href="https://wgtech.github.io/posts/2019/05/30/APAC-AWSomeDay-Online-Seminar-2019-Module2/"/>
    <id>https://wgtech.github.io/posts/2019/05/30/APAC-AWSomeDay-Online-Seminar-2019-Module2/</id>
    <published>2019-05-30T00:15:00.000Z</published>
    <updated>2019-10-28T13:52:48.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AWS-핵심-서비스를-이해하기-위한-주요-키워드"><a href="#AWS-핵심-서비스를-이해하기-위한-주요-키워드" class="headerlink" title="AWS 핵심 서비스를 이해하기 위한 주요 키워드"></a>AWS 핵심 서비스를 이해하기 위한 주요 키워드</h1><h2 id="리전"><a href="#리전" class="headerlink" title="리전"></a>리전</h2><ul><li>Americas</li><li>Europe / Middle East / Africa</li><li>Asia / Pacific</li></ul><h2 id="가용-영역"><a href="#가용-영역" class="headerlink" title="가용 영역"></a>가용 영역</h2><ul><li>장애로부터 영역을 보호</li><li>고가용성을 제공하도록 설계됨</li><li>다른 영역을 통해 요청을 처리</li></ul><h2 id="엣지-로케이션"><a href="#엣지-로케이션" class="headerlink" title="엣지 로케이션"></a>엣지 로케이션</h2><ul><li>Amazon CloudFront</li><li>Amazon Route 53</li><li>AWS Shield</li><li>AWS Web Application Firewall</li><li>Lambda@Edge 컴퓨팅</li></ul><br><h1 id="AWS-보안"><a href="#AWS-보안" class="headerlink" title="AWS 보안"></a>AWS 보안</h1><ul><li>가상 방화벽 제공</li><li>규칙을 통해 인스턴스에 대한 액세스를 제어</li><li>AWS Management Console을 통해 관리 (웹 티어, 애플리케이션 티어, 데이터베이스 티어 그룹별로 설정 가능)</li></ul><h1 id="AWS-컴퓨팅-서비스의-종류"><a href="#AWS-컴퓨팅-서비스의-종류" class="headerlink" title="AWS 컴퓨팅 서비스의 종류"></a>AWS 컴퓨팅 서비스의 종류</h1><h2 id="AWS"><a href="#AWS" class="headerlink" title="AWS"></a>AWS</h2><ul><li>유연성</li><li>비용 효율적</li></ul><h2 id="Amazon-EC2-유연한-구성-및-제어"><a href="#Amazon-EC2-유연한-구성-및-제어" class="headerlink" title="Amazon EC2 : 유연한 구성 및 제어"></a>Amazon EC2 : 유연한 구성 및 제어</h2><ul><li>탄력적인 컴퓨팅 클라우드</li><li>사용한만큼 지불</li><li>폭넓은 HW/SW 선택 가능</li><li>전세계에서 호스팅</li><li>그 외 다수</li></ul><h2 id="AWS-Lambda"><a href="#AWS-Lambda" class="headerlink" title="AWS Lambda"></a>AWS Lambda</h2><ul><li>사용한 만큼만 비용 지불, 관리 불필요</li></ul><h2 id="Amazon-Lightsail"><a href="#Amazon-Lightsail" class="headerlink" title="Amazon Lightsail"></a>Amazon Lightsail</h2><ul><li>가상 프라이빗 서버 시작, 간편한 웹 및 애플리케이션 서버 관리</li></ul><h2 id="Amazon-ECS"><a href="#Amazon-ECS" class="headerlink" title="Amazon ECS"></a>Amazon ECS</h2><ul><li>관리형 컨테이너, 뛰어난 확장성, 뛰어난 성능</li></ul><h2 id="AWS-Fargate"><a href="#AWS-Fargate" class="headerlink" title="AWS Fargate"></a>AWS Fargate</h2><ul><li>클러스터를 직접 관리나 상호작용 할 필요 없어 컨테이너를 관리하는 기술</li></ul><h2 id="Amazon-EKS"><a href="#Amazon-EKS" class="headerlink" title="Amazon EKS"></a>Amazon EKS</h2><ul><li>자체 Kubernetes 클러스터 운용 필요 없이 클러스터를 관리하는 기술</li></ul><br><h1 id="Amazon-Elastic-Block-Service"><a href="#Amazon-Elastic-Block-Service" class="headerlink" title="Amazon Elastic Block Service"></a>Amazon Elastic Block Service</h1><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><ul><li>EC2 인스턴스를 위한 사용자 지정 가능한 영구 블록 스토리지</li><li>HDD 및 SSD 유형</li><li>동일한 가용 영역에 복제됨</li><li>백업용 스냅샷</li><li>쉽고 투명한 암호화</li></ul><h2 id="가용성"><a href="#가용성" class="headerlink" title="가용성"></a>가용성</h2><ul><li>내구성이 있으며 자동으로 복제됨</li></ul><h2 id="드라이브-유형"><a href="#드라이브-유형" class="headerlink" title="드라이브 유형"></a>드라이브 유형</h2><ul><li>마그네틱 또는 SSD, 요구사항에 가장 적합한 스토리지</li></ul><h2 id="스냅샷"><a href="#스냅샷" class="headerlink" title="스냅샷"></a>스냅샷</h2><ul><li>특정 시점 스냅샷 생성, 언제든지 새로운 볼륨 다시 생성</li></ul><h2 id="암호화"><a href="#암호화" class="headerlink" title="암호화"></a>암호화</h2><ul><li>추가 비용 없이 암호화된 EBS 볼륨 생성 가능</li></ul><h2 id="탄력성"><a href="#탄력성" class="headerlink" title="탄력성"></a>탄력성</h2><ul><li>용량 증가, 다른 유형으로 변경</li></ul><br><h1 id="Amazon-S3"><a href="#Amazon-S3" class="headerlink" title="Amazon S3"></a>Amazon S3</h1><h2 id="특징-1"><a href="#특징-1" class="headerlink" title="특징"></a>특징</h2><ul><li>완전관리형 클라우드 스토리지 서비스</li><li>풍부한 보안 제어 항목</li></ul><h2 id="기능"><a href="#기능" class="headerlink" title="기능"></a>기능</h2><ul><li>객체를 사실상 무제한으로 저장</li><li>언제 어디든 액세스</li></ul><br><h1 id="Amazon-RDS"><a href="#Amazon-RDS" class="headerlink" title="Amazon RDS"></a>Amazon RDS</h1><h2 id="특징-2"><a href="#특징-2" class="headerlink" title="특징"></a>특징</h2><ul><li>뛰어난 확장성</li><li>고성능</li><li>관리 용이성</li><li>가용성 및 내구성</li><li>보안 및 규정 준수</li></ul><h2 id="사용사례"><a href="#사용사례" class="headerlink" title="사용사례"></a>사용사례</h2><ul><li>웹 및 모바일 애플리케이션 (높은 처리량, 탁월한 스토리지 확장성, 고가용성)</li><li>중소기업 전자상거래 애플리케이션 (저렴한 데이터베이스, 데이터 보안, 완전관리형 솔루션)</li><li>모바일 및 온라인 게임 (빠르게 증가하는 용량, 자동 조정, 데이터베이스 모니터링)</li></ul><hr><h1 id="1-1-QnA"><a href="#1-1-QnA" class="headerlink" title="1:1 QnA"></a>1:1 QnA</h1><ul><li>AMI 인스턴스 세부정보 구성에서 ‘스팟 인스턴스 요청’은 무슨 의미인가요?</li><li>스팟 인스턴스라는 요금 옵션이 따로 있습니다. 최대 90%까지 저렴하게 인스턴스를 사용할 수 있지만 경우에 따라 인스턴스를 회수 당할 수도 있다는 예외 상황이 있습다. 자세한 내용은 링크를 참조 부탁드립니다. <a href="https://aws.amazon.com/ko/ec2/spot/" rel="external nofollow noopener noreferrer" target="_blank">https://aws.amazon.com/ko/ec2/spot/</a></li></ul><hr><h1 id="채팅창-꿀팁"><a href="#채팅창-꿀팁" class="headerlink" title="채팅창 꿀팁"></a>채팅창 꿀팁</h1><ul><li>웹서버면서 최소비용 유지하실거면 t2.small도 괜찮구요 못버티면 m4.large 나 m5.large추천드려요. 다른 프로젝트에서 c4.large, c5.large쓰는 곳도 있었는데 m타입 괜춘해요</li><li>t2보다 t3가 가성비가 좋은것 같던데여</li><li>m타입이 비용적인 부분으로 많이 부담스러우시면 현재 t2에서 t3로바꾸시는것도 추천드려요 t3는 t2 상위버전인데 비용적인 부분으로 더 저렴하게 나왔고 cpu를 평소에는 cpu를 적게 사용하다가 이벤트 같은거 하실때 사용량을 순간 확장기능이있어서 실용성으로는 좋다고 봐요 ㅎㅎ</li><li>라이트세일과 ec2 동일 최저사양으로 요금비교하면 많이 차이나나요? 기능적으로 오는 비용은 배제하구요</li><li>시스템이 크리티컬 하지 않으면 20 % 에 로드 밸런싱 거시는게 더 좋지 않을 까요??</li><li>EC2 사용시간으로 과금되기때문에 오토스케일링에 대한 별도 과금은 없습니다.</li><li>항상 조심하세요 s3 퍼블릭으로 해서 보안문제가 발생한 경우가 많아서</li><li>ec2나 라이트세일에 db 커스텀으로 설치해서 사용하는게 저렴한가요. 아니면 rds를 따로 사용하는게 저렴한가요?<br>→ 로그량에 따라 S3 사용하는 것도 괜찮다.</li><li>RDS 페일오버 괜찮아졌어요 .초창기엔 페일오버 하는데 시간이 걸려서 서비스가 간헐적으로 끊겨서 에러 나곤 했었어요</li><li>로그같이 지속적으로 쌓이는 데이터의 경우 데이터가 많아지면 비용이 증가하기 때문에 그런 경우 S3 에 저장하기도 합니다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;AWS-핵심-서비스를-이해하기-위한-주요-키워드&quot;&gt;&lt;a href=&quot;#AWS-핵심-서비스를-이해하기-위한-주요-키워드&quot; class=&quot;headerlink&quot; title=&quot;AWS 핵심 서비스를 이해하기 위한 주요 키워드&quot;&gt;&lt;/a&gt;AWS 핵심 서
      
    
    </summary>
    
      <category term="Seminar" scheme="https://wgtech.github.io/categories/Seminar/"/>
    
      <category term="Amazon Web Services" scheme="https://wgtech.github.io/categories/Seminar/Amazon-Web-Services/"/>
    
      <category term="AWSomeDay" scheme="https://wgtech.github.io/categories/Seminar/Amazon-Web-Services/AWSomeDay/"/>
    
    
      <category term="Seminar" scheme="https://wgtech.github.io/tags/Seminar/"/>
    
      <category term="Amazon Web Services" scheme="https://wgtech.github.io/tags/Amazon-Web-Services/"/>
    
      <category term="AWS" scheme="https://wgtech.github.io/tags/AWS/"/>
    
      <category term="AWSomeDay" scheme="https://wgtech.github.io/tags/AWSomeDay/"/>
    
      <category term="Environment" scheme="https://wgtech.github.io/tags/Environment/"/>
    
      <category term="Cloud" scheme="https://wgtech.github.io/tags/Cloud/"/>
    
      <category term="Cloud Services" scheme="https://wgtech.github.io/tags/Cloud-Services/"/>
    
  </entry>
  
  <entry>
    <title>APAC AWSomeDay Online Seminar 2019 : 모듈1. AWS 클라우드 개념</title>
    <link href="https://wgtech.github.io/posts/2019/05/30/APAC-AWSomeDay-Online-Seminar-2019-Module1/"/>
    <id>https://wgtech.github.io/posts/2019/05/30/APAC-AWSomeDay-Online-Seminar-2019-Module1/</id>
    <published>2019-05-29T23:36:00.000Z</published>
    <updated>2019-10-28T13:52:48.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="클라우드란"><a href="#클라우드란" class="headerlink" title="클라우드란?"></a>클라우드란?</h1><ul><li>인터넷을 통해 IT 리소스와 애플리케이션을 온디맨드로 제공되는 서비스</li></ul><h1 id="민첩성에-대한-3가지-요소"><a href="#민첩성에-대한-3가지-요소" class="headerlink" title="민첩성에 대한 3가지 요소"></a>민첩성에 대한 3가지 요소</h1><ul><li>속도, 실험, 변화</li></ul><h3 id="민첩성-증진을-위한-필요-사항"><a href="#민첩성-증진을-위한-필요-사항" class="headerlink" title="민첩성 증진을 위한 필요 사항"></a>민첩성 증진을 위한 필요 사항</h3><ol><li>속도와 글로벌 접근성 향상</li><li>실험 증가<ul><li>코드로서의 운영</li><li>안전한 실험</li><li>서로 다른 구성을 사용해 테스트</li><li>AWS CloudFormation 을 사용한 템플릿화된 환경</li></ul></li><li>혁신 향상<ul><li>낮은 비용/위험의 신속한 실험</li><li>더 많은 실험을 더 자주 수행</li></ul></li><li>AWS 인프라<ul><li>컴퓨팅 리소스의 탄력성, 확장성 및 안정성</li><li>리전</li><li>가용 영역</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;클라우드란&quot;&gt;&lt;a href=&quot;#클라우드란&quot; class=&quot;headerlink&quot; title=&quot;클라우드란?&quot;&gt;&lt;/a&gt;클라우드란?&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;인터넷을 통해 IT 리소스와 애플리케이션을 온디맨드로 제공되는 서비스&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
      <category term="Seminar" scheme="https://wgtech.github.io/categories/Seminar/"/>
    
      <category term="Amazon Web Services" scheme="https://wgtech.github.io/categories/Seminar/Amazon-Web-Services/"/>
    
      <category term="AWSomeDay" scheme="https://wgtech.github.io/categories/Seminar/Amazon-Web-Services/AWSomeDay/"/>
    
    
      <category term="Seminar" scheme="https://wgtech.github.io/tags/Seminar/"/>
    
      <category term="Amazon Web Services" scheme="https://wgtech.github.io/tags/Amazon-Web-Services/"/>
    
      <category term="AWS" scheme="https://wgtech.github.io/tags/AWS/"/>
    
      <category term="AWSomeDay" scheme="https://wgtech.github.io/tags/AWSomeDay/"/>
    
      <category term="Environment" scheme="https://wgtech.github.io/tags/Environment/"/>
    
      <category term="Cloud" scheme="https://wgtech.github.io/tags/Cloud/"/>
    
      <category term="Cloud Services" scheme="https://wgtech.github.io/tags/Cloud-Services/"/>
    
  </entry>
  
  <entry>
    <title>macOS로 CPU용 Tensorflow 직접 빌드해보기</title>
    <link href="https://wgtech.github.io/posts/2019/05/29/Lets-Build-Tensorflow-CPU-With-Your-Mac/"/>
    <id>https://wgtech.github.io/posts/2019/05/29/Lets-Build-Tensorflow-CPU-With-Your-Mac/</id>
    <published>2019-05-29T07:04:00.000Z</published>
    <updated>2019-10-28T13:52:48.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tensorflow-나도-해보자"><a href="#Tensorflow-나도-해보자" class="headerlink" title="Tensorflow 나도 해보자"></a>Tensorflow 나도 해보자</h1><p>저는 몇년전부터 주변에서 다들 텐서플로우 텐서플로우..하길래 궁금했고, <a href="/2018/07/07/Google-IO-Extended-Incheon-2018-Whats-New-In-Tensorflow">Google I/O 세미나</a>를 통해 접했습니다.<br>제대로 접해보는 기회가 딱히 없었고, 그 땐 머신 러닝이나 딥러닝에 크게 관심은 없었습니다.<br>그러다가, 최근에 장기간 교육을 받았는데 그 교육을 통해서 Tensorflow 에 대해 제대로 접해보기도 했었습니다.<br>그리고 그 교육을 통해서 <a href="https://pentacore.gitbook.io/notebook" rel="external nofollow noopener noreferrer" target="_blank">Notebook</a> 프로젝트도 완성했구요.</p><h1 id="‘CPU’로-Tensorflow-돌리고-싶어요"><a href="#‘CPU’로-Tensorflow-돌리고-싶어요" class="headerlink" title="‘CPU’로 Tensorflow 돌리고 싶어요"></a>‘CPU’로 Tensorflow 돌리고 싶어요</h1><p><a href="https://www.facebook.com/TRobotics/posts/1275081972595915/" rel="external nofollow noopener noreferrer" target="_blank">머신러닝 라이브러리 돌릴 땐 GPU가 최고</a>라고 하네요.<br>왜냐하면, <a href="https://buttercoconut.xyz/157/" rel="external nofollow noopener noreferrer" target="_blank">CPU보다 GPU가 코어 수가 많아, 많은 연산을 병렬로 동시에 할 수 있기 때문이죠.</a><br>즉, 연산을 생각할 때 가성비(?)가 CPU 보다 크기 때문입니다.</p><p><strong><em>그러나</em></strong></p><p>저는 Macbook Pro 씁니다. 심지어 2015년 하반기 버전이죠..<br>이 맥북은 ThunderBolt 2 방식만 지원되서, 심지어 외장 그래픽카드 성능을 100% 다 뽑을 수도 없습니다.</p><p><strong><em>그래서</em></strong></p><blockquote><p><strong>‘Mac의 CPU’로 Tensorflow 돌릴겁니다..</strong></p></blockquote><br><h2 id="그런데-너무-느린데요"><a href="#그런데-너무-느린데요" class="headerlink" title="그런데 너무 느린데요"></a>그런데 너무 느린데요</h2><p>일단 CPU보다 GPU가 훨씬 빠른 건 사실입니다… :(</p><h2 id="GPU가-없어요-GPU-비싸요"><a href="#GPU가-없어요-GPU-비싸요" class="headerlink" title="GPU가 없어요. GPU 비싸요."></a>GPU가 없어요. GPU 비싸요.</h2><p>모델 학습을 시키는데,</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">... I tensorflow/core/platform/cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA</span><br></pre></td></tr></table></figure><p>위와 같은 메시지가 뜨더군요.</p><p>이 메시지는 현재 <strong>설치된 Tensorflow 패키지는, CPU의 연산을 다 사용하여 더 좋은 연산 아키텍쳐에 대응하도록 빌드되지 않았다</strong>는 것입니다.</p><p>그러니까 <a href="https://pypi.org/project/tensorflow/" rel="external nofollow noopener noreferrer" target="_blank">pip</a>로 설치하면, 호환성 또는 범용성이라는 명목하에 <strong>CPU 성능을 제대로 뽑아주지 못한다</strong>는 거죠.</p><h1 id="사용하는-CPU에-최적화된-Tensorflow-패키지를-빌드하기"><a href="#사용하는-CPU에-최적화된-Tensorflow-패키지를-빌드하기" class="headerlink" title="사용하는 CPU에 최적화된 Tensorflow 패키지를 빌드하기"></a>사용하는 CPU에 최적화된 Tensorflow 패키지를 빌드하기</h1><p>자 이제, Mac CPU 성능을 끌어올려, 기존 Tensorflow CPU 모드보다 더 빠른 성능을 얻도록 해봅시다.</p><h2 id="다운로드"><a href="#다운로드" class="headerlink" title="다운로드"></a>다운로드</h2><h3 id="brew를-설치해주세요"><a href="#brew를-설치해주세요" class="headerlink" title="brew를 설치해주세요."></a>brew를 설치해주세요.</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span><br></pre></td></tr></table></figure><h3 id="bazel를-설치해주세요"><a href="#bazel를-설치해주세요" class="headerlink" title="bazel를 설치해주세요."></a>bazel를 설치해주세요.</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install bazel</span><br></pre></td></tr></table></figure><h3 id="Tensorflow-git-repo를-받으세요"><a href="#Tensorflow-git-repo를-받으세요" class="headerlink" title="Tensorflow git repo를 받으세요."></a>Tensorflow git repo를 받으세요.</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/tensorflow/tensorflow.git</span><br></pre></td></tr></table></figure><br><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><h3 id="configure-명령어를-입력해주세요"><a href="#configure-명령어를-입력해주세요" class="headerlink" title="./configure 명령어를 입력해주세요"></a>./configure 명령어를 입력해주세요</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd tensorflow</span><br><span class="line">./configure</span><br></pre></td></tr></table></figure><h3 id="새로-빌드할-pip-패키지-옵션-선택하기"><a href="#새로-빌드할-pip-패키지-옵션-선택하기" class="headerlink" title="새로 빌드할 pip 패키지 옵션 선택하기"></a>새로 빌드할 pip 패키지 옵션 선택하기</h3><blockquote><p><strong>필요한 설정에 따라 Y 체크하시거나, 계속 엔터키를 누르면 됩니다.</strong></p></blockquote><p><strong>1) 설치 시작 메시지</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WARNING: --batch mode is deprecated. Please instead explicitly shut down your Bazel server using the command "bazel shutdown".</span><br><span class="line">You have bazel 0.23.2-homebrew installed.</span><br></pre></td></tr></table></figure><p><strong>2) bazel로 패키지를 만들기 위한 옵션 지정하기</strong></p><blockquote><p>설치된 Python 가상환경이 기본 PATH로 지정되어 있다면 아래와 비슷한 메시지가 나옵니다.</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Please specify the location of python. [Default is /Users/wgtech/anaconda3/envs/mlvenv/bin/python]:</span><br></pre></td></tr></table></figure><blockquote><p>설치된 Python library 경로를 묻습니다. 이상 없으면 엔터키를 눌러주세요</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Found possible Python library paths:</span><br><span class="line">/Users/wgtech/anaconda3/envs/mlvenv/lib/python3.6/site-packages</span><br><span class="line">Please input the desired Python library path to use. Default is [/Users/wgtech/anaconda3/envs/mlvenv/lib/python3.6/site-packages]</span><br></pre></td></tr></table></figure><p><strong>3) pip 패키지로 빌드하기 위한, 알맞는 옵션을 선택합니다.</strong></p><blockquote><p>XLA JIT 옵션 선택입니다. (제 경우는 N/또는 엔터키를 입력하여 넘겼습니다.)</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Do you wish to build TensorFlow with XLA JIT support? [y/N]:</span><br><span class="line">No XLA JIT support will be enabled for TensorFlow.</span><br></pre></td></tr></table></figure><blockquote><p>OpenCL SYCL 옵션 선택입니다. (제 경우는 N/또는 엔터키를 입력하여 넘겼습니다.)</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Do you wish to build TensorFlow with OpenCL SYCL support? [y/N]:</span><br><span class="line">No OpenCL SYCL support will be enabled for TensorFlow.</span><br></pre></td></tr></table></figure><blockquote><p>ROCm 옵션 선택입니다. (제 경우는 N/또는 엔터키를 입력하여 넘겼습니다.)</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Do you wish to build TensorFlow with ROCm support? [y/N]:</span><br><span class="line">No ROCm support will be enabled for TensorFlow.</span><br></pre></td></tr></table></figure><blockquote><p><strong>CUDA 옵션 선택입니다. (CPU로 개발할 것이기 때문에 N/또는 엔터키를 입력하여 넘겼습니다.)</strong></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Do you wish to build TensorFlow with CUDA support? [y/N]:</span><br><span class="line">No CUDA support will be enabled for TensorFlow.</span><br></pre></td></tr></table></figure><blockquote><p>새로운 버전의 clang을 설치할 지 묻습니다. (제 경우는 N/또는 엔터키를 입력하여 넘겼습니다.)</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Do you wish to download a fresh release of clang? (Experimental) [y/N]:</span><br><span class="line">Clang will not be downloaded.</span><br></pre></td></tr></table></figure><blockquote><p>MPI 옵션 선택입니다. (제 경우는 N/또는 엔터키를 입력하여 넘겼습니다.)</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Do you wish to build TensorFlow with MPI support? [y/N]:</span><br><span class="line">No MPI support will be enabled for TensorFlow.</span><br></pre></td></tr></table></figure><blockquote><p>추후 bazel 명령어를 통해 입력할 config 파라미터를 정할 수 있습니다. (제 경우는 엔터키를 입력하여 넘겼습니다.)</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Please specify optimization flags to use during compilation when bazel option "--config=opt" is specified [Default is -march=native -Wno-sign-compare]:</span><br></pre></td></tr></table></figure><blockquote><p>Android용 Tensorflow 애플리케이션을 만들지 묻습니다. (제 경우는 N/또는 엔터키를 입력하여 넘겼습니다.)</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Would you like to interactively configure ./WORKSPACE for Android builds? [y/N]:</span><br><span class="line">Not configuring the WORKSPACE for Android builds.</span><br></pre></td></tr></table></figure><blockquote><p>iOS, macOS, tvOS용 Tensorflow 애플리케이션을 만들지 묻습니다. (제 경우는 N/또는 엔터키를 입력하여 넘겼습니다.)</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Would you like to configure Bazel rules for building on Apple platforms? [y/N]:</span><br><span class="line">Not configuring Bazel rules for Apple platforms.</span><br></pre></td></tr></table></figure><h3 id="bazel로-패키지를-빌드하기"><a href="#bazel로-패키지를-빌드하기" class="headerlink" title="bazel로 패키지를 빌드하기"></a>bazel로 패키지를 빌드하기</h3><blockquote><p>선택 1 : <strong>CPU 자원을 제대로 활용하여 Tensorflow 사용하고 싶다면…</strong></p></blockquote><p><strong><em>저는 아래와 같은 명령어를 입력하여 패키지 빌드했습니다</em></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bazel build -c opt --copt=-mavx --copt=-mavx2 --copt=-mfma --copt=-msse4.2 //tensorflow/tools/pip_package:build_pip_package</span><br></pre></td></tr></table></figure><blockquote><p>선택 2 : pip에 배포된 패키지와 동일하게 진행할 것이라면…<br>bazel build –config=opt //tensorflow/tools/pip_package:build_pip_package</p></blockquote><blockquote><p>선택 3 : <strong>GPU로 Tensorflow를 사용하고 싶다면…</strong><br>(위에 반드시 CUDA 옵션 선택 메시지에서 Y를 눌러야합니다. 그리고 아래와 같은 명령어를 입력하세요.)<br>bazel build <strong>–config=opt –config=cuda</strong> //tensorflow/tools/pip_package:build_pip_package</p></blockquote><br><p><strong>위 선택지 중 하나를 택해 build 과정을 거치고 나서 아래 명령어를 입력해주세요.</strong><br>(wheel 파일 이름을 입력하라고 나올겁니다)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg</span><br></pre></td></tr></table></figure><h3 id="bazel로-패키지-빌드시-유의할-점"><a href="#bazel로-패키지-빌드시-유의할-점" class="headerlink" title="bazel로 패키지 빌드시 유의할 점"></a>bazel로 패키지 빌드시 유의할 점</h3><ul><li>–copt부분은 cpu가 지원되는 것에 따라 약간씩 다를 수 있습니다.</li><li>위에서도 언급했지만, Nvidia GPU의 CUDA 연산을 활용하려면 <strong>–config=cuda</strong> 추가해주세요.</li></ul><h3 id="bazel로-pip-패키지를-빌드했다면…"><a href="#bazel로-pip-패키지를-빌드했다면…" class="headerlink" title="bazel로 pip 패키지를 빌드했다면…"></a>bazel로 pip 패키지를 빌드했다면…</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 예시1</span><br><span class="line">pip install /tmp/tensorflow_pkg/tensorflow-버전태그.whl</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 예시2</span><br><span class="line">pip install /tmp/tensorflow_pkg/tensorflow-1.1.0-cp36-cp36m-macosx_10_6_intel.whl</span><br></pre></td></tr></table></figure><h3 id="잘못-빌드했다면"><a href="#잘못-빌드했다면" class="headerlink" title="잘못 빌드했다면!!"></a>잘못 빌드했다면!!</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew clean --expunge</span><br></pre></td></tr></table></figure><br><h1 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h1><h2 id="bazel-빌드-시간"><a href="#bazel-빌드-시간" class="headerlink" title="bazel 빌드 시간"></a>bazel 빌드 시간</h2><p>위와 같은 어려움(?)을 극복하여 빌드를 시도했습니다.<br>저 같은 경우는 <strong>약 3시간 19분</strong>정도 걸리더라구요..</p><h2 id="기존보다-얼마나-빨라졌을까요"><a href="#기존보다-얼마나-빨라졌을까요" class="headerlink" title="기존보다 얼마나 빨라졌을까요?"></a>기존보다 얼마나 빨라졌을까요?</h2><p>정말! 놀랍게도 엄청 빨라졌습니다.<br>프로젝트와 관련된 사항이기도 하고 시도하는 코드에 따라 정확하게 말하기는 어렵습니다만,<br>제가 시도해보니 무려 <strong>6배</strong>가 빨라졌습니다. (1 epoch당 6시간 30분 소요 -&gt; 1시간 30분 소요)<br>음~ 시도해볼만합니다!</p><h2 id="그러나…"><a href="#그러나…" class="headerlink" title="그러나…"></a>그러나…</h2><p>역시 GPU가 좋습니다..<br>맥북 고유의 비행기 이륙소리가 많이 들리고 발열도 장난아닙니다.<br><em>어떤 걸 시도하느냐에 따라 맥북이 죽어버리는 경우도 발생합니다..</em> ^.^;;;</p><br><h1 id="아하"><a href="#아하" class="headerlink" title="아하!"></a>아하!</h1><h2 id="CPU로도-머신러닝이-가능합니다"><a href="#CPU로도-머신러닝이-가능합니다" class="headerlink" title="CPU로도 머신러닝이 가능합니다"></a>CPU로도 머신러닝이 가능합니다</h2><p>그러나, 계속 사용하면 후회할겁니다.. 수명이 줄어들거에요..<br>GPU 사세요..</p><h2 id="효율적인-머신러닝이-가능합니다"><a href="#효율적인-머신러닝이-가능합니다" class="headerlink" title="효율적인 머신러닝이 가능합니다"></a>효율적인 머신러닝이 가능합니다</h2><p>옵션중에는 Android, iOS 환경에서도 사용할 지 묻는 옵션이 있었습니다.<br>원하는 환경(컴퓨터 CPU, GPU 또는 모바일)에서 자유롭게 최대한의 퍼포먼스를 끌어올리면서 Tensorflow를 활용할 수 있다는 것입니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Tensorflow-나도-해보자&quot;&gt;&lt;a href=&quot;#Tensorflow-나도-해보자&quot; class=&quot;headerlink&quot; title=&quot;Tensorflow 나도 해보자&quot;&gt;&lt;/a&gt;Tensorflow 나도 해보자&lt;/h1&gt;&lt;p&gt;저는 몇년전부터 주
      
    
    </summary>
    
      <category term="Machine Learning" scheme="https://wgtech.github.io/categories/Machine-Learning/"/>
    
      <category term="Framework" scheme="https://wgtech.github.io/categories/Machine-Learning/Framework/"/>
    
      <category term="Tensorflow" scheme="https://wgtech.github.io/categories/Machine-Learning/Framework/Tensorflow/"/>
    
    
      <category term="Framework" scheme="https://wgtech.github.io/tags/Framework/"/>
    
      <category term="Python" scheme="https://wgtech.github.io/tags/Python/"/>
    
      <category term="Machine Learning" scheme="https://wgtech.github.io/tags/Machine-Learning/"/>
    
      <category term="Artifical Intelligence" scheme="https://wgtech.github.io/tags/Artifical-Intelligence/"/>
    
      <category term="Tensorflow" scheme="https://wgtech.github.io/tags/Tensorflow/"/>
    
      <category term="Python 3" scheme="https://wgtech.github.io/tags/Python-3/"/>
    
      <category term="Anaconda" scheme="https://wgtech.github.io/tags/Anaconda/"/>
    
      <category term="pip" scheme="https://wgtech.github.io/tags/pip/"/>
    
      <category term="Mac" scheme="https://wgtech.github.io/tags/Mac/"/>
    
      <category term="macOS" scheme="https://wgtech.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>Django Application 개발 방식 : MTV 패턴(MVT 패턴) 등</title>
    <link href="https://wgtech.github.io/posts/2019/05/27/The-Way-Of-Django-Application-Development/"/>
    <id>https://wgtech.github.io/posts/2019/05/27/The-Way-Of-Django-Application-Development/</id>
    <published>2019-05-27T06:21:00.000Z</published>
    <updated>2019-10-28T13:52:48.697Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-Application-개발-방식"><a href="#Django-Application-개발-방식" class="headerlink" title="Django Application 개발 방식"></a>Django Application 개발 방식</h1><h2 id="MTV-패턴"><a href="#MTV-패턴" class="headerlink" title="MTV 패턴"></a>MTV 패턴</h2><ul><li><strong>Django 웹 개발시 대표적으로 많이 사용되는 패턴으로써, 일반적으로 웹 프로그램 개발시 언급되는 MVC 패턴과 상당히 비슷한 패턴입니다.</strong></li></ul><h3 id="구성-요소"><a href="#구성-요소" class="headerlink" title="구성 요소"></a>구성 요소</h3><blockquote><p>Model</p></blockquote><ul><li>데이터베이스에 저장되는 데이터</li><li>사용될 데이터에 대한 정의를 담고 있는 Django의 Class</li><li>ORM 기법을 사용하여 Application 에서 사용할 데이터베이스를 Class로 Mapping</li><li>Model 클래스 하나는 테이블 하나와 매핑되고, 모델 클래스 속성은 테이블의 컬럼에 매핑됩니다.</li><li>이 때, 테이블명은 밑줄과 소문자로 표시됩니다. 다른 이름으로 지정할 수 있습니다.</li><li>Primary Key는 Person 클래스에서 정의하지 않아도 Django 에서 자동으로 부여합니다. 또는 직접 지정할 수 있습니다.</li></ul><blockquote><p>Template</p></blockquote><ul><li>사용자에게 보여지는 UI 부분 (또는, HTML 파일 등)</li></ul><blockquote><p>View</p></blockquote><ul><li>실질적으로 프로그램 로직이 동작하여 데이터를 가져오고 적절하게 처리한 결과를 Template에 전달하는 역할</li></ul><br><h3 id="프로그래밍-순서"><a href="#프로그래밍-순서" class="headerlink" title="프로그래밍 순서"></a>프로그래밍 순서</h3><ol><li><strong>프로젝트 뼈대 만들기</strong> : 프로젝트 및 앱 개발에 필요한 디렉토리와 파일 생성</li><li><strong>Model 코딩하기</strong> : 테이블 관련 사항을 개발 (models.py, admin.py 파일)</li><li><strong>URLconf 코딩하기</strong> : URL 및 View 매핑 관계를 정의 (urls.py 파일)</li><li><strong>Template 코딩하기</strong> : 화면 UI 개발 (templates/ 디렉토리 하위의 *.html 파일들)</li><li><strong>View 코딩하기</strong> : 애플리케이션 로직 개발 (views.py 파일)</li></ol><blockquote><p>프로젝트 생성</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject MyProject</span><br></pre></td></tr></table></figure><blockquote><p>애플리케이션 생성</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">MyProject&gt;</span> python manage.py startapp MyApp1</span><br></pre></td></tr></table></figure><h3 id="처리-과정"><a href="#처리-과정" class="headerlink" title="처리 과정"></a>처리 과정</h3><ol><li>클라이언트로부터 요청을 받으면 URLconf를 이용하여 URL을 분석합니다.</li><li>URL 분석 결과를 통해 해당 URL에 대한 처리를 담당할 View를 결정합니다.</li><li>View는 자신의 로직을 실행하면서, 만일 데이터베이스 처리가 필</li><li>View는 자신의 로직 처리가 끝나면, Template을 사용하여 클라이언트에 전송할 HTML 파일을 생성합니다.</li><li>View는 최종 결과로, HTML 파일을 클라이언트에게 보내 응답합니다.</li></ol><blockquote><p>URLconf</p></blockquote><ul><li>URL 정의; 직관적이고 이해하기 쉬운 URL 설계가 가능합니다.</li><li>이 방식은 <strong>Elegant</strong>(우아한) <strong>URL</strong> 이라고 합니다.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'articles/2003/'</span>, views.special_case_2003),</span><br><span class="line">    path(<span class="string">'articles/&lt;int:year&gt;/&lt;int:month&gt;/&lt;slug:slug&gt;/'</span>, views.article_detail)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><h2 id="Django에서-URL를-분석하는-순서"><a href="#Django에서-URL를-분석하는-순서" class="headerlink" title="Django에서 URL를 분석하는 순서"></a>Django에서 URL를 분석하는 순서</h2><ol><li>settings.py 파일의 ROOT_URLCONF 항목을 읽어 최상위 URLconf (urls.py) 위치를 알아냅니다.</li><li>URLconf 를 로딩하여 urlpatterns 변수에 지정되어 있는 URL 리스트를 검사합니다.</li><li>urlpatterns 에 정의되어 있는 리스트를 확인하고, URL 패턴이 일치되면 검사를 종료합니다.</li><li>매치된 URL 를 통해 View 함수나 메서드를 호출합니다. 호출시 HttpRequest 객체와, 그리고 매칭할 때 추출된 단어들을 View에 인자로 넘겨줍니다.</li><li>URL 리스트 끝까지 검사했는데도 매칭에 실패하면 에러를 처리하는 View를 호출합니다. (get_object_or_404() 등..)</li></ol><h2 id="Django-Path-Converter"><a href="#Django-Path-Converter" class="headerlink" title="Django Path Converter"></a>Django Path Converter</h2><ul><li>str : / (슬래시)를 제외한 모든 문자열과 매치됩니다. 타입 미지정시, 디폴트.</li><li>int : 0 또는 양의 정수와 매치. 이 때 Python의 int 타입과 동일.</li><li>slug : ASCII, 숫자, 하이픈, 밑줄로 구성되어 있는 ‘slug’ 형식의 문자열</li><li>uuid : Python 의 UUID 타입과 동일.</li><li>path : / (슬래시)를 포함한 모든 문자열과 매치되며, URL 패턴의 전체를 추출하고자할 때 많이 사용.</li></ul><blockquote><p>정규표현식 (Regular Expression) 을 사용한 Django URL Pattern</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'articles/2003/'</span>, views.special_case_2003),</span><br><span class="line">    re_path(<span class="string">r'^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9]&#123;2&#125;)/(?P&lt;slug&gt;[\\-]+)/$'</span>, views.article_detail)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><hr><p>참고) 파이썬 웹 프로그래밍(한빛미디어)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Django-Application-개발-방식&quot;&gt;&lt;a href=&quot;#Django-Application-개발-방식&quot; class=&quot;headerlink&quot; title=&quot;Django Application 개발 방식&quot;&gt;&lt;/a&gt;Django Applica
      
    
    </summary>
    
      <category term="Programming" scheme="https://wgtech.github.io/categories/Programming/"/>
    
      <category term="Framework" scheme="https://wgtech.github.io/categories/Programming/Framework/"/>
    
      <category term="Django" scheme="https://wgtech.github.io/categories/Programming/Framework/Django/"/>
    
    
      <category term="Programming" scheme="https://wgtech.github.io/tags/Programming/"/>
    
      <category term="Framework" scheme="https://wgtech.github.io/tags/Framework/"/>
    
      <category term="Python" scheme="https://wgtech.github.io/tags/Python/"/>
    
      <category term="Django" scheme="https://wgtech.github.io/tags/Django/"/>
    
      <category term="Django 3" scheme="https://wgtech.github.io/tags/Django-3/"/>
    
      <category term="Library" scheme="https://wgtech.github.io/tags/Library/"/>
    
      <category term="Refer to the book" scheme="https://wgtech.github.io/tags/Refer-to-the-book/"/>
    
  </entry>
  
  <entry>
    <title>Django 웹 라이브러리 - (2) http</title>
    <link href="https://wgtech.github.io/posts/2019/05/22/Django-Web-Library-http/"/>
    <id>https://wgtech.github.io/posts/2019/05/22/Django-Web-Library-http/</id>
    <published>2019-05-22T09:12:00.000Z</published>
    <updated>2019-10-28T13:52:48.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="http"><a href="#http" class="headerlink" title="http ?"></a>http ?</h1><ul><li>HTTP 프로토콜 처리와 관련하여 urllib 모듈로는 쉽게 처리할 수 없거나, urllib 모듈을 사용하는 것보다 좀 더 세밀한 클라이언트 기능을 사용할 수 있습니다</li></ul><h2 id="http-client"><a href="#http-client" class="headerlink" title="http.client"></a>http.client</h2><ul><li>urllib.request 모듈로는 쉽게 처리할 수 없는 경우, 또는 HTTP 프로토콜 요청에 대한 저수준의 더 세밀한 기능이 필요할 때 이용됩니다.</li><li>urllib.request 모듈로 작성한 로직과 동일하게 사용할 수 있는데, 이는 urllib.request 모듈이 http.client 모듈에서 제공하는 API를 사용해서 만든 모듈이기 때문입니다.</li></ul><blockquote><p>GET 사용 예제</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> http.client <span class="keyword">import</span> HTTPConnection</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 연결 객체 생성</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">주의) 인자값으로 URL를 입력하는 것이 아니라, host 주소 자체를 입력해야한다.</span></span><br><span class="line"><span class="string">따라서, 프로토콜(http://) 입력시 오류가 발생된다.</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">conn = HTTPConnection(<span class="string">"www.python.org"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 요청을 보냄</span></span><br><span class="line">conn.request(<span class="string">"GET"</span>, <span class="string">"/index.html"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 응답 객체 생성</span></span><br><span class="line">response = conn.getresponse()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 응답 데이터를 읽음</span></span><br><span class="line">data = response.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 연결을 닫음</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><blockquote><p>POST 사용 예제</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> http.client <span class="keyword">import</span> HTTPConnection</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"></span><br><span class="line"><span class="comment"># 연결 호스트 지정</span></span><br><span class="line">host = <span class="string">'127.0.0.1:8000'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 요청 파라미터에 대해 URL 인코딩을 해야한다.</span></span><br><span class="line">params = urlencode(&#123;</span><br><span class="line">    <span class="string">'language'</span>:<span class="string">'python'</span>,</span><br><span class="line">    <span class="string">'account'</span>:<span class="string">'wgtech'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># POST 요청으로 보낼 헤더 정보를 삽입</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>,</span><br><span class="line">    <span class="string">'Accept'</span>: <span class="string">'text/plain'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 연결 시작</span></span><br><span class="line">conn = HTTPConnection(host)</span><br><span class="line">conn.request(<span class="string">'POST'</span>, <span class="string">''</span>, params, headers) <span class="comment"># 반드시 POST로 명시해야한다.</span></span><br><span class="line">response = conn.getresponse()</span><br><span class="line">print(response.status, response.reason) <span class="comment"># 200, Success</span></span><br><span class="line"></span><br><span class="line">data = response.read()</span><br><span class="line">print(data.decode(<span class="string">'utf-8'</span>)) <span class="comment"># response 인스턴스를 UTF-8 인코딩으로 불러온다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 연결 해제</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><blockquote><p>HEAD 사용 예제</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> http.client <span class="keyword">import</span> HTTPConnection</span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTPConnection 인스턴스 생성</span></span><br><span class="line">conn = HTTPConnection(<span class="string">'www.example.com'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># HEAD 방식임을 명시적으로 작성해야한다.</span></span><br><span class="line">conn.request(<span class="string">'HEAD'</span>, <span class="string">'/'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 응답 결과 출력</span></span><br><span class="line">response = conn.getresponse()</span><br><span class="line">data = response.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 출력 결과</span></span><br><span class="line">print(len(data)) <span class="comment"># 0</span></span><br><span class="line">print(data == <span class="string">b''</span>) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="http-server"><a href="#http-server" class="headerlink" title="http.server"></a>http.server</h2><ul><li>http.server 모듈을 통해 간단하게 웹 서버를 구성할 수 있습니다.</li></ul><blockquote><p>웹 서버 생성 방법</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> HTTPServer, BaseHTTPRequestHandler</span><br><span class="line"></span><br><span class="line"><span class="comment"># 원하는 로직에 맞게 핸들러 클래스 정의하기</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span><span class="params">(BaseHTTPRequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_GET</span><span class="params">(self)</span>:</span> <span class="comment"># GET 일 때</span></span><br><span class="line">        self.send_response_only(<span class="number">200</span>, <span class="string">'OK'</span>)</span><br><span class="line">        self.end_headers()</span><br><span class="line">        self.wfile.write(<span class="string">"Hello World"</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>: <span class="comment"># 초기 실행되는 코드</span></span><br><span class="line">    server = HTTPServer((<span class="string">''</span>, <span class="number">8888</span>), MyHandler)</span><br><span class="line">    print(<span class="string">"Started WebServer on Port 8888"</span>)</span><br><span class="line">    print(<span class="string">"Press ^C to Quit WebServer."</span>)</span><br><span class="line">    server.serve_forever</span><br></pre></td></tr></table></figure><h3 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h3><blockquote><p>명령어로 Django 웹 서버 간단하게 동작하기</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> manage.py 가 있는 저장소 루트 (&lt;repository-root&gt;) 디렉토리에서</span><br><span class="line"></span><br><span class="line">python runserver 0.0.0.0:8888</span><br><span class="line"><span class="meta">#</span> 0.0.0.0 : 모든 주소로부터 접속이 가능하도록합니다. (127.0.0.1 이 기본값입니다)</span><br><span class="line"><span class="meta">#</span> :8888 : 포트 번호 (8000 포트가 기본값입니다)</span><br><span class="line"></span><br><span class="line">python -m http.server 8888</span><br><span class="line"><span class="meta">#</span> 0.0.0.0:8888 로 바인딩시켜 웹 서버를 생성한 것과 동일한 결과입니다.</span><br></pre></td></tr></table></figure><br><h2 id="웹-서버-구동을-위한-Python-라이브러리-주요-클래스"><a href="#웹-서버-구동을-위한-Python-라이브러리-주요-클래스" class="headerlink" title="웹 서버 구동을 위한 Python 라이브러리 주요 클래스"></a>웹 서버 구동을 위한 Python 라이브러리 주요 클래스</h2><h3 id="HTTPServer"><a href="#HTTPServer" class="headerlink" title="HTTPServer"></a>HTTPServer</h3><ul><li>웹 서버를 만들기 위한 가장 기초적인 클래스, 서버 IP와 Port 번호를 바인딩합니다</li><li>HTTPServer 객체 생성시, 핸들러 클래스를 별도로 정의해야합니다.</li></ul><h3 id="BaseHTTPRequestHandler"><a href="#BaseHTTPRequestHandler" class="headerlink" title="BaseHTTPRequestHandler"></a>BaseHTTPRequestHandler</h3><ul><li>핸들러를 만들기 위한 기반 클래스로, HTTP 프로토콜 처리 로직이 들어있습니다.</li><li>이 클래스를 상속받아, 자신의 로직 처리를 담당하는 핸들러 클래스를 만듭니다.</li></ul><h3 id="SimpleHTTPRequestHandler"><a href="#SimpleHTTPRequestHandler" class="headerlink" title="SimpleHTTPRequestHandler"></a>SimpleHTTPRequestHandler</h3><ul><li>BaseHTTPRequestHandler 클래스를 상속받아 만든 클래스입니다.</li><li>GET과 HEAD 처리가 가능한 핸들러 클래스입니다.</li></ul><h3 id="CGIHTTPReqeustHandler"><a href="#CGIHTTPReqeustHandler" class="headerlink" title="CGIHTTPReqeustHandler"></a>CGIHTTPReqeustHandler</h3><ul><li>SimpleHTTPRequestHandler 클래스를 상속받아 만든 클래스입니다.</li><li>추가적으로 POST 메서드와 CGI 처리가 가능한 핸들러 클래스입니다.</li></ul><p>그 이외로 http.cookiejar 등이 있습니다.</p><hr><p>참고) 파이썬 웹 프로그래밍(한빛미디어)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;http&quot;&gt;&lt;a href=&quot;#http&quot; class=&quot;headerlink&quot; title=&quot;http ?&quot;&gt;&lt;/a&gt;http ?&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;HTTP 프로토콜 처리와 관련하여 urllib 모듈로는 쉽게 처리할 수 없거나, urllib 
      
    
    </summary>
    
      <category term="Programming" scheme="https://wgtech.github.io/categories/Programming/"/>
    
      <category term="Framework" scheme="https://wgtech.github.io/categories/Programming/Framework/"/>
    
      <category term="Django" scheme="https://wgtech.github.io/categories/Programming/Framework/Django/"/>
    
    
      <category term="Programming" scheme="https://wgtech.github.io/tags/Programming/"/>
    
      <category term="Framework" scheme="https://wgtech.github.io/tags/Framework/"/>
    
      <category term="Python" scheme="https://wgtech.github.io/tags/Python/"/>
    
      <category term="Django" scheme="https://wgtech.github.io/tags/Django/"/>
    
      <category term="Django 3" scheme="https://wgtech.github.io/tags/Django-3/"/>
    
      <category term="Library" scheme="https://wgtech.github.io/tags/Library/"/>
    
      <category term="Refer to the book" scheme="https://wgtech.github.io/tags/Refer-to-the-book/"/>
    
  </entry>
  
  <entry>
    <title>Django 웹 라이브러리 - (1) urllib</title>
    <link href="https://wgtech.github.io/posts/2019/05/22/Django-Web-Library-urllib/"/>
    <id>https://wgtech.github.io/posts/2019/05/22/Django-Web-Library-urllib/</id>
    <published>2019-05-22T07:25:00.000Z</published>
    <updated>2019-10-28T13:52:48.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="urllib"><a href="#urllib" class="headerlink" title="urllib ?"></a>urllib ?</h1><ul><li>웹 클라이언트를 작성하는 데 사용되는 모듈들 중에 가장 빈번하게 사용하는 모듈</li><li>HTTP 서버 뿐만 아니라, FTP 서버 및 로컬 파일 등을 처리한다.</li><li>클라이언트에서 공통적으로 필요한 함수와 클래스 등을 제공한다.</li><li>주로 URL 처리와 서버 액세스 관련 API를 제공한다.</li></ul><h2 id="urllib-parse"><a href="#urllib-parse" class="headerlink" title="urllib.parse"></a>urllib.parse</h2><p>URL의 분해, 조립, 변경 및 URL 문자 인코딩, 디코딩 등을 처리한다.</p><blockquote><p>예문</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line">result = urlparse(<span class="string">"http://www.python.org/guide/python.html;philosophy?overall=3#n10"</span>)</span><br><span class="line"></span><br><span class="line">result</span><br></pre></td></tr></table></figure><blockquote><p>결과</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ParseResult(scheme=<span class="string">'http'</span>, netloc=<span class="string">'www.python.org'</span>,</span><br><span class="line">path=<span class="string">'/guide/python.html'</span>, params=<span class="string">'philosophy'</span>,</span><br><span class="line">query=<span class="string">'overall=3'</span>,fragment=<span class="string">'n10'</span>)</span><br></pre></td></tr></table></figure><p>urlsplit(), urljoin(), parse_qs(), quote(), encode() 함수 등이 있다.</p><h3 id="ParseResult-클래스-속성"><a href="#ParseResult-클래스-속성" class="headerlink" title="ParseResult 클래스 속성"></a>ParseResult 클래스 속성</h3><ul><li>scheme : URL에서 사용된 프로토콜</li><li>netloc : Network Location, <strong>user:password@host:port</strong> 형식으로 표현 (HTTP 프로토콜은 <strong>host:port</strong> 로 표현)</li><li>path : 파일이나 애플리케이션 경로</li><li>params: 애플리케이션에 전달될 매개변수 (현재는 사용되지 않음)</li><li>query : 질의 문자열 또는 매개변수, &amp; 로 구분된 <strong>이름=값 의 쌍</strong> 형식으로 표현</li><li>fragment : 문서 내의 앵커 등 조각을 지정</li></ul><br><h2 id="urllib-request"><a href="#urllib-request" class="headerlink" title="urllib.request"></a>urllib.request</h2><p>주어진 URL에서 데이터를 가져오는 기본 기능 제공함.</p><blockquote><p>urlopen 함수 형식</p></blockquote><pre><code>urlopen(url, data=None, [timeout])</code></pre><ul><li>url : 문자열로 직접 지정하거나, Request 클래스의 인스턴스로 지정 가능. 또는 file 스키마를 지정하여 로컬 파일을 열 수 있음.<ul><li><strong>PUT, HEAD 메소드 등, 헤더 조작이 필요할 때는 Request 클래스를 같이 사용한다.</strong></li></ul></li><li>GET 방식이 기본값</li><li>data : 질의 문자열을 지정하여 POST로 보냄. <strong>bytes 타입</strong>이어야한다.</li><li>timeout : 타임아웃 시간 (단위는 seconds)</li><li>인증/쿠키/프록시 등의 복잡한 요청 처리는 해당 핸들러 클래스를 같이 사용해야한다.</li></ul><blockquote><p>urlopen 사용 예시</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line">f = urlopen(<span class="string">"https://www.examples.com"</span>)</span><br><span class="line">print(f.read(<span class="number">500</span>).decode(<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>urlopen POST 요청</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line">data = <span class="string">"language=python&amp;framework=django"</span></span><br><span class="line">f = urlopen(<span class="string">"http://127.0.0.1:8000"</span>, bytes(data, encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">print(f.read(<span class="number">500</span>).decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><blockquote><p>Request 클래스로 요청 헤더 지정</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen, Request</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://127.0.0.1:8000'</span></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">'name'</span>:<span class="string">'wgl'</span>,</span><br><span class="line"><span class="string">'url'</span>:<span class="string">'https://wgtech.dev'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">encData = urlencode(data)</span><br><span class="line">postData = bytes(encData, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">req = Request(url, data=postData)</span><br></pre></td></tr></table></figure><hr><p>참고) 파이썬 웹 프로그래밍(한빛미디어)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;urllib&quot;&gt;&lt;a href=&quot;#urllib&quot; class=&quot;headerlink&quot; title=&quot;urllib ?&quot;&gt;&lt;/a&gt;urllib ?&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;웹 클라이언트를 작성하는 데 사용되는 모듈들 중에 가장 빈번하게 사용하는 모듈&lt;
      
    
    </summary>
    
      <category term="Programming" scheme="https://wgtech.github.io/categories/Programming/"/>
    
      <category term="Framework" scheme="https://wgtech.github.io/categories/Programming/Framework/"/>
    
      <category term="Django" scheme="https://wgtech.github.io/categories/Programming/Framework/Django/"/>
    
    
      <category term="Programming" scheme="https://wgtech.github.io/tags/Programming/"/>
    
      <category term="Framework" scheme="https://wgtech.github.io/tags/Framework/"/>
    
      <category term="Python" scheme="https://wgtech.github.io/tags/Python/"/>
    
      <category term="Django" scheme="https://wgtech.github.io/tags/Django/"/>
    
      <category term="Django 3" scheme="https://wgtech.github.io/tags/Django-3/"/>
    
      <category term="Library" scheme="https://wgtech.github.io/tags/Library/"/>
    
      <category term="Refer to the book" scheme="https://wgtech.github.io/tags/Refer-to-the-book/"/>
    
  </entry>
  
  <entry>
    <title>The Best Way of Django Settings</title>
    <link href="https://wgtech.github.io/posts/2019/05/22/The-Best-Way-of-Django-Settings/"/>
    <id>https://wgtech.github.io/posts/2019/05/22/The-Best-Way-of-Django-Settings/</id>
    <published>2019-05-22T05:17:00.000Z</published>
    <updated>2019-10-28T13:52:48.697Z</updated>
    
    <content type="html"><![CDATA[<h1 id="The-Best-Way-of-Django-Settings"><a href="#The-Best-Way-of-Django-Settings" class="headerlink" title="The Best Way of Django Settings"></a>The Best Way of Django Settings</h1><h2 id="버전-컨트롤-시스템으로-모든-설정-파일을-관리해야한다"><a href="#버전-컨트롤-시스템으로-모든-설정-파일을-관리해야한다" class="headerlink" title="버전 컨트롤 시스템으로 모든 설정 파일을 관리해야한다."></a>버전 컨트롤 시스템으로 모든 설정 파일을 관리해야한다.</h2><h2 id="반복되는-설정들을-없애야한다"><a href="#반복되는-설정들을-없애야한다" class="headerlink" title="반복되는 설정들을 없애야한다."></a>반복되는 설정들을 없애야한다.</h2><h2 id="암호나-비밀-키-등은-안전하게-보관해야한다"><a href="#암호나-비밀-키-등은-안전하게-보관해야한다" class="headerlink" title="암호나 비밀 키 등은 안전하게 보관해야한다."></a>암호나 비밀 키 등은 안전하게 보관해야한다.</h2><h2 id="버전-관리되지-않는-로컬-세팅은-피하자"><a href="#버전-관리되지-않는-로컬-세팅은-피하자" class="headerlink" title="버전 관리되지 않는 로컬 세팅은 피하자."></a>버전 관리되지 않는 로컬 세팅은 피하자.</h2><h3 id="Public-Private-저장소에서-제외해야-할-설정-파일"><a href="#Public-Private-저장소에서-제외해야-할-설정-파일" class="headerlink" title="Public / Private 저장소에서 제외해야 할 설정 파일"></a>Public / Private 저장소에서 제외해야 할 설정 파일</h3><ul><li>SECRET_KEY (<a href="https://docs.djangoproject.com/en/1.8/topics/signing" rel="external nofollow noopener noreferrer" target="_blank">https://docs.djangoproject.com/en/1.8/topics/signing</a>)</li></ul><h2 id="Development-Release-용도의-환경을-파편화하여-설정하자"><a href="#Development-Release-용도의-환경을-파편화하여-설정하자" class="headerlink" title="Development, Release 용도의 환경을 파편화하여 설정하자"></a>Development, Release 용도의 환경을 파편화하여 설정하자</h2><ul><li>pip, conda, virtualenv 등… 활용</li></ul><hr><p>참고) The Scoops of Django(프로그래밍인사이트) </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;The-Best-Way-of-Django-Settings&quot;&gt;&lt;a href=&quot;#The-Best-Way-of-Django-Settings&quot; class=&quot;headerlink&quot; title=&quot;The Best Way of Django Setting
      
    
    </summary>
    
      <category term="Programming" scheme="https://wgtech.github.io/categories/Programming/"/>
    
      <category term="Framework" scheme="https://wgtech.github.io/categories/Programming/Framework/"/>
    
      <category term="Django" scheme="https://wgtech.github.io/categories/Programming/Framework/Django/"/>
    
    
      <category term="Programming" scheme="https://wgtech.github.io/tags/Programming/"/>
    
      <category term="Framework" scheme="https://wgtech.github.io/tags/Framework/"/>
    
      <category term="Python" scheme="https://wgtech.github.io/tags/Python/"/>
    
      <category term="Django" scheme="https://wgtech.github.io/tags/Django/"/>
    
      <category term="Refer to the book" scheme="https://wgtech.github.io/tags/Refer-to-the-book/"/>
    
  </entry>
  
  <entry>
    <title>Python PEP-8 Protocol</title>
    <link href="https://wgtech.github.io/posts/2019/05/22/PEP-8-Protocol/"/>
    <id>https://wgtech.github.io/posts/2019/05/22/PEP-8-Protocol/</id>
    <published>2019-05-22T04:58:00.000Z</published>
    <updated>2019-10-28T13:52:48.692Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>현재 작성중인 글입니다.</strong></p></blockquote><ol><li>import 될 수 있는 이름<br>(Example : wgtech_python)<ol><li>소문자</li><li>숫자, 대시(-), 마침표(.), 스페이스 그리고 특수문자 미포함</li><li>가독성을 높이기 위해, 밑줄을 이용한다.</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;현재 작성중인 글입니다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;import 될 수 있는 이름&lt;br&gt;(Example : wgtech_python)&lt;ol&gt;
&lt;li&gt;소문자&lt;/li&gt;
&lt;li
      
    
    </summary>
    
      <category term="Programming" scheme="https://wgtech.github.io/categories/Programming/"/>
    
      <category term="Language" scheme="https://wgtech.github.io/categories/Programming/Language/"/>
    
      <category term="Python" scheme="https://wgtech.github.io/categories/Programming/Language/Python/"/>
    
    
      <category term="Programming" scheme="https://wgtech.github.io/tags/Programming/"/>
    
      <category term="Language" scheme="https://wgtech.github.io/tags/Language/"/>
    
      <category term="Python" scheme="https://wgtech.github.io/tags/Python/"/>
    
      <category term="Python 3" scheme="https://wgtech.github.io/tags/Python-3/"/>
    
      <category term="Python 2" scheme="https://wgtech.github.io/tags/Python-2/"/>
    
  </entry>
  
  <entry>
    <title>Django Template 에서 Split 기능 사용하는 방법</title>
    <link href="https://wgtech.github.io/posts/2019/05/22/How-To-Use-Split-Function-In-Django-Template/"/>
    <id>https://wgtech.github.io/posts/2019/05/22/How-To-Use-Split-Function-In-Django-Template/</id>
    <published>2019-05-22T04:57:00.000Z</published>
    <updated>2019-10-28T13:52:48.691Z</updated>
    
    <content type="html"><![CDATA[<p>참고 : <a href="https://docs.djangoproject.com/en/2.2/howto/custom-template-tags/" rel="external nofollow noopener noreferrer" target="_blank">https://docs.djangoproject.com/en/2.2/howto/custom-template-tags/</a></p><br><blockquote><p>Django 2.2 기준</p></blockquote><p><img src="/images/2019/05/22/How-To-Use-Split-Function-In-Django-Template/1.png" alt="Django Template은 Split 기능을 갖추고 있지 않기 때문에, templatetags 패키지를 사용해야합니다." title="Django Template은 Split 기능을 갖추고 있지 않기 때문에, templatetags 패키지를 사용해야합니다."></p><ol><li>본 앱 (manage.py가 있는 디렉토리)이 아닌, 추가 앱을 작성해야합니다</li><li>추가로 작성된 앱에서 templatetags 패키지를 생성합니다.<br>(이 때, templatetags 패키지는 반드시, views.py, models.py 와 같은 레벨이 되어야합니다.)</li><li>파일명은 자유롭게 작성해야하지만, 반드시 templatetags 패키지 안에 생성되어야합니다.<br>(이 경우에는, split.py 라는 파일을 생성하여 커스텀 Split 모듈을 생성합니다)</li><li>본 앱의 settings.py 의 INSTALLED_APPS 부분에 반드시 추가로 생성한 앱을 추가합니다.</li><li>아래와 같이 태그를 사용하여, 커스텀 Split 기능을 원하는 필요한 영역에서 사용하면 됩니다.<figure class="highlight python"><figcaption><span>https://stackoverflow.com/questions/41932634/how-to-split-the-string-in-django-template?answertab</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load split %&#125;</span><br><span class="line">&#123;% <span class="keyword">with</span> form.instance.skills|split:<span class="string">","</span> <span class="keyword">as</span> skills %&#125;</span><br><span class="line">    &#123;% <span class="keyword">for</span> skill <span class="keyword">in</span> skills %&#125;</span><br><span class="line">        &#123;&#123; skill &#125;&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&#123;% endwith %&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;참고 : &lt;a href=&quot;https://docs.djangoproject.com/en/2.2/howto/custom-template-tags/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="Programming" scheme="https://wgtech.github.io/categories/Programming/"/>
    
      <category term="Framework" scheme="https://wgtech.github.io/categories/Programming/Framework/"/>
    
      <category term="Django" scheme="https://wgtech.github.io/categories/Programming/Framework/Django/"/>
    
    
      <category term="Programming" scheme="https://wgtech.github.io/tags/Programming/"/>
    
      <category term="Framework" scheme="https://wgtech.github.io/tags/Framework/"/>
    
      <category term="Python" scheme="https://wgtech.github.io/tags/Python/"/>
    
      <category term="Django" scheme="https://wgtech.github.io/tags/Django/"/>
    
      <category term="Django 2" scheme="https://wgtech.github.io/tags/Django-2/"/>
    
  </entry>
  
  <entry>
    <title>The Basic of Django App Design (장고 앱 디자인의 기본)</title>
    <link href="https://wgtech.github.io/posts/2019/05/22/The-Basic-of-Django-App-Design/"/>
    <id>https://wgtech.github.io/posts/2019/05/22/The-Basic-of-Django-App-Design/</id>
    <published>2019-05-22T04:05:00.000Z</published>
    <updated>2019-10-28T13:52:48.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="필요-용어"><a href="#필요-용어" class="headerlink" title="필요 용어"></a>필요 용어</h1><ul><li>장고 프로젝트 : 장고 웹 프레임워크를 기반으로 한 웹 애플리케이션을 지칭합니다.</li><li>장고 앱 : 프로젝트의 한 기능을 표현하기 위해 디자인된 작은 라이브러리를 지칭합니다.</li></ul><p>##One Django Project has many Apps! #<br>앱 중 일부는 프로젝트 내부적으로 한번만 이용되고 재사용되지 않기도 합니다.<br>또는 때때로 외부 장고 패키지를 지칭하기도 합니다.</p><ul><li>INSTALLED_APPS : 프로젝트에서 이용하려고 settings.py 에 설정한 장고 앱들을 지칭합니다.</li><li>Third Party Django Packages : 재사용이 가능한 플러그인 형태로 이용 가능한 Django 앱을 지칭합니다.</li></ul><h1 id="앱-이름-설정시-권장사항"><a href="#앱-이름-설정시-권장사항" class="headerlink" title="앱 이름 설정시 권장사항"></a>앱 이름 설정시 권장사항</h1><ul><li>PEP-8 규약에 준수해야합니다.</li><li>단수형 명사를 사용합니다. (복수형 명사를 사용한 경우, 의미상 혼란을 야기할 수 있습니다.)</li></ul><h1 id="확신-없이는-앱을-확장하지-않도록-합니다"><a href="#확신-없이는-앱을-확장하지-않도록-합니다" class="headerlink" title="확신 없이는 앱을 확장하지 않도록 합니다"></a>확신 없이는 앱을 확장하지 않도록 합니다</h1><ul><li>앱들은 될 수 있으면 작게 유지하도록 합니다.</li><li>작은 앱 여러 개 구성하는 것이 훨씬 나은 구성입니다.</li></ul><hr><h1 id="Django-Project-Directory-levels-Django-구성-레벨"><a href="#Django-Project-Directory-levels-Django-구성-레벨" class="headerlink" title="Django Project Directory levels (Django 구성 레벨)"></a>Django Project Directory levels (Django 구성 레벨)</h1><p>startproject : 삼단 방식(three-tiered) 기반 구조가 생성</p><ol><li><p>최상위 레벨 : 저장소 루트 <strong>&lt;repository-root&gt;</strong></p><ul><li>배포에 필요한 다른 파일 등 중요한 내용이 위치합니다.</li><li>구성요소<ul><li>config : 프로젝트 전반에 걸친 settings 파일</li><li>manage.py</li><li>media : 개발 용도로 이용되는 디렉터리이며, 사용자가 업로드한 미디어 파일이 저장된다. 배포시에는 동작되지 않습니다.</li><li>static : CSS, JS, 필요 Image 등 사용자가 아닌, App 자체에서 필요한 정적 파일들이 존재합니다.</li><li>templates : 시스템 통합 템플릿 파일(html  파일 등)을 저장합니다</li></ul></li></ul></li><li><p>두 번째 레벨 : 프로젝트 루트 <strong>&lt;django_project_root&gt;</strong></p><ul><li>저장소 루트 디렉터리 안에서 실행하면 생성된 Django 프로젝트가 프로젝트 루트가 됩니다.</li></ul></li><li><p>세 번째 레벨 : 설정 루트 <strong>&lt;configuration_root&gt;</strong></p><ul><li>settings 모듈과 기본 URLConf (urls.py) 가 저장되는 장소입니다.<br>이는 __init__.py 모듈이 존재하는 파이썬 패키지 형태와 유사합니다.</li><li>django-admin.py start-project 명령으로 생성된 파일의 일부입니다.</li></ul></li></ol><hr><h1 id="Modules-in-an-App-앱-모듈"><a href="#Modules-in-an-App-앱-모듈" class="headerlink" title="Modules in an App (앱 모듈)"></a>Modules in an App (앱 모듈)</h1><h2 id="전역-환경이-아닌-앱-레벨에서-적용되는-모듈들"><a href="#전역-환경이-아닌-앱-레벨에서-적용되는-모듈들" class="headerlink" title="전역 환경이 아닌, 앱 레벨에서 적용되는 모듈들"></a>전역 환경이 아닌, 앱 레벨에서 적용되는 모듈들</h2><h3 id="공통-앱-모듈"><a href="#공통-앱-모듈" class="headerlink" title="공통 앱 모듈"></a>공통 앱 모듈</h3><p>__init__.py<br>admin.py<br>forms.py<br>management/<br>migrations/<br>models.py<br>templatetags/<br>tests/<br>urls.py<br>views.py</p><h3 id="비공통-앱-모듈"><a href="#비공통-앱-모듈" class="headerlink" title="비공통 앱 모듈"></a>비공통 앱 모듈</h3><p><strong>behaviors.py</strong> : 모델 믹스인 위치에 대한 옵션<br><strong>constants.py</strong> : 앱 레벨에서 이용되는 세팅을 저장하는 장소의 이름<br><strong>context_processors.py</strong><br><strong>decorators.py</strong> : 데코레이터가 존재하는 곳<br><strong>db/</strong> : 여러 프로젝트에서 이용되는 커스텀 모델이나 컴포넌트<br><strong>exceptions</strong><br><strong>fields.py</strong> : 폼 필드 이용에 쓰인다. db/ 패키지 생성으로도 충분하지 못한 필드가 존재할 때 모델 필드에 이용됩니다.<br><strong>factories.py</strong> : 테스트 데이터 팩터리 파일<br><strong>helpers.py</strong> : 헬퍼 함수. 뷰와 모델을 가볍게 하기 위해 뷰와 모델에서 추출한 코드를 저장하는 장소입니다. (utils.py와 기능적으로 유사합니다.)<br><strong>managers.py</strong> : models.py 가 너무 커질 경우, 일반적인 해결책으로 커스텀 모델 매니저가 여기에 이동됩니다.<br><strong>middleware.py</strong><br><strong>signals.py</strong> : 커스텀 시그널을 제공하는 것에 대한 대안으로, 커스텀 시그널을 넣기 유용한 공간입니다.<br><strong>utils.py</strong> : 뷰와 모델을 가볍게 하기 위해 뷰와 모델에서 추출한 코드를 저장하는 장소입니다.<br><strong>viewmixins.py</strong> : 뷰 믹스인을 이 모듈로 이전함으로써, 뷰 모듈과 패키지를 더 가볍게 할 수 있습니다.</p><p><br><br><br><em>- 도서참고 : The Scoops of Django(프로그래밍인사이트)</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;필요-용어&quot;&gt;&lt;a href=&quot;#필요-용어&quot; class=&quot;headerlink&quot; title=&quot;필요 용어&quot;&gt;&lt;/a&gt;필요 용어&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;장고 프로젝트 : 장고 웹 프레임워크를 기반으로 한 웹 애플리케이션을 지칭합니다.&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="Programming" scheme="https://wgtech.github.io/categories/Programming/"/>
    
      <category term="Framework" scheme="https://wgtech.github.io/categories/Programming/Framework/"/>
    
      <category term="Django" scheme="https://wgtech.github.io/categories/Programming/Framework/Django/"/>
    
    
      <category term="Programming" scheme="https://wgtech.github.io/tags/Programming/"/>
    
      <category term="Framework" scheme="https://wgtech.github.io/tags/Framework/"/>
    
      <category term="Python" scheme="https://wgtech.github.io/tags/Python/"/>
    
      <category term="Django" scheme="https://wgtech.github.io/tags/Django/"/>
    
      <category term="Django 2" scheme="https://wgtech.github.io/tags/Django-2/"/>
    
  </entry>
  
  <entry>
    <title>Anaconda로 Python 3.x 가상 환경 만들기</title>
    <link href="https://wgtech.github.io/posts/2019/05/22/Make-Python-3-Virtualenv-Anaconda/"/>
    <id>https://wgtech.github.io/posts/2019/05/22/Make-Python-3-Virtualenv-Anaconda/</id>
    <published>2019-05-22T01:58:00.000Z</published>
    <updated>2019-10-28T13:52:48.692Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Anaconda 버전 확인</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda --version</span><br></pre></td></tr></table></figure><br><blockquote><p>가상 환경 추가</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda create --name '이름' python='버전'</span><br><span class="line"><span class="meta">#</span> ex) conda create --name wgpydev python=3.7</span><br></pre></td></tr></table></figure><br><blockquote><p>추가된 가상 환경 확인</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda info --envs</span><br></pre></td></tr></table></figure><br><blockquote><p>가상 환경 활성화 / 비활성화</p></blockquote><figure class="highlight shell"><figcaption><span>가상 환경 활성화</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda activate '가상 환경 이름'</span><br><span class="line"><span class="meta">#</span> ex) conda activate wgpydev</span><br></pre></td></tr></table></figure><figure class="highlight shell"><figcaption><span>가상 환경 비활성화</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda deactivate '가상 환경 이름'</span><br><span class="line"><span class="meta">#</span> ex) conda deactivate wgpydev</span><br></pre></td></tr></table></figure><br><blockquote><p>Anaconda Prompt 빠른 진입</p></blockquote><figure class="highlight shell"><figcaption><span>Mac 경우</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/Users/'계정명'/.anaconda/navigator/a.tool; exit;</span><br><span class="line"><span class="meta">#</span> ex) ~/.anaconda/navigator/a.tool; exit;</span><br></pre></td></tr></table></figure><br>    <blockquote><p>ipykernel 설치</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ipykernel</span><br></pre></td></tr></table></figure><br><blockquote><p>Jupyter notebook 가상환경 생성을 위한 Kernel 추가</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -m ipykernel install --user --name '가상 환경 이름' --display-name "kernel 이름"</span><br><span class="line"><span class="meta">#</span> ex) python -m ipykernel install --user --name wgpydev --display-name "wgpykernel"</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Anaconda 버전 확인&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/sp
      
    
    </summary>
    
      <category term="Programming" scheme="https://wgtech.github.io/categories/Programming/"/>
    
      <category term="Language" scheme="https://wgtech.github.io/categories/Programming/Language/"/>
    
      <category term="Python" scheme="https://wgtech.github.io/categories/Programming/Language/Python/"/>
    
    
      <category term="Programming" scheme="https://wgtech.github.io/tags/Programming/"/>
    
      <category term="Language" scheme="https://wgtech.github.io/tags/Language/"/>
    
      <category term="Python" scheme="https://wgtech.github.io/tags/Python/"/>
    
      <category term="Python 3" scheme="https://wgtech.github.io/tags/Python-3/"/>
    
      <category term="Virtualenv" scheme="https://wgtech.github.io/tags/Virtualenv/"/>
    
      <category term="Anaconda" scheme="https://wgtech.github.io/tags/Anaconda/"/>
    
  </entry>
  
  <entry>
    <title>Data Binding 작업 후, &#39;data binding error: cannot find symbol class ... Impl&#39; 에러 발생시</title>
    <link href="https://wgtech.github.io/posts/2019/04/26/Android-Data-Binding-Error-symbol-class-Impl/"/>
    <id>https://wgtech.github.io/posts/2019/04/26/Android-Data-Binding-Error-symbol-class-Impl/</id>
    <published>2019-04-26T03:45:00.000Z</published>
    <updated>2019-10-28T13:52:48.684Z</updated>
    
    <content type="html"><![CDATA[<h1 id="데이터-바인딩-Data-Binding-에러날-경우-data-binding-error-cannot-find-symbol-class-Impl’"><a href="#데이터-바인딩-Data-Binding-에러날-경우-data-binding-error-cannot-find-symbol-class-Impl’" class="headerlink" title="데이터 바인딩(Data Binding) 에러날 경우(data binding error : cannot find symbol class .. Impl’)"></a>데이터 바인딩(Data Binding) 에러날 경우(data binding error : cannot find symbol class .. Impl’)</h1><h2 id="왜-발생할까요"><a href="#왜-발생할까요" class="headerlink" title="왜 발생할까요?"></a>왜 발생할까요?</h2><ul><li>개발 중, 불필요한 캐싱 파일이나 기존에 작업하신 부분에 대한 오류 파일 등이 생길 수 있습니다. 따라서 이를 제거하고 다시 빌드를 거쳐야합니다.</li></ul><h2 id="해결-방법"><a href="#해결-방법" class="headerlink" title="해결 방법"></a>해결 방법</h2><ul><li>본 해결방법은 Android Studio 프로그램을 기준으로 설명합니다.</li><li>아래와 같은 방법들 중 한 가지를 택해서 해결하시면 됩니다.</li></ul><h3 id="방법-1-Debug-또는-Release-되어-있는-폴더를-Clean-합니다"><a href="#방법-1-Debug-또는-Release-되어-있는-폴더를-Clean-합니다" class="headerlink" title="방법 1. Debug 또는 Release 되어 있는 폴더를 Clean 합니다."></a>방법 1. Debug 또는 Release 되어 있는 폴더를 Clean 합니다.</h3><ul><li>Build &gt; Clean Project </li></ul><h3 id="방법-2-해당-Project를-Rebuild-합니다"><a href="#방법-2-해당-Project를-Rebuild-합니다" class="headerlink" title="방법 2. 해당 Project를 Rebuild 합니다."></a>방법 2. 해당 Project를 Rebuild 합니다.</h3><ul><li>Build &gt; Rebuild Project</li></ul><p><img src="/images/2019/04/26/Android-Data-Binding-Error-symbol-class-Impl/Error-symbol-class-Impl-Solution1_2.png" alt="방법 1과 2 : Project를 Clean 하거나 Rebuild 합니다." title="방법 1과 2 : Project를 Clean 하거나 Rebuild 합니다."></p><br><h3 id="방법-3-Android-Studio를-통해-축적된-Cache를-제거하고-재시작합니다"><a href="#방법-3-Android-Studio를-통해-축적된-Cache를-제거하고-재시작합니다" class="headerlink" title="방법 3. Android Studio를 통해 축적된 Cache를 제거하고 재시작합니다."></a>방법 3. Android Studio를 통해 축적된 Cache를 제거하고 재시작합니다.</h3><ul><li>File &gt; Invalidate Caches/Restart…에서 Invalidate Caches and Restart 선택</li></ul><p><img src="/images/2019/04/26/Android-Data-Binding-Error-symbol-class-Impl/Error-symbol-class-Impl-Solution3.png" alt="방법 3 : 축적된 Cache를 제거하고 재시작합니다." title="방법 1과 2 : Project를 Clean 하거나 Rebuild 합니다."></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;데이터-바인딩-Data-Binding-에러날-경우-data-binding-error-cannot-find-symbol-class-Impl’&quot;&gt;&lt;a href=&quot;#데이터-바인딩-Data-Binding-에러날-경우-data-binding-er
      
    
    </summary>
    
      <category term="Programming" scheme="https://wgtech.github.io/categories/Programming/"/>
    
      <category term="Framework" scheme="https://wgtech.github.io/categories/Programming/Framework/"/>
    
      <category term="Android" scheme="https://wgtech.github.io/categories/Programming/Framework/Android/"/>
    
    
      <category term="Programming" scheme="https://wgtech.github.io/tags/Programming/"/>
    
      <category term="Framework" scheme="https://wgtech.github.io/tags/Framework/"/>
    
      <category term="Android" scheme="https://wgtech.github.io/tags/Android/"/>
    
      <category term="Data Binding" scheme="https://wgtech.github.io/tags/Data-Binding/"/>
    
      <category term="Android Studio" scheme="https://wgtech.github.io/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>Write the docs 2019 서울 : &#39;블로깅과 테크니컬 라이팅</title>
    <link href="https://wgtech.github.io/posts/2019/03/23/Write-the-docs-2019-Seoul/"/>
    <id>https://wgtech.github.io/posts/2019/03/23/Write-the-docs-2019-Seoul/</id>
    <published>2019-03-23T05:00:00.000Z</published>
    <updated>2019-10-28T13:52:48.699Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>노트 필기식으로 작성한 내용이기에, 존댓말을 사용하지 않은 점 참고하시기 바랍니다.<br>또한, 다소 정리되지 않는 부분이 많은 점도 참고하시기 바랍니다.</p></blockquote><p>Write the docs 2019 서울 : 블로깅과 테크니컬 라이팅<br>2019년 3월 23일 토요일 오후2시<br>마루 180 이벤트홀</p><h2 id="소개"><a href="#소개" class="headerlink" title="소개"></a>소개</h2><p>Read the Docs : 문서 호스팅 서비스<br>Write the Docs (Portland, Oregon)<br><a href="https://slack.writethedocs.org" rel="external nofollow noopener noreferrer" target="_blank">https://slack.writethedocs.org</a><br>김대권님 (서울)<br>‘#wtdseoul’</p><br><h2 id="글-쓰는-개발자-모임-글또-변성윤-님-쏘카-14시-30분-시작"><a href="#글-쓰는-개발자-모임-글또-변성윤-님-쏘카-14시-30분-시작" class="headerlink" title="글 쓰는 개발자 모임 - 글또 (변성윤 님 - 쏘카) (14시 30분 시작)"></a>글 쓰는 개발자 모임 - 글또 (변성윤 님 - 쏘카) (14시 30분 시작)</h2><p>글을 꾸준히 작성하기 위해 만든 모임 이야기<br><a href="https://zzsza.github.io" rel="external nofollow noopener noreferrer" target="_blank">https://zzsza.github.io</a> 쏘카 데이터 그룹 머신러닝 엔지니어<br>2017년 12월 (까먹는게 싫어서) 개발블로그 시작<br>글또 : 글쓰는 또라이가 세상을 바꾼다 (평균 연차 1~3년차 / 주니어 개발자)<br>(*강제로 글을 쓰게 만드는 환경을 제공, 글을 쓰면 환급받는 방식으로 습관을 들임)<br>=&gt; 글 쓰는 습관 형성을 목표로<br>글 공유 플랫폼 -&gt; 페이스북 그룹으로 공유.</p><p>좋은 테마 찾고 Fork 하고 Repo 이름 바꾸고 git clone 해서 로컬 받고 _posts 에 글 작성</p><p>시리즈 글, 번역, 해결 방안, 참여후기, 정보 전달글, 프로젝트 글, 회고/일지 글, 책리뷰, …</p><p>에러가 왜 발생했는지, 원인부터 파악하여 해결방안까지 작성.</p><ul><li>필히 점검하는 것<br>오타 없는가?<br>글 전개 방식이 자연스러운가?<br>처음 보는 사람도 이해가능한가?<br>블로그 가독성은 어떤가? (심지어 블로그 디자인도 점검.)<br>이미지 품질은 어떤가?</li></ul><p>틀린내용도 쓸 수 있다 (책을 쓰지 않는 이상은, 블로그는 나만 보는 전용으로 만드는 것이기때문에 그냥 고치면 되지~로 접근하면 된다)</p><p>페이스북 그룹에서 슬랙으로 변환 후 더욱 더 적극적이고 다양한 커뮤니티가 형성되어 고민도 나누고 해결책도 강구하는 계기가 되었음.</p><p>25명 글을 2주마다 피드백하심.</p><ul><li>결과<br>구성원들의 글쓰기 역량 상승, 높은 충성도, 이직할 때 도움, 양질의 글로 개발 생태계에 기여, 사람을 만날 수 있는 연결 고리가 되었음.</li></ul><p>자동화에 대한 내용 : 운영 자동화 -&gt; 운영하는 사람의 리소스 효율적으로 사용<br>(Google Calendar + Slack 연동은 테스트, 추후 봇을 만들어서 오타 및 띄어쓰기 점검하겠다고 하심)</p><p>==&gt; 어찌됐든 여전히 글 쓰는 것은 어렵다…..</p><p>예치금이 존재하는 강제 글쓰기 모임 (1기수 : 6개월)<br>상호피드백<br>꾸준한 동기<br>같은 분야의 사람들끼리 좋은 시너지<br>형태는 없고 린하게 방식을 바꾸기</p><p><a href="mailto:zzsza@naver.com" rel="external nofollow noopener noreferrer" target="_blank">zzsza@naver.com</a> (메일, 페이스북) data.scientist(인스타그램)</p><br><h2 id="기술-블로그-생존-전략-구글-시대의-글쓰기-김대권-님-당근마켓"><a href="#기술-블로그-생존-전략-구글-시대의-글쓰기-김대권-님-당근마켓" class="headerlink" title="기술 블로그 생존 전략: 구글 시대의 글쓰기 (김대권 님- 당근마켓)"></a>기술 블로그 생존 전략: 구글 시대의 글쓰기 (김대권 님- 당근마켓)</h2><p>당근마켓 소프트웨어 엔지니어 (인프라/클라우드)<br>44bits.io 팀블로그 운영중이심.<br>=&gt; 따라서 ‘44bits.io 생존전략’ 이야기</p><p>왜 글을 쓰고 ‘공개’ 할까요?<br>사람들은 블로그의 글을 어떤 경로로 읽게 될까요?</p><p>소셜미디어(Twitter 나 Facebook)를 통한 유입</p><ul><li>즉각적인 반응 : 기분이 좋아요.  (심지어 잘 공유되면 수백, 수천명이 유입됨)</li><li>짧은 생명력 : 짧으면 3일, 길어도 1주일. (이 것은 Tweet 의 특징과 유사함.)</li><li>팔로워가 없으면, 효과도 없다.<br>Oraganic Search ( = 구글 검색)</li><li>2014년 1월에 작성한, 도커(Docker) 튜토리얼 글 작성시, 당시 아무도 사용하지 않았던 기술이었기에 그 때부터 지금까지 꾸준히 읽혀지고 있음.</li><li>지속적인 유입 : 즉, 검색엔진에 노출이 되면 짧으면 몇 주, 길면 몇개월</li><li>느린 반응 : 예측이 어렵다. 즉각적인 반응이 없음. (구글은 방문 신뢰성을 기반으로 톱에 산정) .. 그러나 점차 쌓이면 지속적으로 유입이 될 수 있다.<br>즉, 컨텐츠가 더 잘 발견 되기 위해선, 소셜 공유로 단기적으로 방문자 만들고, 검색 유입을 통해 장기적인 관점을 갖춰져야한다.</li></ul><p>본론! 어떻게 하면 글이 검색될까?<br>(구글은 왜 내 글을 검색 결과에 보여줄까? = 다른 사람들의 문서는 어떻게 선택될까?)<br>검색엔진은 거대한 추천 시스템이다.<br>즉, 구글은 수집한 문서들 가운데 ‘검색 키워드’에 대해 가장 ‘추천할만한 글’을 정렬해서 보여준다. 공신력이 높다고해서 꼭 보여주는 것이 아니다 (*구글 ‘Search Quality Rating General Guidelines’ 참고.. 예제도 파악해보자)</p><p>좋은 기술 블로그를 만들어 나가기 위한 8가지 제언 (nacyot 작성, 44bits 기술 블로그에서 공개)</p><p><strong>문서 관점 : 하나의 웹 문서는 그 자체로 완결되어있다. 구글은 사이트가 아니라 웹문서를 찾아준다.</strong><br>웹문서 하나하나 질을 높이는 것이 가장 중요하다.<br>메타데이터(문서에 숨겨진 데이터, 기계만이 알아보는 데이터), 제목, 본문 구조<br>(*김대권님은 메타데이터가 중요하지 않는다고 생각하신다)<br>1) 좋은 제목은 본문의 핵심 키워드가 포함되어야한다. (물론, 키워드만 넣어서 억지로 끌어올리는 방법은 먹히지 않는다)<br>2) 좋은 제목은 본문을 잘 드러내야한다.<br>3) 좋은 본문이 없다면 좋은 제목도 가치가 없다.</p><p><strong><u>구글은 질 좋은 컨텐츠를 알아볼 수 있다.</u></strong></p><ol><li>글을 잘 완성시켜야한다. (사이트 자체에 신뢰성을 떨어뜨리는 일인다.)</li><li>단순히 대충 정리하던 내용을 작성하면 안된다.</li><li><strong><u>지양해야하는 글 = 추천할 가치가 없는 글들 (책도 마찬가지)</u></strong><br> 완성되지 않는 문장들로 작성된 글<br> 개인 노트를 그대로 공개한 글<br> 직접 작성한 내용이 없는 글<br> 설명보다 코드가 긴 글<br> 링크만 모아놓은 글</li><li>적절한 분량의 글을 작성하자.<br> 7분안에 읽히는 글을 작성하자 (1페이지 1분, 1페이지 800자 계산시, 약 5600자 정도)<br> 짧은 뉴스는 2천-3천자 내외<br> 긴 튜토리얼은 2만 - 3만자 내외<br> 이 것보다 짧은 글은 지양하자. 이 것보다 긴 글은 나눠서 쓰는 걸 고려해보자.</li><li>글의 형식을 정하자.<br> What nobody tells you about documentation 참고. (* Read the docs는 확실히 차별화가 있음)<br> Tutorials, how to guides, references 위주<br> 블로그에는 ‘튜토리얼’, ‘하우투’, ‘해설’, ‘뉴스기사’, ‘에세이(…는 좀 애매하다)’ 위주로 작성하는 것이 좋다.</li><li>… 사실은 좋은 미디어들은 이미 지키고 있는 기본 중의 기본! 그리고 좋은 글을 작성한다.</li></ol><p><strong>사이트 관점 : 웹문서와 달리, 개별적으로 평가 받는 것은 아니다.</strong><br>PageRank 가 중요한 이유. (특히, Wikipedia는 1위. 따라서 wikipedia 에서 referred 된 링크는 순위가 높다)</p><p>컨텐츠 관리가 가능한 도구를 사용하자.</p><ul><li>Static Site Generator를 주로 사용하는다. 그러나 Headless CMS사용하는 것을 추천한다.<br>보존 그리고 보존</li><li>10년 이상 유지되는 기술 블로그를 떠올려보자. 많은 사이트들이 자연도태되어 5년 이내로 사라진다. 즉, 장기적으로 키울 생각을 가지고 운영해보자.</li></ul><p><strong>실전편 (처음 블로그를 시작하는 분들을 위하여)</strong><br>관심사 -&gt; 키워드 -&gt; 글쓰기 -&gt; 공유</p><ol><li>먼저 자신이 자신있는 관심사들을 정리해보세요.</li><li>글을 쓰고 싶은 키워드를 정하고 구글에서 검색해보세요.</li><li>아직 좋은 글이 별로 없는(!), 적당한 범위의 키워드를 정합니다.<br>(ex : 파이썬 &gt; (적합 키워드) &gt; 파이썬 array 타입의 reverse 함수 사용법)</li><li>5천자 이상의 글을 작성. 제목에는 반드시 키워드를 포함. 구조화된 글을 가지고 작성하자.</li><li>게시하고 공유하자.</li><li>기다리자 (**존버) = 티끌모아 태산</li></ol><ol start="3"><li>To. 지식 공유를 시작하려는 개발자<br> From. 당신의 든든한 서포터 Developer Relations 팀 (홍연의 님 LINE+)</li></ol><ul><li>이메일 : <a href="mailto:yeoneui.hong@linecorp.com" rel="external nofollow noopener noreferrer" target="_blank">yeoneui.hong@linecorp.com</a><br>LINE+ DevRel 팀에 입사하신지 4개월차.</li></ul><p><strong>Developer Relations  (DevRel) 팀이란??</strong><br>국내에 많이 존재하는 것이 아니다.<br>(회사마다 좀 다를 수 있고, 같은 팀안에서도 다른 일을 하는 분들이 많다.)<br>기술 블로그 운영 (engineering.linecorp.com), 페이스북 운영 (fb.com/line.developers), 트위터 운영(@line_developers)<br>개발 컨퍼런스 / 세미나 / 커뮤니티 후원 (메일로 문의)<br>LINK DEV, LINE Developers Meetup (19년 4월 예정)<br>즉, 브랜딩 작업, 지식공유 팀</p><p><strong>Developer Relations 팀엔 어떻게 오게 되었나???</strong><br>첫 직장은 IT 도서 기획…<br>분야는 IT, 주변엔 개발자, 잘(?) 할 수 있는건 콘텐츠 기획, 재밌는 건 마케팅, 보람을 느낀 건 내가 한 일이 누군가에게 도움이 된다는 것.</p><p><strong>Public Relations (PR) 팀 vs. Developer Relations (DR)팀</strong> …으로! 보면 된다.    </p><p>To. 지식 공유를 시작하려는 개발자에게<br>블로그, 책, 영상, 강의, 발표 … 는 힘들다…<br>지식공유 = 내 인생의 또 다른 기회를 가져올 수 있다!</p><p>Technical Writing 팀이 운영중이고, 담당하시는 개발 인력들이 직접 작성함.<br>작성에 도움이 될 수 있도록 피드백을 제공. 다른 나라쪽 DR팀에서 직접 번역도 검수.</p><h2 id="사용자를-외면하지-않는-릴리스-노트-조은별-님-시큐아이"><a href="#사용자를-외면하지-않는-릴리스-노트-조은별-님-시큐아이" class="headerlink" title="사용자를 외면하지 않는 릴리스 노트 (조은별 님 - 시큐아이)"></a>사용자를 외면하지 않는 릴리스 노트 (조은별 님 - 시큐아이)</h2><ul><li>이메일 : <a href="mailto:jogamza@gmail.com" rel="external nofollow noopener noreferrer" target="_blank">jogamza@gmail.com</a><br>기술 문서를 작성하는 일을 하심.<br>어떤 고민을 하면서 주로 어떤 식으로 작성하시는지 경험을 공유하심.<br>IT 출판사 편집자 -&gt; 보안회사 테크니컬 라이터 개발팀 -&gt; 기술 + 글쓰기</li></ul><p><strong>테크니컬 라이터의 일</strong><br>    사용자 매뉴얼, 릴리스노트, API 문서<br>    화이트페이퍼, UI 용어/메시지, 개발 계획서, 테스트 계획서<br>    기술블로그 (온라인 콘텐츠), IT 도서 …<br>    주로, 사용자 매뉴얼, 릴리스노트, API 문서, 화이트페이퍼, UI 용어/메시지 까지하심.</p><p><strong>릴리스 노트의 정의</strong></p><ol><li>문제를 정의하고 해결점을 기술한 문서<ol><li>신규 기능</li><li>개선된 기능</li><li>오류 수정</li><li>개발자 코멘트</li></ol></li><li>연관 없는 항목이 나열된 목록</li><li>간결하고 요약된 문장</li><li>구성 포맷</li></ol><p><strong>날짜, What’s New, Bug fixes 등으로 구성</strong><br>대상이 누구인지에 따라 릴리스노트를 작성하는 방식이 좀 다르다.</p><ul><li>App Store에 올라온 릴리스 노트들 (대강 사용된 노트와 자세히 써 있는 노트)</li><li>Blizzard 게임 Overwatch  게이머들을 위한 릴리스노트</li><li>Github Desktop 개발자를 위한 릴리스 노트</li><li>시큐아이 릴리스노트 (문서에 대한 구조/카테고리를 일관성있게 작성하는 것을 초점으로 한 릴리스노트)</li></ul><p><strong>릴리스 노트의 포맷 예제</strong><br>[신규 기능]</p><ul><li>XX 메뉴에 고급 검색 기능을 추가했습니다.</li><li>OO 메뉴에 검색을 저장하고 나중에 다시 실행할 수 있는 기능을 추가했습니다.<br>[개선된 기능]</li><li>보기(Show) 메뉴에서 ‘다음 일주일간의 약속’과 ‘활성상태의 약속’에 접근하는 속도를 개선했습니다.</li></ul><p><strong>릴리스 노트 사전 준비 : 문제, 원인, 해결 식으로 진행</strong><br> 더블플레이 슬라이딩 규칙이 신설되었다.</p><ol><li>문제 : 더블플레이 상황에서 연계 플레이 하는 유격수나 2루수 부상 위험이 크다.</li><li>원인 : 베이스에 닿을 수 있다 판단되면 수비 방해를 선고하고 …</li><li>해결 : 네이버후드 플레이는 인정되지 않으며, 수비수는 반드시 베이스를 정확히 밟아야하고 주자도 베이스만을 향해서만 슬라이딩을 해야한다.</li></ol><p>야구 팬을 위한 릴리스 노트 작성 : 코멘트 등을 추가하여 더 쉽게 접근이 가능하도록 한다.<br>[더블 플레이시 슬라이딩 규정 신설]<br>주자가 더블 플레이를 막는 목적으로 고의적으로 접촉하거나 시도할 경우, 주자와 타자를 모두 아웃 될 수 있습니다.<br>네이버후드 플레이가 인정되지 않으므로, 수비수는 반드시 베이스를 밟고 있어야합니다.</p><ul><li>네이버후드 플레이 : 2루 베이스를 밟지 않아도 아웃으로 선언해주는 암묵적인 행위</li></ul><p><strong>야구 전문가를 위한 릴리스 노트 : 다소 간결하게 작성이 가능하다.</strong><br>[더블 플레이 시도시 슬라이딩 규정 신설]<br>주자는 올바르게 베이스를 위해 슬라이딩해야합니다.<br>수비측 내야수는 반드시 베이스를 밟고 있어야합니다.<br>네이버 후드 플레이가 인정되지 않습니다.</p><p><strong>릴리스 노트 작성시 고려할 것</strong><br>제품/사용자 특성 :누가 읽는 것인가? 일관된 문서 포맷 : 어떻게 읽는 것인가?<br>세 줄, 다섯줄 요약 : 무엇을 읽는 것인가?<br>릴리스 노트 포맷에 대한 룰을 정확히 정하자.</p><h2 id="개발자는-왜-블로그를-해야하나요-이동욱-님-우아한-형제들"><a href="#개발자는-왜-블로그를-해야하나요-이동욱-님-우아한-형제들" class="headerlink" title="개발자는 왜 블로그를 해야하나요? (이동욱 님 - 우아한 형제들)"></a>개발자는 왜 블로그를 해야하나요? (이동욱 님 - 우아한 형제들)</h2><p>왜 블로그를 해야하는지, 블로그를 왜 운영을 잘해야하는지에 포커스</p><p>우아한 형제들 백엔드 개발, 한국 JetBrains 사용자 모임 운영진, jojoldu.tistory.com 운영<br>트래픽과 데이터가 많기에 성장할 여지가 있는 회사로 PM</p><p>블로그 주말 방문은…..ㅋㅋㅋㅋㅋ</p><p>티스토리 스킨으로 아이덴티티 보여줌.<br>티스토리 댓글 대신 Github 댓글로 교체.<br>티스토리는 마크다운 파일을 지원안하기 때문에 markdown-tistory 라이브러리 만듦.<br>=&gt; 블로그 좋아하고 개선하고 혜택을 받은 사람이라고 말함.</p><p><strong>블로그를 하면 좋은 이유</strong></p><ol><li>광고비 : Google AdSense 에서 매일 $1 ~ $5 (PV 1만에 $5 - 10 정도)</li><li>기고 &amp; 집필 요청 : 출판제의, 신간 도서 추천평, 신간 도서 칼럼, 잡지 기고 등등</li><li>세미나 초대권 : 이동욱 님은 OKKY 세미나 연사로 초대되기도 하심.</li><li>인지도 : 타회사 Wiki에 내 블로그가 링크, referred 됨. </li><li>인터뷰와 식사 제공(?) : 마이크로소프트웨어 인터뷰, 인프런 인터뷰</li><li>이직 : 멀리서 세미나 발표로, 책으로 보기만 했던 개발자분의 채용 추천, 이력서 코칭도 직접 받음.<ol><li>추후에 이동욱님 블로그에 기재하심.</li></ol></li><li>사내 기술 블로그 : 작성 요청에 부담이 올 수 있음. (지원자들이 사내기술 블로그 작성할 수 있다?? 이걸로 과연.. 지원할까?)</li></ol><p><strong>블로그를 하면 좋은 이유(2) : 왜 블로그를 해야하나요?</strong><br>연봉 / 회사 / 직위 / 재산을 빼고 ‘나 자신’을 어떻게 표현할 수 있을까…?<br>나는 무슨 개발자일까? -&gt; 블로그가 그걸 가능케한다!개발자들에게 블로그는 나 자신을 나타내는 아이덴티티!</p><p>결말<br><strong><u>젠킨스 마스터 책 “아무리 흐린 잉크라도 좋은 기억력보다 낫다.”</u></strong></p><br><h2 id="개발-관련-기술-블로그-운영하기-변정훈-님-BlockchainOS"><a href="#개발-관련-기술-블로그-운영하기-변정훈-님-BlockchainOS" class="headerlink" title="개발 관련 기술 블로그 운영하기 (변정훈 님 - BlockchainOS)"></a>개발 관련 기술 블로그 운영하기 (변정훈 님 - BlockchainOS)</h2><p>(outsider) 님<br>2007년 5월 15일 12시 25분 첫 글 집필<br>전체 연도별 글 (총 1,413개)</p><p><strong>글 작성 목표</strong><br>3일에 글 1개<br>글 1개에 짧게는 2-4시간<br>글 1개에 길게는 2-3일<br>퇴고는 잘 하지 않는다.<br>문장을 다듬는 거에 너무 시간을 허비지 않는다.</p><p><strong>글 주제</strong><br>개발하면서 적을 수 있는건 전부<br>새로운 도구, 환경 설치/설정<br>새로 알게된 라이브러리/도구의 사용법<br>최근에 겪고 해결한 장애(트러블슈팅)와 처리방법<br>개발관련 공유할 만한 내용<br><strong><u>글을 쓸 주제는 항상 생각하고 있다</u></strong></p><p>나보다 모르는 사람 —— 나(outsider 님) —— 나 보다 잘 하는 사람</p><p>Day One 노트앱 사용</p><p>왜 개발 블로그를 운영하는가?<br>공부할 게 많으니까 개발 블로그를 운영한다. = 글쓰는 것이 곧 공부이다.</p><p><strong>처음에 글 쓴 이유</strong><br>배운걸 자꾸 잊어서<br>전에 설정해 본 적 있는데 기억이 안나서<br>겪어본 장애였는데 어떻게 해결했더라…</p><p><strong>어디에 적을까?</strong><br>개인 노트<br>TIL (Today I Learned)<br>공개 블로그 (outsider 님 선택)</p><p>블로그를 작성하는 것이 지식을 습득하는 과정,<br><strong><u>단순히 겪어보거나 읽어보는 지식 이상으로 습득하는 과정이 필요하다.</u></strong></p><p><strong><u>블로그는 회고와 비슷하다</u></strong></p><p><strong>글을 공개로 쓸 때 장점</strong><br>누구나(1년 또는 10년 뒤의 나) 이해할 수 있어야한다<br>글로 정리하려면 잘 알고 있어야한다<br>글로 정리하면서 다시 고민해 볼 수 있다<br>reputation이 1 올랐습니다</p><p><strong>글의 흐름</strong><br>하고자 했던 일 (Context)<br>경험한 문제 상황 정리 (격리된 상황)<br>시도해 본 방법(내가 아는 지식)<br>왜 동작이 안되는가? 왜 동작하는가?(가설)<br>문제 상황 재현<br>예제 코드<br>관련 링크<br>개념 설명</p><p><strong>Stack Overflow 에서 말하는 MCVE (최소한의, 완성된, 입증가능한 예제)</strong><br>Minimal : 문제를 재현할 수 있는 가장 적은 코드를 사용하라<br>Complete : 문제를 재현하는데 필요한 모든 부분을 제공해라<br>Verifiable : 실제로 해당 문제를 재현하는지 코드를 테스트해라<br>and Verifiable Example : 이를 위해 입증가능한 예제</p><p>알고 있는 내용이더라도 글로 적으려면 공부가 많이 필요하다<br>공유 문화를 좋아하신다<br>공유를 통해 남의 경험에서 배우고 시간을 줄인다<br>일하면서도 글을 많이 작성한다</p><ul><li>Slack</li><li>Issue Tracker</li><li>Wiki</li></ul><p><strong>글을 지속적으로 쓰려면 어떻게 해야하나요?</strong><br>저도 잘… (습관이 된 것 같아요)</p><p><strong>사람들이 많이 보는 글</strong><br>JavaScript에서 String을 Number 타입으로 바꾸기 (2009/08/19 01:09)<br>Ubuntu 의 apt-get 명령어 정리 (2009/06/23 02:52)<br>GET과 POST의 차이 (2009/03/31 22:53)<br>알고 있어야할 8가지 정규식 표현 from nettuts+<br>제발 a href=“#” 좀 쓰지 말자 (2008/10/22 22:41)</p><p>통계<br>Oragnic Search 위주</p><p>기술블로그는 Facebook 을 신경 안 쓸 수 없다<br>이 분 블로그도 주말에는…..ㅋㅋㅋㅋㅋ</p><p><strong>참고사항</strong><br>강규형 님 (Google Analytics 를 이용한 블로그 콘텐츠 인게이지먼트(Engagement) 추적)</p><p><strong>돈이 되나요?</strong> 안됩니다!</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;노트 필기식으로 작성한 내용이기에, 존댓말을 사용하지 않은 점 참고하시기 바랍니다.&lt;br&gt;또한, 다소 정리되지 않는 부분이 많은 점도 참고하시기 바랍니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Write the docs 2
      
    
    </summary>
    
      <category term="Seminar" scheme="https://wgtech.github.io/categories/Seminar/"/>
    
      <category term="Blogging" scheme="https://wgtech.github.io/categories/Seminar/Blogging/"/>
    
    
      <category term="Seminar" scheme="https://wgtech.github.io/tags/Seminar/"/>
    
      <category term="Notes" scheme="https://wgtech.github.io/tags/Notes/"/>
    
      <category term="Blogging" scheme="https://wgtech.github.io/tags/Blogging/"/>
    
      <category term="Seoul" scheme="https://wgtech.github.io/tags/Seoul/"/>
    
      <category term="마루180" scheme="https://wgtech.github.io/tags/%EB%A7%88%EB%A3%A8180/"/>
    
  </entry>
  
  <entry>
    <title>Google I/O Extended &#39;18 Incheon : What&#39;s new in Tensorflow</title>
    <link href="https://wgtech.github.io/posts/2018/07/07/Google-IO-Extended-Incheon-2018-Whats-New-In-Tensorflow/"/>
    <id>https://wgtech.github.io/posts/2018/07/07/Google-IO-Extended-Incheon-2018-Whats-New-In-Tensorflow/</id>
    <published>2018-07-07T06:42:00.000Z</published>
    <updated>2019-10-28T13:52:48.690Z</updated>
    
    <content type="html"><![CDATA[<p><strong>이건희(Invest Crypto, GDG 판교 운영자)</strong></p><h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><ol><li>Google DevFest 에서 이미 발표된 것이고, Google I/O를 통해 새로 발표함.</li><li>High-Level APIs<ul><li>TF Extension, TF Hub and TF Serving</li><li>Opportunities, challenges, and strategies to develop AI for everyone</li></ul></li><li>Codelab 적용 가능</li></ol><h1 id="본-세션"><a href="#본-세션" class="headerlink" title="본 세션"></a>본 세션</h1><h2 id="1-Tensorflow-js"><a href="#1-Tensorflow-js" class="headerlink" title="1. Tensorflow.js"></a>1. Tensorflow.js</h2><ol><li><p>기존은 Python 기반이었음. 그러나 이번에는 <strong>JavaScript</strong> 로도 돌릴 수 있음.</p></li><li><p>브라우저에서 작동하는 Tensorflow</p><ul><li>설치가 필요 없고, 상호작용이 가능하며, 머신러닝에 필요한 센서들을 작동 또는 입력에 따른 출력값을 취득할 수 있음.</li></ul></li><li><p>Layers API (Keras Model) - Core API (Tensorflow SavedModel)</p><ul><li>Deeplearn.js Low-Level 선형대수 연산을 Core API 로 작동하여 연산함.</li><li>Keras Model 과 SavedModel 구동 코드와 방식이 다르기 때문에 잘 생각하여 코딩해야한다.</li></ul></li><li><p>CDN으로 불러올 수 있기 때문에, 환경 설치에 대한 어려움이 덜 한다. 그러나 네트워크의 영향이 매우 크다.</p></li><li><p>Core API가 기초적인 사칙연산을 수행한다.</p></li><li><p>Demo : EMOJI SCAVENGER HUNT</p><blockquote><p>실시간으로 카메라로 받아오는 코드</p></blockquote> <figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pixels = tfc.fromPixels(camera.videoElement);</span><br><span class="line"><span class="comment">// 서버단에서 받아와 추론하면 cost 가 다량 발생할 수 있기 때문에, 클라이언트가 처리한다.</span></span><br><span class="line"><span class="comment">// 클라이언트가 곧바로 추론하는 방식.</span></span><br></pre></td></tr></table></figure></li><li><p>Node.js 에서도 GPU 연산이 가능하다. (Eco System + V8 speed)</p><blockquote><p>express 백엔드와 Tensorflow 를 하나로 묶을 수 있다.</p></blockquote></li><li><p>JavaScript 프로그래밍에 익숙해져있는 사람들은 굳이 Python 언어를 추가적으로 배울 필요가 없다.<br>(성능상에 차이가 정말 미묘한 근소차이기 때문이다.)</p></li><li><p>chromeOS 에 Linux Apps 실행이 가능하도록 개발되었다. 이런 점을 고려하자면 Tensorflow.js 도 충분히 만들 이유가 있겠다고 유추한다.</p></li><li><p><strong>모바일앱과 IoT는 Tensorflow LITE, 모바일/데스크탑 브라우저는 Tensorflow.js</strong></p></li></ol><br><h2 id="Tensorflow-LITE"><a href="#Tensorflow-LITE" class="headerlink" title="Tensorflow LITE"></a>Tensorflow LITE</h2><ol><li>클라이언트와 서버의 영상데이터를 추론하는 동안 막대한 네트워크 비용이 발생된다.</li><li>큰 모델의 크기를 감당할 만한 클라이언트가 아직 존재하지 않거나 그 기술이 미미하기 때문에 많이 보완해야한다.</li><li>공식홈페이지에서 데모를 제공하고 있기 때문에 확인해보자.</li></ol><br><h2 id="Tensorflow-HUB"><a href="#Tensorflow-HUB" class="headerlink" title="Tensorflow HUB"></a>Tensorflow HUB</h2><ol><li>모델을 로컬에 저장하고 로드하는 것이 아닌, HUB로부터 링크를 이용하여 로드하는(서비스를 제공하는) 방식.</li><li>미리 학습된 가중치와 그래프를 포함하는 모듈들, 재사용 및 재학습 가능.</li><li>사용법 : hub.Module(“링크…/<publisher>/&lt;Module 이름&gt;/<version>“<strong>[,trainable=True]</strong>)<ul><li><em>trainable : 내가 가지고 있는 모듈을 재학습해주는 파라미터 기능</em></li></ul></version></publisher></li><li>Google 이 제공하는 Modules<ol><li>Image - Inception, Mobilenet, NASNet, PNASNet, ResNet</li><li>Text : NNLM (한국어 지원)</li><li>Etc : Progan, Delf, I3D</li></ol></li><li>기존 모델 재사용 용이, 중복 배포 방지, 진입장벽 낮춤</li></ol><br><h2 id="Tensorflow-Model-Analysis"><a href="#Tensorflow-Model-Analysis" class="headerlink" title="Tensorflow Model Analysis"></a>Tensorflow Model Analysis</h2><ol><li>Tensorflow 평가 라이브러리, 많은 양 데이터 분산 평가, Jupyter 통한 시각화 처리</li><li>Tensorflow Model Analysis → Eval Graph → Tensorflow Serving 순으로 진행</li></ol><br><h2 id="Tensorflow-Serving"><a href="#Tensorflow-Serving" class="headerlink" title="Tensorflow Serving"></a>Tensorflow Serving</h2><ol><li>Service → (데이터 전달) → 서버 → 학습 → 모델 → Service 의 문제 해결점을 Tensorflow Serving 이 그 사이에서 Serving 하여, 다중 모델, Thread Isolation, 높은 처리량, 적용을 한다.</li><li>Service → (데이터 전달) → 서버 → 학습 → 모델 → (gRPC 이용) → Serving → Service</li><li>RESTful API 적용 가능. <em>(2018. 7. 7 기준 아직 미공개)</em></li></ol><hr><h1 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h1><p><strong>- Tensorflow 는 백엔드 뿐만 아니라 클라이언트 확장도 이뤄지고있다.</strong><br><strong>- 점점 다양한 개발자를 수용하기 위해 개발 편의성을 늘리고 있다.</strong><br><strong>- 다양한 플랫폼으로 Tensorflow 가 진출하고 있다.</strong><br><strong>- Tensorflow 를 배우자</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;이건희(Invest Crypto, GDG 판교 운영자)&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerlink&quot; title=&quot;개요&quot;&gt;&lt;/a&gt;개요&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Google De
      
    
    </summary>
    
      <category term="Seminar" scheme="https://wgtech.github.io/categories/Seminar/"/>
    
      <category term="Google" scheme="https://wgtech.github.io/categories/Seminar/Google/"/>
    
      <category term="Google I/O" scheme="https://wgtech.github.io/categories/Seminar/Google/Google-I-O/"/>
    
      <category term="Tensorflow" scheme="https://wgtech.github.io/categories/Seminar/Google/Google-I-O/Tensorflow/"/>
    
    
      <category term="Seminar" scheme="https://wgtech.github.io/tags/Seminar/"/>
    
      <category term="Google" scheme="https://wgtech.github.io/tags/Google/"/>
    
      <category term="Google I/O" scheme="https://wgtech.github.io/tags/Google-I-O/"/>
    
      <category term="Machine Learning" scheme="https://wgtech.github.io/tags/Machine-Learning/"/>
    
      <category term="Artifical Intelligence" scheme="https://wgtech.github.io/tags/Artifical-Intelligence/"/>
    
      <category term="Tensorflow" scheme="https://wgtech.github.io/tags/Tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Google I/O Extended &#39;18 Incheon : Modern Android Development</title>
    <link href="https://wgtech.github.io/posts/2018/07/07/Google-IO-Extended-Incheon-2018-Modern-Android-Development/"/>
    <id>https://wgtech.github.io/posts/2018/07/07/Google-IO-Extended-Incheon-2018-Modern-Android-Development/</id>
    <published>2018-07-07T05:30:00.000Z</published>
    <updated>2019-10-28T13:52:48.690Z</updated>
    
    <content type="html"><![CDATA[<p><strong>김태호님, Google Korea (Mobile Apps Technical Specialist)</strong></p><h1 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h1><ol><li>Android Jetpack &amp; Android Studio</li><li>Android 10주년인 2018년.</li></ol><h1 id="변화된-부분들"><a href="#변화된-부분들" class="headerlink" title="변화된 부분들"></a>변화된 부분들</h1><h2 id="특징-2017년과-2018년-사이에-많은-것들이-생김"><a href="#특징-2017년과-2018년-사이에-많은-것들이-생김" class="headerlink" title="특징 (2017년과 2018년 사이에 많은 것들이 생김.)"></a>특징 (2017년과 2018년 사이에 많은 것들이 생김.)</h2><ol><li>ConstraintLayout, Kotlin</li><li>Architecture Components, KTX (라이브러리),</li><li>Studio Profilers, Paging (라이브러리)</li></ol><h2 id="안드로이드-개발-과거와-오늘"><a href="#안드로이드-개발-과거와-오늘" class="headerlink" title="안드로이드 개발 과거와 오늘"></a>안드로이드 개발 과거와 오늘</h2><h3 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h3><ol><li>Hierarchy Viewer<br>⇒ <strong>Android Studio 의 Layout Inspector</strong></li><li>Eclipse 에서의 Profiler<br>⇒ <strong>Android Studio 에서 모든 메서드 트래킹과 샘플링을 확인할 수 있음.</strong></li><li>Dalvik Debug Window (Memory Tracking)<br>⇒ <strong>Android Studio 에서 자체 제공</strong> (8.0 이상, 그 이하는 Start-Stop 수동으로 지정해야한다.)</li><li>코딩 방식의 Layout Design<br>⇒ <strong>ConstraintLayout</strong> 등장 (아직 코딩이 필요하긴 하지만, 실제로 디자인과 개발의 분담과 충돌이 줄어들고 있는 추세)</li></ol><br><h3 id="Runtime-amp-Language"><a href="#Runtime-amp-Language" class="headerlink" title="Runtime &amp; Language"></a>Runtime &amp; Language</h3><ol><li>Dalvik (과거의 하드웨어 성능이 다소 제약적이어서, 메모리 최적화 중심 런타임이었음.)<br>⇒ <strong>ART</strong> (특정 디바이스에 제약을 두는 것이 아니고, 앱 자체의 퍼포먼스에 중점임. Heap defragmentation)</li><li>Java (사용자층이 넓다. 쓸 수 있는 좋은 Tools들이 많다. 그러나, 신버전에 적응이 매우 느린 편, 1.5버전에 최적화)<br>⇒ <strong>Kotlin</strong> (하위호환성 까지 제공한 Java 1.7/1.8 기반의 공식 지원 언어)</li></ol><br><h3 id="Libraries-amp-APIs"><a href="#Libraries-amp-APIs" class="headerlink" title="Libraries &amp; APIs"></a>Libraries &amp; APIs</h3><ol><li>Layouts (Absolute, Linear, Frame, Grid, Relative)<br>⇒ Layouts (Absolute, Linear, Frame, Grid, Relative) <strong>+ ConstraintLayout</strong></li><li>AdapterViews (List, Grid, Gallery, ViewHolder, Animations…)<br>⇒ <strong>RecyclerView 사용 + LayoutManager 사용, notifyItem(..)(ed 또는 position)</strong> 메서드 사용</li><li>Fragments (Complicated, Core Platform Bugs)<br>⇒ <strong>Platform API Deprecated 되었으니 Support Library 자체의 Fragments 사용 권장 (New Navigation Component)</strong></li><li>Activities (기존에는 무조건 액티비티로 처리하려고 함)<br>⇒ <strong>Activity 하나로 유지하도록 권장. (One Activity Application)</strong></li><li>Architecture (<strong>Dianne Hackborn</strong> 이 알아서 하라고 함. 그러니까 혼란을 가중시킴)<br>⇒ <strong>Google</strong> 에서 <strong>Recommended app architecture</strong> 제공함.</li><li>Android Lifecycle (Activity 꺼 따로 Fragment 꺼 따로 알아야함.) 그리고 Callback 메서드를 일일히 처리해야한다.<br>⇒ <strong>Architecture Components : LifeCycle (LifecycleOwner, LifecycleObserver)</strong> Activity와 기존 코드들이 분리가 된다.</li><li>Views and Data (Activity에 View와 데이터, 생명주기들이 모두 포함)<br>⇒ <strong>LiveData&lt;type&gt; data</strong> 방식의 ViewModel 로 제공됨. 그리고  Activity에는 ViewModel를 참조하는 것으로 바뀜.</li><li>Data 기존의 처리<br>⇒ <strong>Room 이라는 형태로 데이터 처리</strong> (Sqlite 기반, Compile-time 검증, LiveData Integration)</li></ol><br><h3 id="Tools-1"><a href="#Tools-1" class="headerlink" title="Tools"></a>Tools</h3><ol><li><strong><a href="https://developer.android.com/jetpack" rel="external nofollow noopener noreferrer" target="_blank">Android Jetpack</a></strong> : 좋은 Android 앱을 만들기 위한 좋은 Tools과 라이브러리. (AndroidX, Android KTX, Architecture Components 포함)<ol><li>Architecture : WorkManager, Navigation, Paging</li><li>UI</li><li>Behavior</li><li>Foundation</li></ol></li><li><strong>AndroidX</strong><ul><li>AndroidX : 좁은 범위의 binary dependencies 에서는 권장함.</li></ul><ol><li>Finer-grained artifacts : 직관적으로 Maven 방식의 groupId, artifactId 로 제공함.</li><li>Refined versioning : 기존 라이브러리 버전인 28.0.0 을 1.0.0 으로 새로 정리</li><li>Updated Packaging : android.&lt;feature&gt;.ClassName 또는 Maven 방식</li><li>Migrating to AndroidX : Android Studio <strong>3.2</strong> -&gt; Refactor -&gt; Refactor to AndroidX</li><li>AAR &amp; JAR : <strong>Jetifier</strong> (Binary Migration tool) 로 해결</li></ol></li><li><strong>Android Studio</strong><ol><li>DX -&gt; D8 : 16% 성능 향상</li><li>SQL Code Editing Auto Completion</li><li>Kotlin Lint Checks</li><li>C++ Profiler</li><li>Network Threading Profiler</li><li>IntelliJ Platform Update : SVC Preference 기능</li><li>Emulator Quick Boot</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;김태호님, Google Korea (Mobile Apps Technical Specialist)&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;서론&quot;&gt;&lt;a href=&quot;#서론&quot; class=&quot;headerlink&quot; title=&quot;서론&quot;&gt;&lt;/a&gt;서론
      
    
    </summary>
    
      <category term="Seminar" scheme="https://wgtech.github.io/categories/Seminar/"/>
    
      <category term="Google" scheme="https://wgtech.github.io/categories/Seminar/Google/"/>
    
      <category term="Google I/O" scheme="https://wgtech.github.io/categories/Seminar/Google/Google-I-O/"/>
    
      <category term="Android" scheme="https://wgtech.github.io/categories/Seminar/Google/Google-I-O/Android/"/>
    
    
      <category term="Seminar" scheme="https://wgtech.github.io/tags/Seminar/"/>
    
      <category term="Framework" scheme="https://wgtech.github.io/tags/Framework/"/>
    
      <category term="Android" scheme="https://wgtech.github.io/tags/Android/"/>
    
      <category term="Google" scheme="https://wgtech.github.io/tags/Google/"/>
    
      <category term="Google I/O" scheme="https://wgtech.github.io/tags/Google-I-O/"/>
    
  </entry>
  
  <entry>
    <title>Google I/O Extended &#39;18 Incheon : 새로워진 Material Design 소개</title>
    <link href="https://wgtech.github.io/posts/2018/07/07/Google-IO-Extended-Incheon-2018-Introduce-New-Material-Design/"/>
    <id>https://wgtech.github.io/posts/2018/07/07/Google-IO-Extended-Incheon-2018-Introduce-New-Material-Design/</id>
    <published>2018-07-07T03:27:00.000Z</published>
    <updated>2019-10-28T13:52:48.690Z</updated>
    
    <content type="html"><![CDATA[<p><strong>임성혁님, Google Korea (Developer Relations)</strong></p><h1 id="Open-Source-is-a-key-part-of-Google-Engineering"><a href="#Open-Source-is-a-key-part-of-Google-Engineering" class="headerlink" title="Open Source is a key part of Google Engineering"></a>Open Source is a key part of Google Engineering</h1><ul><li>Kubernetes, Android, Chrome, Tensorflow</li></ul><p><strong>임베디드 개발자 출신 - 개발자가 디자인 감각을 가지고, 협업을 할 수 있는 디자인이라고 생각한다.</strong></p><br><h2 id="What’s-Material-Design"><a href="#What’s-Material-Design" class="headerlink" title="What’s Material Design?"></a>What’s Material Design?</h2><ol><li>2014 출시, 전폭적 지지로 성장됨. 많은 툴들이 공개됨</li><li>Print design Methods<ul><li>Motion provides meaning</li><li>Flexible foundation</li><li>Cross-platform</li></ul></li><li>Material Design System is a set of components…</li><li>Material Design System is a set of patterns…</li><li><a href="https://material.io/" rel="external nofollow noopener noreferrer" target="_blank">https://material.io</a> : Guidelines</li><li>Material Design Example : SHRINE</li><li>Stickersheet (이런것도 있나? 하는 것들도 다 있음)</li></ol><br><h2 id="What’s-new-in-Material-Design"><a href="#What’s-new-in-Material-Design" class="headerlink" title="What’s new in Material Design?"></a>What’s new in Material Design?</h2><ol><li>검은색 바탕 흰색 글씨로 변경<ul><li><a href="https://m2-spec.appspot.com/" rel="external nofollow noopener noreferrer" target="_blank">https://m2-spec.appspot.com/</a></li></ul></li><li>Material System<br> <em>Material Foundation</em><br> <em>Material Guidelines</em></li><li>Tools, Editor (Sketch 앱과 사이트를 통해 제공) 를 통하여 실제로 어울리는 색상을 골라주고 플러그인 형태로 Standalone 형태의 개발을 할 수 있다.<br> Gallery 는 한 Products를 개발할 때 각 서버와 플랫폼을 관리할 수 있다. 버전관리가 용이함.</li></ol><br><h2 id="How-to-use-Material-Design"><a href="#How-to-use-Material-Design" class="headerlink" title="How to use Material Design ?"></a>How to use Material Design ?</h2><h3 id="Tabs-Gesture에-가장-민감한-사항-잘-이해하면-전체적으로-구조-파악이-용이하다"><a href="#Tabs-Gesture에-가장-민감한-사항-잘-이해하면-전체적으로-구조-파악이-용이하다" class="headerlink" title="Tabs : Gesture에 가장 민감한 사항. 잘 이해하면 전체적으로 구조 파악이 용이하다."></a>Tabs : Gesture에 가장 민감한 사항. 잘 이해하면 전체적으로 구조 파악이 용이하다.</h3><p><img src="/images/2018/07/07/Google-IO-Extended-Incheon-2018-Introduce-New-Material-Design/Material-Design-Tabs.png" alt="Tabs 사진" title="Tabs 사진"></p><ol><li><strong>확장이 가능하고, 정보가 있으며, 동등한 단계의 카테고리들로 구성되어야한다. (Scalable, Informative, Peers)</strong><br><img src="/images/2018/07/07/Google-IO-Extended-Incheon-2018-Introduce-New-Material-Design/Material-Design-Tabs-Principles.png" alt="Tabs는 확장이 가능하고, 정보가 있으며, 동등한 단계의 카테고리들로 구성되어야한다." title="Tabs는 확장이 가능하고, 정보가 있으며, 동등한 단계의 카테고리들로 구성되어야한다"></li><li>메뉴 하위 구분 필수<br>아이콘 전용메뉴 제공 가능. (그러나 사용자들이 확실하게 분별할 수 있도록 설정해야한다.)<br>잘린 문자, 또는 바로 이해할 수 없게끔 줄인 문자는 사용 불가.</li></ol><br><h3 id="Navigation-Drawer"><a href="#Navigation-Drawer" class="headerlink" title="Navigation Drawer"></a>Navigation Drawer</h3><p><img src="/images/2018/07/07/Google-IO-Extended-Incheon-2018-Introduce-New-Material-Design/Material-Design-Navigation-Drawer.png" alt="Navigation Drawer 사진" title="Navigation Drawer 사진"></p><ol><li><strong>조직적이며, 아이템마다 그 특성이 확인이 가능하며, 해당 상황이나 맥락별로 구분이 가능해야한다. (Organized, Identifiable, Contextual)</strong><br><img src="/images/2018/07/07/Google-IO-Extended-Incheon-2018-Introduce-New-Material-Design/Material-Design-Navigation-Drawer-Principles.png" alt="Navigation Drawer는 조직적이며, 아이템마다 그 특성이 확인이 가능하며, 해당 상황이나 맥락별로 구분이 가능해야한다" title="Navigation Drawer는 조직적이며, 아이템마다 그 특성이 확인이 가능하며, 해당 상황이나 맥락별로 구분이 가능해야한다"></li><li>5개 이상의 메뉴를 사용할 때 권장<br>오른쪽 화면에 나오는 앱에서 사용을 해서는 안된다.<br>Label 내용을 간결하게, 폰트를 작게 하지 말기<br>동일한 다수의 아이콘 사용 불가<br>아이콘 사용유무 일관성 유지 (사용자들이 상하위 메뉴 구분이 힘들어하기 때문이다.)<br>모든 메뉴에 구분자를 사용하지 않도록 한다. (예: ListView 사용시 구분자를 사용하지 않도록)</li></ol><br><h3 id="Floating-Action-Button"><a href="#Floating-Action-Button" class="headerlink" title="Floating Action Button"></a>Floating Action Button</h3><p><img src="/images/2018/07/07/Google-IO-Extended-Incheon-2018-Introduce-New-Material-Design/Material-Design-Floating-Action-Button.png" alt="Floating Action Button 사진" title="Floating Action Button 사진"></p><ol><li><strong>기능에 대해 건설적이거나 접근이 용이하며, 상황별로 구분이 가능하며, 다른 레이아웃이나 컴포넌트들에 가리지 않고 사용자들에게 우선적으로 보여져야 한다. (Constructive, Contextual, Primary)</strong><br><img src="/images/2018/07/07/Google-IO-Extended-Incheon-2018-Introduce-New-Material-Design/Material-Design-Floating-Action-Button-Principles.png" alt="Floating Action Button은 기능에 대해 건설적이거나 접근이 용이하며, 상황별로 구분이 가능하며, 다른 레이아웃이나 컴포넌트들에 가리지 않고 사용자들에게 우선적으로 보여져야 한다." title="Floating Action Button 은 기능에 대해 건설적이거나 접근이 용이하며, 상황별로 구분이 가능하며, 다른 레이아웃이나 컴포넌트들에 가리지 않고 사용자들에게 우선적으로 보여져야 한다."></li><li>항상 떠있어야 하고 가장 맨 위로 올려있다.<br>FAB는 분산없이 하나로만 사용 권장. 누르지 않더라도 기능이 분별한 아이콘만 사용 권장.<br>Layer Badges 사용 권장하지 않음. 글씨 사용은 미권장.</li></ol><br><h3 id="Extended-Floating-Action-Button"><a href="#Extended-Floating-Action-Button" class="headerlink" title="Extended Floating Action Button"></a>Extended Floating Action Button</h3><p><img src="/images/2018/07/07/Google-IO-Extended-Incheon-2018-Introduce-New-Material-Design/Material-Design-Extended-Floating-Action-Button.png" alt="Extended Floating Action Button 사진" title="Extended Floating Action Button 사진"></p><ul><li>Extended Floating Action Button 사용원칙은 Floating Action Button 과 동일하다.</li></ul><ol><li>Text Only</li><li>Wrapping Text (두 줄 이상)</li></ol><br><h3 id="App-Bars-Top"><a href="#App-Bars-Top" class="headerlink" title="App Bars : Top"></a>App Bars : Top</h3><p><img src="/images/2018/07/07/Google-IO-Extended-Incheon-2018-Introduce-New-Material-Design/Material-Design-App-Bars-Top.png" alt="App Bars : Top 사진" title="App Bars : Top 사진"></p><ol><li><strong>지속적이어야하고, 사용자들이 원하는대로 이동할 수 있도록 유도되어야하고, 그 자체로써 위치되어져야 한다. (Persistent, Guiding, Components)</strong><br><img src="/images/2018/07/07/Google-IO-Extended-Incheon-2018-Introduce-New-Material-Design/Material-Design-App-Bars-Top-Principles.png" alt="상단 App Bar는 지속적이어야하고, 사용자들이 원하는대로 이동할 수 있도록 유도되어야하고, 그 자체로써 위치되어져야 한다." title="상단 App Bar는 지속적이어야하고, 사용자들이 원하는대로 이동할 수 있도록 유도되어야하고, 그 자체로써 위치되어져야 한다."></li><li>Bar에 이미지 넣는 것을 지양.<br>두 줄 이상의 메뉴 이름 사용 불가. (…)문자 사용 불가.<br>작은 문자 크기 사용 불가</li></ol><br><h3 id="App-Bars-Bottom"><a href="#App-Bars-Bottom" class="headerlink" title="App Bars : Bottom"></a>App Bars : Bottom</h3><p><img src="/images/2018/07/07/Google-IO-Extended-Incheon-2018-Introduce-New-Material-Design/Material-Design-App-Bars-Bottom.png" alt="하단 App Bar는 역동적이며, 유연해야하며, 인체공학적이어야한다." title="App Bars : Bottom 사진"></p><ol><li>주로 한국인들이 사용하는 디자인. 또는 큰 화면의 휴대폰에서 편리한 메뉴 선택 사용을 도움.</li><li><strong>역동적이며, 유연해야하며, 인체공학적이어야한다. (Actionable, Flexible, Ergonomic)</strong><br><img src="/images/2018/07/07/Google-IO-Extended-Incheon-2018-Introduce-New-Material-Design/Material-Design-App-Bars-Bottom-Principles.png" alt="하단 App Bar는 역동적이며, 유연해야하며, 인체공학적이어야한다." title="하단 App Bar는 역동적이며, 유연해야하며, 인체공학적이어야한다."></li><li>자유로운 Positioning 가능<br>FAB on a Bottom Bar (붕 떠있는 형태로 사용하면 안된다.)<br>Action이 2개 이상으로 사용 필수. Navigation 을 넣는 걸 권장하지 않음.</li></ol><br><h3 id="Backdrop"><a href="#Backdrop" class="headerlink" title="Backdrop"></a>Backdrop</h3><p><strong><em>(Google I/O 2018 신기능)</em></strong><br><img src="/images/2018/07/07/Google-IO-Extended-Incheon-2018-Introduce-New-Material-Design/Material-Design-Backdrop.png" alt="Backdrop 사진" title="Backdrop 사진"></p><ol><li><strong>필요 레이아웃들이 서로 연관되어져야하며, 즉시 그 이벤트가 보여져야하며, 상황에 맞춰 제공되어야한다. (Relevant, Immediate, Contextual</strong><br><img src="/images/2018/07/07/Google-IO-Extended-Incheon-2018-Introduce-New-Material-Design/Material-Design-Backdrop-Principles.png" alt="Backdrop은 필요 레이아웃들이 서로 연관되어져야하며, 즉시 그 이벤트가 보여져야하며, 상황에 맞춰 제공되어야한다." title="Backdrop은 필요 레이아웃들이 서로 연관되어져야하며, 즉시 그 이벤트가 보여져야하며, 상황에 맞춰 제공되어야한다."></li><li>항상 보이는 것이 아니라, 임시적으로 숨겨져 있는 부분들을 제공함.<br>(Edit 할 수 있는 부분이 아니고, 단순히 Viewable 한 부분으로 제공하여야함)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;임성혁님, Google Korea (Developer Relations)&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;Open-Source-is-a-key-part-of-Google-Engineering&quot;&gt;&lt;a href=&quot;#Open-Sou
      
    
    </summary>
    
      <category term="Seminar" scheme="https://wgtech.github.io/categories/Seminar/"/>
    
      <category term="Google" scheme="https://wgtech.github.io/categories/Seminar/Google/"/>
    
      <category term="Google I/O" scheme="https://wgtech.github.io/categories/Seminar/Google/Google-I-O/"/>
    
      <category term="Material Design" scheme="https://wgtech.github.io/categories/Seminar/Google/Google-I-O/Material-Design/"/>
    
    
      <category term="Seminar" scheme="https://wgtech.github.io/tags/Seminar/"/>
    
      <category term="Framework" scheme="https://wgtech.github.io/tags/Framework/"/>
    
      <category term="Android" scheme="https://wgtech.github.io/tags/Android/"/>
    
      <category term="Google" scheme="https://wgtech.github.io/tags/Google/"/>
    
      <category term="Google I/O" scheme="https://wgtech.github.io/tags/Google-I-O/"/>
    
      <category term="Design" scheme="https://wgtech.github.io/tags/Design/"/>
    
      <category term="Material Design" scheme="https://wgtech.github.io/tags/Material-Design/"/>
    
      <category term="iOS" scheme="https://wgtech.github.io/tags/iOS/"/>
    
      <category term="Web" scheme="https://wgtech.github.io/tags/Web/"/>
    
      <category term="Dart" scheme="https://wgtech.github.io/tags/Dart/"/>
    
      <category term="Flutter" scheme="https://wgtech.github.io/tags/Flutter/"/>
    
  </entry>
  
</feed>
